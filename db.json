{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/LICENSE","path":"lib/source/lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/README.md","path":"lib/source/lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/canvas_sphere.min.js","path":"lib/source/lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/canvas_lines.min.js","path":"lib/source/lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/gulpfile.js","path":"lib/source/lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/package.json","path":"lib/source/lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/renovate.json","path":"lib/source/lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/three-waves.min.js","path":"lib/source/lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/three.min.js","path":"lib/source/lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/lib/CanvasRenderer.js","path":"lib/source/lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/lib/Projector.js","path":"lib/source/lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/src/canvas_lines.js","path":"lib/source/lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/src/canvas_sphere.js","path":"lib/source/lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/source/lib/three/src/three-waves.js","path":"lib/source/lib/three/src/three-waves.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/index.js","path":"lib/bookmark/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/package.json","path":"lib/bookmark/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/renovate.json","path":"lib/bookmark/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"eaa3b853231605a8cf4224ed60ef49243eb6582a","modified":1614861618596},{"_id":"source/_posts/hello-world.md","hash":"6956103f9ca27585958457c0ad9ef65038bcb77e","modified":1614836143661},{"_id":"themes/next/.DS_Store","hash":"e8784c8be5fb9c898d1794d1d186254142856659","modified":1614872717268},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1607964498358},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1607964498358},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1607964498358},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1607964498361},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1607964498362},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1607964498362},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1607964498362},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1607964498362},{"_id":"themes/next/_config.yml","hash":"26153aa9cccc99f6c80a5fd5f1f51c75a89b5d37","modified":1614862340804},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1607964498363},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1607964498370},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1607964498401},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1607964498358},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1607964498358},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1607964498359},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1607964498360},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1607964498360},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1607964498360},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1607964498360},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1607964498360},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1607964498360},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1607964498361},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1607964498361},{"_id":"themes/next/docs/.DS_Store","hash":"a016e090d0d3f03d36d373944cb2d1045e3a2768","modified":1607964503609},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1607964498364},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1607964498364},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1607964498364},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1607964498365},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1607964498365},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1607964498365},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1607964498366},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1607964498366},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1607964498366},{"_id":"themes/next/downloads/.DS_Store","hash":"3fe4107bc53859ccad44a422c7959af01428305b","modified":1614742102889},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1607964498370},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1607964498370},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1607964498371},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1607964498371},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1607964498371},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1607964498372},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1607964498372},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1607964498372},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1607964498373},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1607964498372},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1607964498373},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1607964498373},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1607964498374},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1607964498374},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1607964498374},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1607964498375},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1607964498375},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1607964498375},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1607964498376},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1607964498376},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1607964498376},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1607964498377},{"_id":"themes/next/layout/.DS_Store","hash":"63d5879a2673434f19bfbb22529263f5419d12be","modified":1614862254378},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1607964498377},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1607964498399},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1607964498399},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1607964498400},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1607964498400},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1607964498400},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1607964498400},{"_id":"themes/next/scripts/.DS_Store","hash":"dfa4ca9afd2a409c686e4ced96413cb5f437d660","modified":1607964503617},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1607964498407},{"_id":"themes/next/source/.DS_Store","hash":"466876fe54580494f26b18d47f4d6aad462e8984","modified":1614837670656},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1607964498359},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1607964498359},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1607964498359},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1607964498359},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1607964498367},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1607964498368},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1607964498368},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1607964498368},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1607964498369},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1607964498369},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1607964498369},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1607964498369},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1607964498370},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1607964498366},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1607964498367},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1607964498367},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1607964498367},{"_id":"themes/next/layout/_macro/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1614745623791},{"_id":"themes/next/layout/_macro/post.swig","hash":"b5820e13c572d50b532296968113f63adc350b44","modified":1614782790338},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1607964498377},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1607964498378},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"7ea17c7ae6fb15b4ae531c03364f8c7076d55588","modified":1614785287269},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1614786232971},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1607964498378},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1607964498382},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1607964498383},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1607964498386},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1607964498387},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1607964498387},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1607964498388},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1607964498389},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1607964498390},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1607964498391},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1607964498394},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1607964498395},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1607964498395},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1607964498401},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1607964498405},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1607964498405},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1607964498405},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1607964498406},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1607964498406},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1607964498406},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1607964498407},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1607964498407},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1607964498407},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1607964498408},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1607964498408},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1607964498408},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1607964498409},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1607964498409},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1607964498409},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1607964498409},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1607964498410},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1607964498410},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1607964498410},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1607964498465},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1607964498466},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1607964498466},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1607964498466},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1607964498467},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1607964498467},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1607964498467},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1607964498468},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1607964498470},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1607964498474},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1607964498474},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1607964498475},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1607964498474},{"_id":"themes/next/source/css/.DS_Store","hash":"314af5c8ef55505054f919416a7de2df5f7ec677","modified":1614837731045},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1607964498412},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1607964498449},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1607964498465},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1607964498481},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1607964498481},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1607964498483},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1607964498483},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1607964498483},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1607964498486},{"_id":"themes/next/source/lib/.DS_Store","hash":"2ee8e83fed6f7203d11f8e03ebdd5e63a3bcdd8f","modified":1614827064086},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1607964498486},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1607964498379},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1607964498380},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1607964498380},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1607964498381},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1607964498381},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1607964498381},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1607964498382},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1607964498382},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1607964498383},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1607964498384},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1607964498384},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1607964498384},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1607964498384},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1607964498385},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1607964498385},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1607964498386},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1607964498386},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1607964498385},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1607964498387},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1607964498388},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1607964498388},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1607964498389},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1607964498389},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1607964498390},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1607964498390},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1607964498390},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1607964498391},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1607964498391},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1607964498392},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1607964498392},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1607964498393},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1607964498393},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1607964498393},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1607964498393},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1607964498393},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1607964498394},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1607964498394},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1607964498395},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1607964498396},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1607964498396},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1607964498396},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1607964498396},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1607964498397},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1607964498397},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1607964498398},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1607964498398},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1607964498398},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1607964498399},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1607964498402},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1607964498402},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1607964498402},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1607964498403},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1607964498403},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1607964498403},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1607964498403},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1607964498404},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1607964498404},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1607964498404},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1607964498405},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"153e889124d76f662579fc8345fd9a9065999cba","modified":1614750152006},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"b08f2f359833c7c5f4899bcce4a9cc9c8b8af294","modified":1614844197467},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1607964498459},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1607964498459},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1607964498459},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1607964498463},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1607964498463},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1607964498485},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1607964498485},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1607964498492},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1607964498493},{"_id":"themes/next/source/css/_common/outline/.DS_Store","hash":"0da4c9e5fae44a26aea81712540eeb08e265f16a","modified":1614786908121},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1607964498428},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1607964498430},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"1fc20543e49a88e1094d5dbf66949fa56bb78cd8","modified":1614786863646},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1607964498413},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1607964498413},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1607964498414},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1607964498420},{"_id":"themes/next/source/css/_common/scaffolding/.DS_Store","hash":"850f4614cdf21ab079f921e52e5c6469a0c4f426","modified":1614786919692},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1607964498437},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1607964498436},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1607964498437},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1607964498439},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1607964498439},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1607964498443},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1607964498444},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1607964498449},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1607964498451},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1607964498452},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1607964498452},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1607964498453},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1607964498453},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1607964498453},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1607964498454},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1607964498454},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1607964498454},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1607964498455},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1607964498456},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1607964498457},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1607964498457},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1607964498457},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1607964498458},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1607964498458},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1607964498458},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1607964498459},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1607964498487},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1607964498491},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1607964498426},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1607964498426},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1607964498426},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1607964498427},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1607964498427},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1607964498427},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1607964498427},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1607964498430},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1607964498428},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1607964498431},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1607964498432},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1607964498434},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1607964498434},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1607964498435},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1607964498435},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1607964498435},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1607964498436},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1607964498436},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1607964498414},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1607964498414},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1607964498415},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1607964498415},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1607964498415},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1607964498416},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1607964498417},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1607964498417},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1607964498417},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1607964498418},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1607964498418},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1607964498418},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1607964498419},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1607964498419},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1607964498420},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1607964498419},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1607964498420},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1607964498420},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1607964498421},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1607964498421},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1607964498421},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1607964498422},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1607964498425},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1607964498437},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1607964498438},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1607964498438},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1607964498445},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1607964498439},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1607964498445},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1607964498446},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1607964498446},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1607964498446},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1607964498447},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1607964498449},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1607964498490},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1607964498492},{"_id":"themes/next/source/images/favicon-32x32.ico","hash":"a4ba03a9c8328b76adadf7a6be11a1e13b5f7d70","modified":1614751483987},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"b8b573d9afe4e597672dfb7ee92f0ffb62fd1688","modified":1614751622034},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"a4ba03a9c8328b76adadf7a6be11a1e13b5f7d70","modified":1614751483987},{"_id":"public/search.xml","hash":"9048467d6411e2933c6cded96a9abc2e3c29cb47","modified":1614872901180},{"_id":"public/2021/03/03/hello-world/index.html","hash":"a9c4d4330715f763190adcf19b22af40678a1adc","modified":1614779991074},{"_id":"public/archives/index.html","hash":"8eebe3bc1f89ae0c97501b27eb58430ee63187a6","modified":1614872901180},{"_id":"public/archives/2021/index.html","hash":"4015c68fb3286ea05e3710ff70ae31c1213f7d61","modified":1614872901180},{"_id":"public/archives/2021/03/index.html","hash":"a670a246b2c24861386a0ed2f65f981311dd3657","modified":1614872901180},{"_id":"public/index.html","hash":"93961adfdff5495fd6cc2624e35b232ae5669a0e","modified":1614872901180},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1614779991074},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1614779991074},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1614779991074},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614779991074},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1614779991074},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1614779991074},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1614779991074},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1614779991074},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614779991074},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1614779991074},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1614779991074},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614779991074},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1614779991074},{"_id":"public/images/favicon-32x32.png","hash":"a4ba03a9c8328b76adadf7a6be11a1e13b5f7d70","modified":1614779991074},{"_id":"public/images/favicon-16x16.png","hash":"b8b573d9afe4e597672dfb7ee92f0ffb62fd1688","modified":1614779991074},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1614779991074},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1614779991074},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1614779991074},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1614779991074},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1614779991074},{"_id":"public/css/main.css","hash":"da2a984fa96ccc50a61f87d575a3d57ef5511397","modified":1614779991074},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1614779991074},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1614779991074},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1614779991074},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1614779991074},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1614779991074},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1614779991074},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1614779991074},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1614779991074},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1614779991074},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1614779991074},{"_id":"themes/next/source/images/avatar.png","hash":"dfaa39486c1305b1fcffcd9381a3f3b76f8eb709","modified":1540440031746},{"_id":"themes/next/source/lib/source/lib/three/.gitignore","hash":"e691fe9e685cbd50bcd7e138f4ca3503e7b0eaa4","modified":1614784974276},{"_id":"themes/next/source/lib/source/lib/three/README.md","hash":"1e31051ce404eaa86df192b7000442bacd31e2b4","modified":1614784974277},{"_id":"themes/next/source/lib/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614784974277},{"_id":"themes/next/source/lib/source/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1614784974278},{"_id":"themes/next/source/lib/source/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1614784974277},{"_id":"themes/next/source/lib/source/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1614784974278},{"_id":"themes/next/source/lib/source/lib/three/package.json","hash":"af5089f910e1041b316def5512a23443f0ffaadc","modified":1614784974279},{"_id":"themes/next/source/lib/source/lib/three/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1614784974280},{"_id":"themes/next/source/lib/source/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1614784974281},{"_id":"themes/next/source/lib/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614784974268},{"_id":"themes/next/source/lib/source/lib/three/.git/config","hash":"65f90ae2568e8c72066580065d3e1df0d03f415c","modified":1614784974271},{"_id":"themes/next/source/lib/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614784967011},{"_id":"themes/next/source/lib/source/lib/three/.git/index","hash":"dba33ee8360e7aa2ebe7d4223435a4b10278b85a","modified":1614784974285},{"_id":"themes/next/source/lib/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1614784974265},{"_id":"themes/next/source/lib/source/lib/three/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614784974276},{"_id":"themes/next/source/lib/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1614784974279},{"_id":"themes/next/source/lib/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1614784974279},{"_id":"themes/next/source/lib/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1614784974280},{"_id":"themes/next/source/lib/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1614784974280},{"_id":"themes/next/source/lib/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1614784974281},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614784967014},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614784967012},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614784967015},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614784967016},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614784967013},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614784967018},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614784967017},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614784967018},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614784967013},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614784967016},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614784967016},{"_id":"themes/next/source/lib/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614784967019},{"_id":"themes/next/source/lib/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614784967011},{"_id":"themes/next/source/lib/source/lib/three/.git/logs/HEAD","hash":"19f135f13488ed22df1b891e347b79a52344ba7b","modified":1614784974269},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1614784969358},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1614784974252},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1614784969730},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1614784970034},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1614784969350},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1614784969716},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1614784970038},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1614784969317},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1614784969319},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1614784969323},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1614784974236},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1614784969311},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1614784974255},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1614784973915},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1614784974250},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1614784970029},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1614784969351},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1614784969726},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1614784969352},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1614784970037},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1614784970035},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1614784974244},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1614784969315},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1614784974230},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1614784969725},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1614784969357},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1614784974241},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1614784969714},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1614784969719},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1614784974239},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1614784969353},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1614784969728},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1614784969319},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1614784973914},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1614784974237},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1614784969354},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1614784973913},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1614784970036},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1614784973918},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1614784969324},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1614784974235},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1614784969314},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1614784969322},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1614784974238},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1614784974247},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1614784969333},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1614784969724},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1614784969721},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1614784969313},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1614784969312},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1614784974234},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1614784969318},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1614784969320},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1614784974251},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1614784969349},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1614784969722},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1614784969355},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1614784969323},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1614784974253},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1614784974248},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1614784973916},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1614784974245},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1614784970033},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1614784969316},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1614784974250},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1614784969332},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1614784974242},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1614784974254},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1614784969321},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1614784970028},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1614784970030},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1614784970032},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1614784973917},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1614784974232},{"_id":"themes/next/source/lib/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1614784974269},{"_id":"themes/next/source/lib/source/lib/three/.git/logs/refs/heads/master","hash":"19f135f13488ed22df1b891e347b79a52344ba7b","modified":1614784974270},{"_id":"themes/next/source/lib/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614784974268},{"_id":"themes/next/source/lib/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"19f135f13488ed22df1b891e347b79a52344ba7b","modified":1614784974268},{"_id":"themes/next/source/lib/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1614784973493},{"_id":"themes/next/source/lib/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1614784974284},{"_id":"themes/next/source/lib/bookmark/.eslintignore","hash":"3d3910611724b7584a29297a3f7132334a3ad091","modified":1614786372777},{"_id":"themes/next/source/lib/bookmark/.eslintrc.js","hash":"76bec2314ec3477b18e357f9992cf42a9524a3f7","modified":1614786372777},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1614786372777},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1614786372778},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1614786372778},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1614786372778},{"_id":"themes/next/source/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1614786372778},{"_id":"themes/next/source/lib/bookmark/package.json","hash":"013ff96fc03cd4ed7b17059af207e53f94953202","modified":1614786372779},{"_id":"themes/next/source/lib/bookmark/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1614786372779},{"_id":"themes/next/source/lib/bookmark/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614786372777},{"_id":"themes/next/source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614786372773},{"_id":"themes/next/source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614786355697},{"_id":"themes/next/source/lib/bookmark/.git/config","hash":"78190a1ff264b4bf5a40499559df42f2e0accc36","modified":1614786372775},{"_id":"themes/next/source/lib/bookmark/.git/index","hash":"66d3c2858ed95b618d6d7e47202f08d8b77550d5","modified":1614786372779},{"_id":"themes/next/source/lib/bookmark/.git/packed-refs","hash":"5133cf40bb12de7e6665640ebaad6c6f6913c693","modified":1614786372771},{"_id":"themes/next/source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614786355700},{"_id":"themes/next/source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614786355698},{"_id":"themes/next/source/lib/bookmark/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614786355701},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614786355703},{"_id":"themes/next/source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614786355702},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614786355699},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614786355704},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614786355703},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614786355698},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614786355701},{"_id":"themes/next/source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614786355702},{"_id":"themes/next/source/lib/bookmark/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614786355704},{"_id":"themes/next/source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614786355696},{"_id":"themes/next/source/lib/bookmark/.git/logs/HEAD","hash":"53185351a17b02e034c64c5ff1be995e5c3930ac","modified":1614786372774},{"_id":"themes/next/source/lib/bookmark/.git/objects/pack/pack-61d18fed4c3f5c558e3c43974339591035fbd774.idx","hash":"ba1bb36ec9d2929ddb4b82b25b8db367b4b2b874","modified":1614786372764},{"_id":"themes/next/source/lib/bookmark/.git/objects/pack/pack-61d18fed4c3f5c558e3c43974339591035fbd774.pack","hash":"45b1abd8249d9ddacfab3ddcc59d65a689ed9f05","modified":1614786372764},{"_id":"themes/next/source/lib/bookmark/.git/refs/heads/master","hash":"0ff01610d23a5f9b86dfe1138ddf331d9cd008d1","modified":1614786372774},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/heads/master","hash":"53185351a17b02e034c64c5ff1be995e5c3930ac","modified":1614786372774},{"_id":"themes/next/source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614786372773},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"53185351a17b02e034c64c5ff1be995e5c3930ac","modified":1614786372772},{"_id":"themes/next/categories/.DS_Store","hash":"5572ec28de4ac81134911e2bbad73665b80a286c","modified":1614787686939},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614788210507},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614788210509},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614788210508},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614788210509},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614788210511},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614788210512},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614788210509},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614788210511},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614788210512},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614788210508},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614788210510},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614788210510},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614788210513},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614788210513},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/config","hash":"8fdd82e494401dc825d4ddae5503bb8813b55b0c","modified":1614788210517},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614788210507},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/4b/2975337cf280e5555ca7a82dc7c2d4b437c5b0","hash":"d36f2c2b52c48d7f7cd0d0beb42be2ecd7534287","modified":1614788212813},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/22/504fa21ce1b75e3f898ffafc8d2a8bed8d00c9","hash":"7c6ee7a38812c72e52ecb5c2ad725a9f103923a6","modified":1614788212814},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1614788212814},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1614788212815},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1614788212816},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1614788212818},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1614788212819},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1614788212820},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1614788212821},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1614788212821},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1614788212823},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1614788212822},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1614788212825},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1614788212824},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1614788212826},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1614788212826},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1614788212817},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/50/306daa49b7b24c4759a4e832bfba3531c53f49","hash":"32aa9d96315007f8d79cd162bc77398addfa6ddf","modified":1614788212827},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/b3/5fc481f71dd08037f6b9febb5ec02c790f843b","hash":"ed5aa3a748675544aaa141c182a317453dd1e774","modified":1614788212828},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/fd/3e2cc9301ef9c1978ace2bd0aee99f47176661","hash":"09b27ad6cf69d4dcb926389e16913daccb5d2972","modified":1614788212829},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/8b/66994be5014f18d17347ff32232c91d51ad08c","hash":"a22da1680018e1ab95118216eb88115d2947930a","modified":1614788212830},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1614788212831},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1614788214001},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1614788214002},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1614788214003},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1614788214004},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1614788214005},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1614788214007},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1614788214008},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1614788214008},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1614788214010},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1614788214011},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1614788214012},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1614788214013},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1614788214014},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1614788214014},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614788214025},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214025},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/logs/refs/heads/master","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214027},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614788214034},{"_id":"themes/next/source/lib/theme-next-canvas-nest/.git/logs/HEAD","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214027},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614788214034},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614788210509},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614788210508},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614788210509},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614788210511},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614788210512},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614788210509},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614788210511},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614788210512},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614788210508},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614788210510},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614788210510},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614788210513},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614788210507},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1614788214027},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1614788212822},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1614788212826},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/22/504fa21ce1b75e3f898ffafc8d2a8bed8d00c9","hash":"7c6ee7a38812c72e52ecb5c2ad725a9f103923a6","modified":1614788212814},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1614788214013},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1614788212823},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1614788212826},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1614788214014},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1614788212816},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/4b/2975337cf280e5555ca7a82dc7c2d4b437c5b0","hash":"d36f2c2b52c48d7f7cd0d0beb42be2ecd7534287","modified":1614788212813},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/306daa49b7b24c4759a4e832bfba3531c53f49","hash":"32aa9d96315007f8d79cd162bc77398addfa6ddf","modified":1614788212827},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1614788212817},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1614788214008},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1614788214001},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1614788212818},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1614788212825},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1614788212824},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1614788214014},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1614788212819},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1614788214012},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/8b/66994be5014f18d17347ff32232c91d51ad08c","hash":"a22da1680018e1ab95118216eb88115d2947930a","modified":1614788212830},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1614788214002},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1614788212821},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1614788214011},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1614788212820},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1614788214005},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1614788212821},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1614788214010},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b3/5fc481f71dd08037f6b9febb5ec02c790f843b","hash":"ed5aa3a748675544aaa141c182a317453dd1e774","modified":1614788212828},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1614788214007},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1614788214004},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1614788212814},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1614788212831},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1614788214008},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1614788214003},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1614788212815},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/fd/3e2cc9301ef9c1978ace2bd0aee99f47176661","hash":"09b27ad6cf69d4dcb926389e16913daccb5d2972","modified":1614788212829},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614788214025},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614788214034},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"0ba5a24a483f36166f0cb871bd30f4c7467f3593","modified":1614788214035},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1614788214035},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1614788214035},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1614788214028},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614788214026},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614788210507},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1614788214024},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"74666d6be31ffb3ad26ccf6034623d9281b608b2","modified":1614788214036},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214027},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214027},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"bc065349581aeaa48fca76a609004af074a2652d","modified":1614788214025},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1614788331483},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1614788331484},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1614788331483},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1614788331484},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1614788331485},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1614788331485},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1614788331484},{"_id":"themes/next/source/lib/three/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1614788331485},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1614788331486},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1614788331483},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1614788331484},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1614788331485},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1614788331486},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1614788331487},{"_id":"themes/next/source/lib/three/.git/config","hash":"65f90ae2568e8c72066580065d3e1df0d03f415c","modified":1614788391643},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1614788331483},{"_id":"themes/next/source/lib/three/.git/objects/1f/354734edae8d1fa1af07d20573698512589c4e","hash":"9f1bb3baf74e25329b553704be0a3c64e194df8c","modified":1614788339624},{"_id":"themes/next/source/lib/three/.git/objects/9d/b082c6081a7d8b8b752bc35ebcba85073f5fac","hash":"c240b76ccdb8552d6d4c75e55d5c4c93807756af","modified":1614788339625},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1614788339626},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1614788339627},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1614788339628},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1614788339629},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1614788339629},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1614788339630},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1614788339631},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1614788339632},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1614788339633},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1614788339633},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1614788339634},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1614788339635},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1614788339636},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1614788339636},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1614788339637},{"_id":"themes/next/source/lib/three/.git/objects/8e/985e4c70f87248ecc33d93410d80d1632c552f","hash":"a1d2084dd43e026f1b93027221629f5cbb135c88","modified":1614788339638},{"_id":"themes/next/source/lib/three/.git/objects/bc/e19792442b36a0560e50adf61e86ef7ecbb50a","hash":"10f1b5f7fc7fd8b01ea9c5a5d1efad0464dd03ca","modified":1614788339639},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1614788339641},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1614788339640},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1614788339641},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1614788339642},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1614788340635},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1614788340636},{"_id":"themes/next/source/lib/three/.git/objects/4f/f48fd861ac49dd98ce52052bf6214f0a91facf","hash":"ae4d7b9a38e8913c055d37a6f129378d089bfd65","modified":1614788340637},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1614788340639},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1614788341233},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1614788341239},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1614788341237},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1614788341240},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1614788341241},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1614788341242},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1614788341241},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1614788341243},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1614788343465},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1614788343466},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1614788345053},{"_id":"themes/next/source/lib/three/.git/objects/ef/45fc381ccdb38fd03bb02c4e761d08275049c2","hash":"2eb89702aa19a302e38aff842b6ad1e22c3fbb93","modified":1614788345056},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1614788345054},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1614788345057},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1614788345059},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1614788345058},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1614788345061},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1614788345062},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1614788345060},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1614788345064},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1614788377437},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1614788385483},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1614788385484},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1614788385486},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1614788385487},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1614788385482},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1614788385488},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1614788388936},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1614788388938},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1614788391287},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1614788391287},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1614788391289},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1614788391288},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1614788391594},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1614788391598},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1614788391596},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1614788391606},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1614788391608},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1614788391609},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1614788391610},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1614788391611},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1614788391613},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1614788391616},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1614788391617},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1614788391615},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1614788391604},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1614788391600},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1614788391601},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1614788391638},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"c73cd440e68daeee9c6e09ce363d9159ac90a544","modified":1614788391638},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"c73cd440e68daeee9c6e09ce363d9159ac90a544","modified":1614788391641},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1614788391650},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1614788391654},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1614788391654},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1614788391656},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1614788391656},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1614788391656},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"c73cd440e68daeee9c6e09ce363d9159ac90a544","modified":1614788391641},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614788391651},{"_id":"themes/next/source/lib/three/README.md","hash":"1e31051ce404eaa86df192b7000442bacd31e2b4","modified":1614788391651},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1614788391652},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1614788391653},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1614788391653},{"_id":"themes/next/source/lib/three/.gitignore","hash":"e691fe9e685cbd50bcd7e138f4ca3503e7b0eaa4","modified":1614788391650},{"_id":"themes/next/source/lib/three/.DS_Store","hash":"06ebde44e29d0f761f392ef12a4f2b2b43bbfa26","modified":1614827064083},{"_id":"themes/next/source/lib/three/package.json","hash":"af5089f910e1041b316def5512a23443f0ffaadc","modified":1614788391655},{"_id":"themes/next/source/lib/canvas-nest/.DS_Store","hash":"beb12185d336e60f75614c4d981d67bd81b11902","modified":1614788389139},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1614788391657},{"_id":"themes/next/source/lib/three/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1614788391655},{"_id":"themes/next/source/lib/canvas-nest/.git/.DS_Store","hash":"fc9850c2d3e1df4ee423ad96a14bab04ad16d906","modified":1614788382018},{"_id":"themes/next/source/lib/three/.git/.DS_Store","hash":"06e361fbe507b84668b3e1afad5147264b309304","modified":1614827064085},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"51439496ae6791f8b002584e71f5d10f4f1a1f71","modified":1614788391634},{"_id":"themes/next/source/lib/three/.git/index","hash":"f8434ff597adcf11b718d03117878d6c643aedee","modified":1614788391660},{"_id":"themes/next/source/lib/three/.git/objects/.DS_Store","hash":"97276dbf030fef815cf6ffcb7434c260044660c1","modified":1614788394147},{"_id":"themes/next/source/lib/three/.git/refs/.DS_Store","hash":"ab9603a69d018b589834f1a3fa879f4bc882ddb6","modified":1614788394145},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"dcb9d54aa64c8a682ca5ca209370022b8a8dc843","modified":1614788391641},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1614788391660},{"_id":"source/categories/index.md","hash":"ec472d11c9c53a2d7595c4f1febe7ddfe63741ce","modified":1614836079963},{"_id":"source/about/index.md","hash":"9b5435e42a027be930a034f6487a9b6a024909ef","modified":1614836105774},{"_id":"source/tags/index.md","hash":"8109aefab20c7ebff6f1152a2eca6575fb40061c","modified":1614835404477},{"_id":"source/_posts/注册中心Eureka.md","hash":"59eeab94bd517ef2682c6b8f9d68b7a1289b2b7c","modified":1614868947684},{"_id":"source/_posts/SpringBoot好“吃”的启动原理.md","hash":"97180f521002b0a3d7cdd7dff795d83e009c8f2b","modified":1614867456740},{"_id":"source/_posts/必知必会面试题之Java.md","hash":"53b71445212ae91824a58c0ecb7702aaea53f722","modified":1614867664140},{"_id":"source/_posts/必知必会面试题之Java注解.md","hash":"5b8f48cf7dd17ad26abd1883144491924fe08d4b","modified":1614871585720},{"_id":"source/_posts/记一次 RocketMQ-broker因内存不足导致的启动失败 (copy).md","hash":"4bf5ea045aa59a063e8c896279234aec9bb0208f","modified":1614868072804},{"_id":"source/_posts/“我的一剂良药”之开源指北.md","hash":"c13a3bacbff4f9d67c2ba33fbca16d541ae83ad5","modified":1614867444475},{"_id":"source/_posts/MacOS11.0-brew卡在Updating-Homebrew.md","hash":"186e12f9cae276f5e3100ff8b78eb2909e758792","modified":1614869065268},{"_id":"source/_posts/必知必会面试题之Java反射.md","hash":"a05a6440ea2f89409f745e4a9722ab10982134a5","modified":1614871653693},{"_id":"source/_posts/必知必会面试题之Java基础.md","hash":"4cb02054ab1899310def5cf8b57fe2cbf9c52314","modified":1614868124520},{"_id":"source/_posts/必知必会面试题之Java泛型.md","hash":"16b59ba9d37cdc11279c84c4e1792e3f10008964","modified":1614871646610},{"_id":"source/_posts/开源世界里的重要理念：上游优先（UpStream-First）.md","hash":"d6d9a0c8cb8bc20636fed8a9a799b5f812227ceb","modified":1614868637087},{"_id":"source/_posts/必知必会面试题之Java-IO流.md","hash":"1de906f19544aad58f7967b5535944d3ffa0264d","modified":1614871544437},{"_id":"source/_posts/必知必会面试题之Java集合.md","hash":"cccd423b5ea0244fda4916afd7c7bacb262f37b7","modified":1614868439852},{"_id":"source/_posts/必知必会面试题之JVM.md","hash":"dad9dd0a8d27cd7cc789e99cad2afc87da12b21d","modified":1614872609273},{"_id":"source/_posts/必知必会面试题之JVM.assets/image-20210304233813332.png","hash":"8e1cd302ce7245cb6a22d606ddb7b4b9537cac8b","modified":1614872293333},{"_id":"source/_posts/必知必会面试题之JVM.assets/image-20210304233638640.png","hash":"d95cac80f95de55912ab9f3a9d24158052225341","modified":1614872198643},{"_id":"public/atom.xml","hash":"d6edda0e5efb4dede376b0a50adc54e55f829590","modified":1614872901180},{"_id":"public/categories/index.html","hash":"c330a4b924b3a8e5d883c1190f55ef712ac6bcbf","modified":1614872901180},{"_id":"public/tags/index.html","hash":"df624f4c61f8d72fd04e83ca071ee927931f7f77","modified":1614872901180},{"_id":"public/about/index.html","hash":"5f7a592c9052e1fe41402d045e52f0b386b3390c","modified":1614872901180},{"_id":"public/2021/02/28/MacOS11.0-brew卡在Updating-Homebrew/index.html","hash":"d063e4d0ddf568af5ca8514d8a5b5133e859ff35","modified":1614872901180},{"_id":"public/2021/02/28/开源世界里的重要理念：上游优先（UpStream-First）/index.html","hash":"87bf56eb99c2aa28cb710429c5e907c3c9499f3a","modified":1614872901180},{"_id":"public/2021/03/04/必知必会面试题之JVM/index.html","hash":"b5d9fce8ad420ae4fca8b3337ff4ab7d143b3dc1","modified":1614872901180},{"_id":"public/2021/02/24/必知必会面试题之Java注解/index.html","hash":"82cf68a0fc264d7f42d1dd6d0115350611105e86","modified":1614872901180},{"_id":"public/2021/01/24/必知必会面试题之Java基础/index.html","hash":"9db91e49ca52aab1b146f50b73a69fde11dcd7d4","modified":1614872901180},{"_id":"public/2021/01/24/必知必会面试题之Java-IO流/index.html","hash":"36ff9c7a8e2d5940604a199e80c3059add66db64","modified":1614872901180},{"_id":"public/2021/01/24/必知必会面试题之Java集合/index.html","hash":"14c62396a52eccfdd46ee52633bfd1a2e91a6038","modified":1614872901180},{"_id":"public/2021/01/24/必知必会面试题之Java泛型/index.html","hash":"4a10775407fad5c479e3de9274f24d901b887fa7","modified":1614872901180},{"_id":"public/2021/01/24/必知必会面试题之Java反射/index.html","hash":"f0d0c8d8f62ab5e3fea845235b39f584e4ac49dd","modified":1614872901180},{"_id":"public/2021/01/12/记一次 RocketMQ-broker因内存不足导致的启动失败 (copy)/index.html","hash":"bccf4b5b29457fee6c7b1f164f54f8dc091f05e1","modified":1614872901180},{"_id":"public/2021/01/01/hello-world/index.html","hash":"a83f5a1a977371a6c1750120d983478e866cf264","modified":1614872901180},{"_id":"public/2020/12/30/SpringBoot好“吃”的启动原理/index.html","hash":"12107a1e45bdf572702e3b0cc6b9c1f7e882869f","modified":1614872901180},{"_id":"public/2020/01/21/“我的一剂良药”之开源指北/index.html","hash":"1c72f01ae029ce01f58fb9c1b5e9c8a9be0d52e1","modified":1614872901180},{"_id":"public/archives/2020/index.html","hash":"547e16f98b6933c2838eacc008ec6d6a54dc33e3","modified":1614872901180},{"_id":"public/archives/page/2/index.html","hash":"ea286083614f986f3f6473221cc3680713c0e953","modified":1614872901180},{"_id":"public/archives/2020/01/index.html","hash":"defdbe5b681c19f1d074f52f130fdeb71abd4dc5","modified":1614872901180},{"_id":"public/archives/2020/12/index.html","hash":"a8c590cedc75c6f9b829bc9e7f99a2d53f7072e0","modified":1614872901180},{"_id":"public/archives/2021/page/2/index.html","hash":"e12f77bd8ff5ee842667fc62a996114b17b5e251","modified":1614872901180},{"_id":"public/archives/2021/02/index.html","hash":"649da146c4538087bca57ceb8849e59fff169db1","modified":1614872901180},{"_id":"public/archives/2021/01/index.html","hash":"7dadeae31f446b33c6ea6a50f20c13f1a823696b","modified":1614872901180},{"_id":"public/categories/默认/index.html","hash":"118573db1b3009cb7f03dbcc8af2a92c11bf9cf8","modified":1614872901180},{"_id":"public/categories/SpringBoot/index.html","hash":"e9e4a0006c0d7805ff32bc455f95b7ca8ccf035c","modified":1614872901180},{"_id":"public/categories/RocketMQ/index.html","hash":"0c822e6712342c85efdec088cbb810a6f56472e7","modified":1614872901180},{"_id":"public/categories/Java/index.html","hash":"ea3689a7072772ad08885c59254ee48726e541c3","modified":1614872901180},{"_id":"public/categories/开源/index.html","hash":"765789d2e38207e8872816ad70820d0e9a209a7a","modified":1614872901180},{"_id":"public/categories/MacOS/index.html","hash":"93dd3590b21ede27e99be8a598398d5f0b56c0a5","modified":1614872901180},{"_id":"public/categories/JVM/index.html","hash":"da53f438b63bc8dc1c8651fd6d75ddd73e93df7e","modified":1614872901180},{"_id":"public/tags/Hexo/index.html","hash":"fa31ac75e97d31044fe5eb4b90ae30877ea0a6ce","modified":1614872901180},{"_id":"public/tags/SpringBoot/index.html","hash":"2e033523e159ca8b2dd0449327627180df04c399","modified":1614872901180},{"_id":"public/tags/RocketMQ/index.html","hash":"71bbdf13c37e408fd348580d86a224d8c30f0696","modified":1614872901180},{"_id":"public/tags/消息中间件/index.html","hash":"6670ad5d7b933edfc8e9077e9a7d3db4ac09938a","modified":1614872901180},{"_id":"public/tags/开源/index.html","hash":"4cf91db31d940a1d59941bf14cc5ae4e0984f1b8","modified":1614872901180},{"_id":"public/tags/感悟/index.html","hash":"e47b825916a282fecae67ccb324c77a12c3f205f","modified":1614872901180},{"_id":"public/tags/Java/index.html","hash":"87c470d41d2117bb25169decc019fcce74b9ae2a","modified":1614872901180},{"_id":"public/tags/面试/index.html","hash":"429307e00cabc65b6df6492341befc6cf8d09d36","modified":1614872901180},{"_id":"public/tags/MacOS/index.html","hash":"c3006a65dd2d7a0ec6af143f7d6b09f1c90ff59a","modified":1614872901180},{"_id":"public/tags/JVM/index.html","hash":"46943b5ceb3d94cdea5c9e28c19e03465ebde0da","modified":1614872901180},{"_id":"public/page/2/index.html","hash":"09baf49aa4871927dae3d0d4ea3562f1e7c6b29b","modified":1614872901180},{"_id":"public/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1614872901180},{"_id":"public/lib/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614872901180},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614872901180},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1614872901180},{"_id":"public/lib/source/lib/three/README.html","hash":"d8faebc08f93684752eeb936400e62117bd59b6e","modified":1614872901180},{"_id":"public/lib/source/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1614872901180},{"_id":"public/lib/source/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1614872901180},{"_id":"public/lib/source/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1614872901180},{"_id":"public/lib/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1614872901180},{"_id":"public/lib/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1614872901180},{"_id":"public/lib/bookmark/README.html","hash":"96cb9e6a06e67dfb67c0b048339d34ebf8595e54","modified":1614872901180},{"_id":"public/lib/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1614872901180},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1614872901180},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1614872901180},{"_id":"public/lib/canvas-nest/README.html","hash":"6a2eaecc6783b4a497f96d980d583b17af21caa2","modified":1614872901180},{"_id":"public/lib/bookmark/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1614872901180},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1614872901180},{"_id":"public/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1614872901180},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1614872901180},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1614872901180},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1614872901180},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1614872901180},{"_id":"public/lib/three/README.html","hash":"d8faebc08f93684752eeb936400e62117bd59b6e","modified":1614872901180},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1614872901180},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1614872901180},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1614872901180},{"_id":"public/lib/source/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1614872901180},{"_id":"public/lib/source/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1614872901180},{"_id":"public/lib/source/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1614872901180},{"_id":"public/lib/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1614872901180},{"_id":"public/lib/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1614872901180},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1614872901180},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1614872901180},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1614872901180},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1614872901180},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1614872901180},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1614872901180},{"_id":"public/lib/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1614872901180}],"Category":[{"name":"默认","_id":"ckltn12wm0000qh6a0oj3auof"},{"name":"Spring Cloud","_id":"ckluv5n330003286a9ez29r4z"},{"name":"Spring","_id":"ckluvvvzw0004546ag0ob8w2z"},{"name":"SpringBoot","_id":"ckluvw25j0006546a70uk0t3e"},{"name":"RocketMQ","_id":"ckluxx8wg000i546ahjmc1c4i"},{"name":"生活点滴","_id":"ckluyc63j0018546a7z9rf74a"},{"name":"开源","_id":"ckluyc8sh001a546aaf5tdy1x"},{"name":"Java","_id":"ckluyftog001k546aabtzbtys"},{"name":"MacOS","_id":"ckluz4c5x0020pt6a7exrfvu4"},{"name":"SpringCloud","_id":"ckluzf4130000x56a6h6z91y7"},{"name":"JVM","_id":"cklv0b8f90005x56ad2ox9nrj"}],"Data":[],"Page":[{"title":"分类","date":"2021-03-04T04:31:40.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-03-04 12:31:40\ntype: \"categories\"\n---\n\n","updated":"2021-03-04T05:34:39.963Z","path":"categories/index.html","_id":"ckluer7dz0000q66a9ohscl3y","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2020-12-31T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-01-01 00:00:00\ntype: \"tags\"\n---\n","updated":"2021-03-04T05:34:51.234Z","path":"tags/index.html","_id":"ckluer7e20001q66a7ropcod8","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"about","date":"2021-03-04T04:37:50.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-03-04 12:37:50\ntype: \"about\"\n---\n","updated":"2021-03-04T05:35:05.774Z","path":"about/index.html","_id":"ckluer7e40002q66ae29y8i55","comments":1,"layout":"page","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2020-12-31T16:00:00.000Z","updated":"2020-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n---\n<!--more-->\n---\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-01-01 00:00:00\nupdated: 2021-01-01 00:00:00\ncategories:\n- 默认\ntags:\n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n---\n<!--more-->\n---\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"_id":"cklt0qym700007u6aehllaxlk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<hr>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<hr>","more":"<hr>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"SpringBoot 好“吃”的启动原理","date":"2020-12-29T16:00:00.000Z","updated":"2020-12-29T16:00:00.000Z","_content":"\n## 不正经的前言\n\n最近好朋友山治去面试了，晚上回来有些低迷地问我：“小西，你知道 SpringBoot 的启动流程吗？”\n\n我说：“知道呀！从 SpringApplication.run() 方法开始，首先进行实例化，实例化里主要做了4件事：根据 calsspath……”\n\n山治抬腿就是一记“恶魔风脚”：SpringBoot 的启动步骤那么多，什么 1、2、3、4，谁能记得住啊！\n\n在被乔巴施展”还我漂漂拳“以后，我痛定思痛，暗暗发誓一定要写篇比美女还好看的文章教会山治，让他吃透这道看似难啃的“菜”。\n\n---\n\n<!--more-->\n\n---\n\n## 料理的二三事\n\n### 选材说明\n\n首先，做一份料理，一定要准备好采购清单。如果只有菜谱没有选材说明，最终做出来的味道可能并没有那么好。哪怕随便做一道家常菜，需要放大葱还是香葱也是有讲究的，而不同年份的葡萄酿制的酒就更不用说了。\n\n> 正确的选材示例：山治的料理笔记。\n>\n> 错误的选材实例：路飞不看笔记误吃有毒鱼皮。\n\n### 料理的主要流程\n现在，咱们来聊聊吃货该聊的事情：想要做一道菜需要做些什么？\n\n### 料理三要素\n\n来看一下料理三要素：\n\n1. 做饭的场地\n2. 完美的食材\n3. 优秀的厨师\n\n当然，虽然在家里一个人就可以做了，但是不要小看料理呀！咱们要聊就聊 big restaurant。比如一家让你难忘的餐厅：海上餐厅“BARATI”。你想要的东西——上面提到的三要素，餐厅后厨全都有。Ok！下面就可以准备料理了。\n\n### 料理步骤\n\n料理的步骤很简单，包括准备步骤和开始步骤。\n\n### 料理准备\n\n让我们来安排一场完美的料理。BARATI 料理的准备步骤：\n\n1. 选择储存食材的冰箱\n2. 选择料理的主食材\n3. 根据点菜单确定料理菜系\n4. 准备料理需要的菜谱\n5. 指定处理食材的厨师\n6. 指定做料理的主厨\n\n### 料理开始\n\n“高端的食材只需要简单的烹饪”。重头戏开始了！BARATI 料理的工作流程：\n\n1. 允许外卖\n2. 厨师待命\n3. 加载点菜单的要求（如：不要香菜）\n4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了\n5. 忽略没必要了解的信息（如：食材的价格）\n6. 指定菜品装饰\n7. 根据菜系，获取对应菜谱\n8. 设置突发情况报告人（如：点的菜没有了）\n9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求\n10. 处理食材\n11. 料理完成后，根据点菜单的要求定制\n12. 是否查看客人反馈\n13. 食材准备就绪\n14. 通知所有可以干活的厨师\n15. 准备开工\n\n突发报告人处理突发情况（点的菜没有了，需要告诉服务员）\n\n就这样，一顿完美的料理就做好了。\n\n## 欢迎来到“BARATI”\n\n### 选材说明\n\n学技术也是一样，版本说明就是料理的选材说明。遵循“就地取材”原则，本次选用的“主料”是平时项目上使用的 `SpringBoot 2.1.5.RELEASE` 版本。依赖如下：\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <version>2.1.5.RELEASE</version>\n</dependency>\n```\n\n### “BARATI”后厨主要流程\n\n> 以 SpringApplication.run() 方法为例\n\n#### 料理三要素\n\n```java\n@SpringBootApplication\npublic class StartApplication {\n\n  public static void main(String[] args) {\n    // 1. 做饭的场地\n    // 2. 完美的食材\n    // 3. 优秀的厨师\n    SpringApplication.run(StartApplication.class, args);\n  }\n}\n```\n\n1. 做饭的场地：SpringApplication\n2. 完美的食材：所有通过 SpringBoot 自动配置扫描，由 ClassLoader 加载的 Class\n3. 优秀的厨师：在启动过程中所有 ApplicationListener 和 ApplicationRunner\n\n#### 料理步骤\n\n```java\npublic static ConfigurableApplicationContext run(Class<?>[] primarySources,\n\t\t\tString[] args) {\n  // 1. 料理准备\n  // 2. 料理开始\n  return new SpringApplication(primarySources).run(args);\n}\n```\n\n1. 料理准备\n\n   new SpringApplication(primarySources) 方法，SpringApplication 的初始化\n\n   ```java\n   public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {\n     // 1. 选择储存食材的冰箱 >> 可指定的类加载器，与 classpath 相关，默认为null，加载时使用 DefaultResourceLoader\n     this.resourceLoader = resourceLoader;\n     // 2. 选择料理的主食材 >> 设置传入的主源类\n     Assert.notNull(primarySources, \"PrimarySources must not be null\");\n     this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));\n     // 3. 根据点菜单确定料理菜系 >> 通过加载的 class 判断web应用类型（NONE、SERVLET、REACTIVE）\n     this.webApplicationType = WebApplicationType.deduceFromClasspath();\n     // 4. 准备料理需要的菜谱 >> 通过 getClassLoader()，查找并加载所有 ApplicationContextInitializer\n     setInitializers((Collection) getSpringFactoriesInstances(\n       ApplicationContextInitializer.class));\n     // 5. 指定处理食材的厨师 >> 通过 getClassLoader()，查找并加载所有 ApplicationListener\n     setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n     // 6. 指定做料理的主厨 >> 推断并设置 main 函数所在的 class\n     this.mainApplicationClass = deduceMainApplicationClass();\n   }\n   ```\n\n2. 料理开始\n\n   SpringApplication.run(args) 方法，SpringBoot 实际启动的流程\n\n   ```java\n   public ConfigurableApplicationContext run(String... args) {\n     StopWatch stopWatch = new StopWatch();\n     stopWatch.start();\n     ConfigurableApplicationContext context = null;\n     Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n     // 1. 允许外卖 >> 主要允许服务器只提供服务，不提供显示器和界面展示的情况，类似只支持外带，不支持店内就餐\n     configureHeadlessProperty();\n     // 2. 厨师待命 >> 获取所有监听者，进入监听状态\n     SpringApplicationRunListeners listeners = getRunListeners(args);\n     listeners.starting();\n     try {\n       // 3. 加载点菜单的要求（如：不要香菜） >> 读取传入 args 参数\n       ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n         args);\n       // 4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了 >> 设置环境变量，通知监听者\n       ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                                                                applicationArguments);\n       // 5. 忽略没必要了解的信息（如：食材的价格） >> 忽略 BeanInfo 信息，主要为了提高启动速度\n       configureIgnoreBeanInfo(environment);\n       // 6. 设置菜品装饰 >> 设置 Banner\n       Banner printedBanner = printBanner(environment);\n       // 7. 根据菜系，获取对应菜谱 >> 根据应用类型（是 Servlet，还是 Reactive），创建对应上下文\n       context = createApplicationContext();\n       // 8. 设置突发情况报告人（如：点的菜没有了） >> 加载 SpringBoot 异常上报类\n       exceptionReporters = getSpringFactoriesInstances(\n         SpringBootExceptionReporter.class,\n         new Class[] { ConfigurableApplicationContext.class }, context);\n       // 9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求 >> 根据环境变量、监听者、启动参数和 Banner，装载上下文\n       prepareContext(context, environment, listeners, applicationArguments,\n                      printedBanner);\n       // 10. 处理食材 >> 刷新上下文\n       refreshContext(context);\n       // 11. 料理完成后，根据点菜单的要求定制 >> 空操作，刷新上下文后的预留扩展点\n       afterRefresh(context, applicationArguments);\n       stopWatch.stop();\n       // 12. 是否查看客人反馈 >> 设置日志信息打印\n       if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n           .logStarted(getApplicationLog(), stopWatch);\n       }\n       // 13. 食材准备就绪 >> 发布 ApplicationStartedEvent 事件，表示监听者任务完成\n       listeners.started(context);\n       // 14. 通知所有可以干活的厨师 >> 调用 ApplicationRunner，CommandLineRunner 的 run 方法\n       callRunners(context, applicationArguments);\n     }\n     catch (Throwable ex) {\n       // * 处理突发情况 >> 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常\n       handleRunFailure(context, ex, exceptionReporters, listeners);\n       throw new IllegalStateException(ex);\n     }\n   \n     try {\n       // 15. 准备开工 >> 发布 ApplicationReadyEvent 事件，表示应用就绪\n       listeners.running(context);\n     }\n     catch (Throwable ex) {\n       // * 处理突发情况 >> 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常\n       handleRunFailure(context, ex, exceptionReporters, null);\n       throw new IllegalStateException(ex);\n     }\n     return context;\n   }\n   ```\n\n## 小结\n\n本篇文章想达到的目的是：**将源码映射到现实生活的事件，加深对源码的解读，希望将晦涩难度的源码变成一件有趣的事情**。此文只是作为一个吃货的兴趣篇，并不是特别严谨，在 SpringBoot 启动过程中，还有很多精妙的细节需要继续推敲，我会在后续文章中，对它们进行剖析。当然，由于自身水平限制，有些比喻可能并不一定十分恰当，希望各位老板见仁见智地去理解。若发现不当之处，欢迎私信沟通交流！\n\n","source":"_posts/SpringBoot好“吃”的启动原理.md","raw":"---\ntitle: SpringBoot 好“吃”的启动原理\ndate: 2020-12-30\nupdated: 2020-12-30\ncategories:\n- SpringBoot\ntags:\n- SpringBoot\n---\n\n## 不正经的前言\n\n最近好朋友山治去面试了，晚上回来有些低迷地问我：“小西，你知道 SpringBoot 的启动流程吗？”\n\n我说：“知道呀！从 SpringApplication.run() 方法开始，首先进行实例化，实例化里主要做了4件事：根据 calsspath……”\n\n山治抬腿就是一记“恶魔风脚”：SpringBoot 的启动步骤那么多，什么 1、2、3、4，谁能记得住啊！\n\n在被乔巴施展”还我漂漂拳“以后，我痛定思痛，暗暗发誓一定要写篇比美女还好看的文章教会山治，让他吃透这道看似难啃的“菜”。\n\n---\n\n<!--more-->\n\n---\n\n## 料理的二三事\n\n### 选材说明\n\n首先，做一份料理，一定要准备好采购清单。如果只有菜谱没有选材说明，最终做出来的味道可能并没有那么好。哪怕随便做一道家常菜，需要放大葱还是香葱也是有讲究的，而不同年份的葡萄酿制的酒就更不用说了。\n\n> 正确的选材示例：山治的料理笔记。\n>\n> 错误的选材实例：路飞不看笔记误吃有毒鱼皮。\n\n### 料理的主要流程\n现在，咱们来聊聊吃货该聊的事情：想要做一道菜需要做些什么？\n\n### 料理三要素\n\n来看一下料理三要素：\n\n1. 做饭的场地\n2. 完美的食材\n3. 优秀的厨师\n\n当然，虽然在家里一个人就可以做了，但是不要小看料理呀！咱们要聊就聊 big restaurant。比如一家让你难忘的餐厅：海上餐厅“BARATI”。你想要的东西——上面提到的三要素，餐厅后厨全都有。Ok！下面就可以准备料理了。\n\n### 料理步骤\n\n料理的步骤很简单，包括准备步骤和开始步骤。\n\n### 料理准备\n\n让我们来安排一场完美的料理。BARATI 料理的准备步骤：\n\n1. 选择储存食材的冰箱\n2. 选择料理的主食材\n3. 根据点菜单确定料理菜系\n4. 准备料理需要的菜谱\n5. 指定处理食材的厨师\n6. 指定做料理的主厨\n\n### 料理开始\n\n“高端的食材只需要简单的烹饪”。重头戏开始了！BARATI 料理的工作流程：\n\n1. 允许外卖\n2. 厨师待命\n3. 加载点菜单的要求（如：不要香菜）\n4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了\n5. 忽略没必要了解的信息（如：食材的价格）\n6. 指定菜品装饰\n7. 根据菜系，获取对应菜谱\n8. 设置突发情况报告人（如：点的菜没有了）\n9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求\n10. 处理食材\n11. 料理完成后，根据点菜单的要求定制\n12. 是否查看客人反馈\n13. 食材准备就绪\n14. 通知所有可以干活的厨师\n15. 准备开工\n\n突发报告人处理突发情况（点的菜没有了，需要告诉服务员）\n\n就这样，一顿完美的料理就做好了。\n\n## 欢迎来到“BARATI”\n\n### 选材说明\n\n学技术也是一样，版本说明就是料理的选材说明。遵循“就地取材”原则，本次选用的“主料”是平时项目上使用的 `SpringBoot 2.1.5.RELEASE` 版本。依赖如下：\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <version>2.1.5.RELEASE</version>\n</dependency>\n```\n\n### “BARATI”后厨主要流程\n\n> 以 SpringApplication.run() 方法为例\n\n#### 料理三要素\n\n```java\n@SpringBootApplication\npublic class StartApplication {\n\n  public static void main(String[] args) {\n    // 1. 做饭的场地\n    // 2. 完美的食材\n    // 3. 优秀的厨师\n    SpringApplication.run(StartApplication.class, args);\n  }\n}\n```\n\n1. 做饭的场地：SpringApplication\n2. 完美的食材：所有通过 SpringBoot 自动配置扫描，由 ClassLoader 加载的 Class\n3. 优秀的厨师：在启动过程中所有 ApplicationListener 和 ApplicationRunner\n\n#### 料理步骤\n\n```java\npublic static ConfigurableApplicationContext run(Class<?>[] primarySources,\n\t\t\tString[] args) {\n  // 1. 料理准备\n  // 2. 料理开始\n  return new SpringApplication(primarySources).run(args);\n}\n```\n\n1. 料理准备\n\n   new SpringApplication(primarySources) 方法，SpringApplication 的初始化\n\n   ```java\n   public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {\n     // 1. 选择储存食材的冰箱 >> 可指定的类加载器，与 classpath 相关，默认为null，加载时使用 DefaultResourceLoader\n     this.resourceLoader = resourceLoader;\n     // 2. 选择料理的主食材 >> 设置传入的主源类\n     Assert.notNull(primarySources, \"PrimarySources must not be null\");\n     this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));\n     // 3. 根据点菜单确定料理菜系 >> 通过加载的 class 判断web应用类型（NONE、SERVLET、REACTIVE）\n     this.webApplicationType = WebApplicationType.deduceFromClasspath();\n     // 4. 准备料理需要的菜谱 >> 通过 getClassLoader()，查找并加载所有 ApplicationContextInitializer\n     setInitializers((Collection) getSpringFactoriesInstances(\n       ApplicationContextInitializer.class));\n     // 5. 指定处理食材的厨师 >> 通过 getClassLoader()，查找并加载所有 ApplicationListener\n     setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n     // 6. 指定做料理的主厨 >> 推断并设置 main 函数所在的 class\n     this.mainApplicationClass = deduceMainApplicationClass();\n   }\n   ```\n\n2. 料理开始\n\n   SpringApplication.run(args) 方法，SpringBoot 实际启动的流程\n\n   ```java\n   public ConfigurableApplicationContext run(String... args) {\n     StopWatch stopWatch = new StopWatch();\n     stopWatch.start();\n     ConfigurableApplicationContext context = null;\n     Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n     // 1. 允许外卖 >> 主要允许服务器只提供服务，不提供显示器和界面展示的情况，类似只支持外带，不支持店内就餐\n     configureHeadlessProperty();\n     // 2. 厨师待命 >> 获取所有监听者，进入监听状态\n     SpringApplicationRunListeners listeners = getRunListeners(args);\n     listeners.starting();\n     try {\n       // 3. 加载点菜单的要求（如：不要香菜） >> 读取传入 args 参数\n       ApplicationArguments applicationArguments = new DefaultApplicationArguments(\n         args);\n       // 4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了 >> 设置环境变量，通知监听者\n       ConfigurableEnvironment environment = prepareEnvironment(listeners,\n                                                                applicationArguments);\n       // 5. 忽略没必要了解的信息（如：食材的价格） >> 忽略 BeanInfo 信息，主要为了提高启动速度\n       configureIgnoreBeanInfo(environment);\n       // 6. 设置菜品装饰 >> 设置 Banner\n       Banner printedBanner = printBanner(environment);\n       // 7. 根据菜系，获取对应菜谱 >> 根据应用类型（是 Servlet，还是 Reactive），创建对应上下文\n       context = createApplicationContext();\n       // 8. 设置突发情况报告人（如：点的菜没有了） >> 加载 SpringBoot 异常上报类\n       exceptionReporters = getSpringFactoriesInstances(\n         SpringBootExceptionReporter.class,\n         new Class[] { ConfigurableApplicationContext.class }, context);\n       // 9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求 >> 根据环境变量、监听者、启动参数和 Banner，装载上下文\n       prepareContext(context, environment, listeners, applicationArguments,\n                      printedBanner);\n       // 10. 处理食材 >> 刷新上下文\n       refreshContext(context);\n       // 11. 料理完成后，根据点菜单的要求定制 >> 空操作，刷新上下文后的预留扩展点\n       afterRefresh(context, applicationArguments);\n       stopWatch.stop();\n       // 12. 是否查看客人反馈 >> 设置日志信息打印\n       if (this.logStartupInfo) {\n         new StartupInfoLogger(this.mainApplicationClass)\n           .logStarted(getApplicationLog(), stopWatch);\n       }\n       // 13. 食材准备就绪 >> 发布 ApplicationStartedEvent 事件，表示监听者任务完成\n       listeners.started(context);\n       // 14. 通知所有可以干活的厨师 >> 调用 ApplicationRunner，CommandLineRunner 的 run 方法\n       callRunners(context, applicationArguments);\n     }\n     catch (Throwable ex) {\n       // * 处理突发情况 >> 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常\n       handleRunFailure(context, ex, exceptionReporters, listeners);\n       throw new IllegalStateException(ex);\n     }\n   \n     try {\n       // 15. 准备开工 >> 发布 ApplicationReadyEvent 事件，表示应用就绪\n       listeners.running(context);\n     }\n     catch (Throwable ex) {\n       // * 处理突发情况 >> 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常\n       handleRunFailure(context, ex, exceptionReporters, null);\n       throw new IllegalStateException(ex);\n     }\n     return context;\n   }\n   ```\n\n## 小结\n\n本篇文章想达到的目的是：**将源码映射到现实生活的事件，加深对源码的解读，希望将晦涩难度的源码变成一件有趣的事情**。此文只是作为一个吃货的兴趣篇，并不是特别严谨，在 SpringBoot 启动过程中，还有很多精妙的细节需要继续推敲，我会在后续文章中，对它们进行剖析。当然，由于自身水平限制，有些比喻可能并不一定十分恰当，希望各位老板见仁见智地去理解。若发现不当之处，欢迎私信沟通交流！\n\n","slug":"SpringBoot好“吃”的启动原理","published":1,"_id":"ckluv5n2t0000286a6qyx88f6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"不正经的前言\"><a href=\"#不正经的前言\" class=\"headerlink\" title=\"不正经的前言\"></a>不正经的前言</h2><p>最近好朋友山治去面试了，晚上回来有些低迷地问我：“小西，你知道 SpringBoot 的启动流程吗？”</p>\n<p>我说：“知道呀！从 SpringApplication.run() 方法开始，首先进行实例化，实例化里主要做了4件事：根据 calsspath……”</p>\n<p>山治抬腿就是一记“恶魔风脚”：SpringBoot 的启动步骤那么多，什么 1、2、3、4，谁能记得住啊！</p>\n<p>在被乔巴施展”还我漂漂拳“以后，我痛定思痛，暗暗发誓一定要写篇比美女还好看的文章教会山治，让他吃透这道看似难啃的“菜”。</p>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"料理的二三事\"><a href=\"#料理的二三事\" class=\"headerlink\" title=\"料理的二三事\"></a>料理的二三事</h2><h3 id=\"选材说明\"><a href=\"#选材说明\" class=\"headerlink\" title=\"选材说明\"></a>选材说明</h3><p>首先，做一份料理，一定要准备好采购清单。如果只有菜谱没有选材说明，最终做出来的味道可能并没有那么好。哪怕随便做一道家常菜，需要放大葱还是香葱也是有讲究的，而不同年份的葡萄酿制的酒就更不用说了。</p>\n<blockquote>\n<p>正确的选材示例：山治的料理笔记。</p>\n<p>错误的选材实例：路飞不看笔记误吃有毒鱼皮。</p>\n</blockquote>\n<h3 id=\"料理的主要流程\"><a href=\"#料理的主要流程\" class=\"headerlink\" title=\"料理的主要流程\"></a>料理的主要流程</h3><p>现在，咱们来聊聊吃货该聊的事情：想要做一道菜需要做些什么？</p>\n<h3 id=\"料理三要素\"><a href=\"#料理三要素\" class=\"headerlink\" title=\"料理三要素\"></a>料理三要素</h3><p>来看一下料理三要素：</p>\n<ol>\n<li>做饭的场地</li>\n<li>完美的食材</li>\n<li>优秀的厨师</li>\n</ol>\n<p>当然，虽然在家里一个人就可以做了，但是不要小看料理呀！咱们要聊就聊 big restaurant。比如一家让你难忘的餐厅：海上餐厅“BARATI”。你想要的东西——上面提到的三要素，餐厅后厨全都有。Ok！下面就可以准备料理了。</p>\n<h3 id=\"料理步骤\"><a href=\"#料理步骤\" class=\"headerlink\" title=\"料理步骤\"></a>料理步骤</h3><p>料理的步骤很简单，包括准备步骤和开始步骤。</p>\n<h3 id=\"料理准备\"><a href=\"#料理准备\" class=\"headerlink\" title=\"料理准备\"></a>料理准备</h3><p>让我们来安排一场完美的料理。BARATI 料理的准备步骤：</p>\n<ol>\n<li>选择储存食材的冰箱</li>\n<li>选择料理的主食材</li>\n<li>根据点菜单确定料理菜系</li>\n<li>准备料理需要的菜谱</li>\n<li>指定处理食材的厨师</li>\n<li>指定做料理的主厨</li>\n</ol>\n<h3 id=\"料理开始\"><a href=\"#料理开始\" class=\"headerlink\" title=\"料理开始\"></a>料理开始</h3><p>“高端的食材只需要简单的烹饪”。重头戏开始了！BARATI 料理的工作流程：</p>\n<ol>\n<li>允许外卖</li>\n<li>厨师待命</li>\n<li>加载点菜单的要求（如：不要香菜）</li>\n<li>准备料理所需的锅碗瓢盆，并通知厨师准备好了</li>\n<li>忽略没必要了解的信息（如：食材的价格）</li>\n<li>指定菜品装饰</li>\n<li>根据菜系，获取对应菜谱</li>\n<li>设置突发情况报告人（如：点的菜没有了）</li>\n<li>厨师查看锅碗瓢盆、菜谱和点菜单的要求</li>\n<li>处理食材</li>\n<li>料理完成后，根据点菜单的要求定制</li>\n<li>是否查看客人反馈</li>\n<li>食材准备就绪</li>\n<li>通知所有可以干活的厨师</li>\n<li>准备开工</li>\n</ol>\n<p>突发报告人处理突发情况（点的菜没有了，需要告诉服务员）</p>\n<p>就这样，一顿完美的料理就做好了。</p>\n<h2 id=\"欢迎来到“BARATI”\"><a href=\"#欢迎来到“BARATI”\" class=\"headerlink\" title=\"欢迎来到“BARATI”\"></a>欢迎来到“BARATI”</h2><h3 id=\"选材说明-1\"><a href=\"#选材说明-1\" class=\"headerlink\" title=\"选材说明\"></a>选材说明</h3><p>学技术也是一样，版本说明就是料理的选材说明。遵循“就地取材”原则，本次选用的“主料”是平时项目上使用的 <code>SpringBoot 2.1.5.RELEASE</code> 版本。依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"“BARATI”后厨主要流程\"><a href=\"#“BARATI”后厨主要流程\" class=\"headerlink\" title=\"“BARATI”后厨主要流程\"></a>“BARATI”后厨主要流程</h3><blockquote>\n<p>以 SpringApplication.run() 方法为例</p>\n</blockquote>\n<h4 id=\"料理三要素-1\"><a href=\"#料理三要素-1\" class=\"headerlink\" title=\"料理三要素\"></a>料理三要素</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StartApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 做饭的场地</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 完美的食材</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 优秀的厨师</span></span><br><span class=\"line\">    SpringApplication.run(StartApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>做饭的场地：SpringApplication</li>\n<li>完美的食材：所有通过 SpringBoot 自动配置扫描，由 ClassLoader 加载的 Class</li>\n<li>优秀的厨师：在启动过程中所有 ApplicationListener 和 ApplicationRunner</li>\n</ol>\n<h4 id=\"料理步骤-1\"><a href=\"#料理步骤-1\" class=\"headerlink\" title=\"料理步骤\"></a>料理步骤</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tString[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 料理准备</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 料理开始</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplication(primarySources).run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>料理准备</p>\n<p>new SpringApplication(primarySources) 方法，SpringApplication 的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringApplication</span><span class=\"params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 选择储存食材的冰箱 &gt;&gt; 可指定的类加载器，与 classpath 相关，默认为null，加载时使用 DefaultResourceLoader</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">  <span class=\"comment\">// 2. 选择料理的主食材 &gt;&gt; 设置传入的主源类</span></span><br><span class=\"line\">  Assert.notNull(primarySources, <span class=\"string\">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.primarySources = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">  <span class=\"comment\">// 3. 根据点菜单确定料理菜系 &gt;&gt; 通过加载的 class 判断web应用类型（NONE、SERVLET、REACTIVE）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">  <span class=\"comment\">// 4. 准备料理需要的菜谱 &gt;&gt; 通过 getClassLoader()，查找并加载所有 ApplicationContextInitializer</span></span><br><span class=\"line\">  setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">    ApplicationContextInitializer.class));</span><br><span class=\"line\">  <span class=\"comment\">// 5. 指定处理食材的厨师 &gt;&gt; 通过 getClassLoader()，查找并加载所有 ApplicationListener</span></span><br><span class=\"line\">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">  <span class=\"comment\">// 6. 指定做料理的主厨 &gt;&gt; 推断并设置 main 函数所在的 class</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>料理开始</p>\n<p>SpringApplication.run(args) 方法，SpringBoot 实际启动的流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">  StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">  stopWatch.start();</span><br><span class=\"line\">  ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 1. 允许外卖 &gt;&gt; 主要允许服务器只提供服务，不提供显示器和界面展示的情况，类似只支持外带，不支持店内就餐</span></span><br><span class=\"line\">  configureHeadlessProperty();</span><br><span class=\"line\">  <span class=\"comment\">// 2. 厨师待命 &gt;&gt; 获取所有监听者，进入监听状态</span></span><br><span class=\"line\">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">  listeners.starting();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 加载点菜单的要求（如：不要香菜） &gt;&gt; 读取传入 args 参数</span></span><br><span class=\"line\">    ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">      args);</span><br><span class=\"line\">    <span class=\"comment\">// 4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了 &gt;&gt; 设置环境变量，通知监听者</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                                                             applicationArguments);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 忽略没必要了解的信息（如：食材的价格） &gt;&gt; 忽略 BeanInfo 信息，主要为了提高启动速度</span></span><br><span class=\"line\">    configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 6. 设置菜品装饰 &gt;&gt; 设置 Banner</span></span><br><span class=\"line\">    Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 7. 根据菜系，获取对应菜谱 &gt;&gt; 根据应用类型（是 Servlet，还是 Reactive），创建对应上下文</span></span><br><span class=\"line\">    context = createApplicationContext();</span><br><span class=\"line\">    <span class=\"comment\">// 8. 设置突发情况报告人（如：点的菜没有了） &gt;&gt; 加载 SpringBoot 异常上报类</span></span><br><span class=\"line\">    exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">      SpringBootExceptionReporter.class,</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">    <span class=\"comment\">// 9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求 &gt;&gt; 根据环境变量、监听者、启动参数和 Banner，装载上下文</span></span><br><span class=\"line\">    prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                   printedBanner);</span><br><span class=\"line\">    <span class=\"comment\">// 10. 处理食材 &gt;&gt; 刷新上下文</span></span><br><span class=\"line\">    refreshContext(context);</span><br><span class=\"line\">    <span class=\"comment\">// 11. 料理完成后，根据点菜单的要求定制 &gt;&gt; 空操作，刷新上下文后的预留扩展点</span></span><br><span class=\"line\">    afterRefresh(context, applicationArguments);</span><br><span class=\"line\">    stopWatch.stop();</span><br><span class=\"line\">    <span class=\"comment\">// 12. 是否查看客人反馈 &gt;&gt; 设置日志信息打印</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">        .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 13. 食材准备就绪 &gt;&gt; 发布 ApplicationStartedEvent 事件，表示监听者任务完成</span></span><br><span class=\"line\">    listeners.started(context);</span><br><span class=\"line\">    <span class=\"comment\">// 14. 通知所有可以干活的厨师 &gt;&gt; 调用 ApplicationRunner，CommandLineRunner 的 run 方法</span></span><br><span class=\"line\">    callRunners(context, applicationArguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// * 处理突发情况 &gt;&gt; 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常</span></span><br><span class=\"line\">    handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 15. 准备开工 &gt;&gt; 发布 ApplicationReadyEvent 事件，表示应用就绪</span></span><br><span class=\"line\">    listeners.running(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// * 处理突发情况 &gt;&gt; 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常</span></span><br><span class=\"line\">    handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇文章想达到的目的是：<strong>将源码映射到现实生活的事件，加深对源码的解读，希望将晦涩难度的源码变成一件有趣的事情</strong>。此文只是作为一个吃货的兴趣篇，并不是特别严谨，在 SpringBoot 启动过程中，还有很多精妙的细节需要继续推敲，我会在后续文章中，对它们进行剖析。当然，由于自身水平限制，有些比喻可能并不一定十分恰当，希望各位老板见仁见智地去理解。若发现不当之处，欢迎私信沟通交流！</p>\n","site":{"data":{}},"length":5383,"excerpt":"<h2 id=\"不正经的前言\"><a href=\"#不正经的前言\" class=\"headerlink\" title=\"不正经的前言\"></a>不正经的前言</h2><p>最近好朋友山治去面试了，晚上回来有些低迷地问我：“小西，你知道 SpringBoot 的启动流程吗？”</p>\n<p>我说：“知道呀！从 SpringApplication.run() 方法开始，首先进行实例化，实例化里主要做了4件事：根据 calsspath……”</p>\n<p>山治抬腿就是一记“恶魔风脚”：SpringBoot 的启动步骤那么多，什么 1、2、3、4，谁能记得住啊！</p>\n<p>在被乔巴施展”还我漂漂拳“以后，我痛定思痛，暗暗发誓一定要写篇比美女还好看的文章教会山治，让他吃透这道看似难啃的“菜”。</p>\n<hr>","more":"<hr>\n<h2 id=\"料理的二三事\"><a href=\"#料理的二三事\" class=\"headerlink\" title=\"料理的二三事\"></a>料理的二三事</h2><h3 id=\"选材说明\"><a href=\"#选材说明\" class=\"headerlink\" title=\"选材说明\"></a>选材说明</h3><p>首先，做一份料理，一定要准备好采购清单。如果只有菜谱没有选材说明，最终做出来的味道可能并没有那么好。哪怕随便做一道家常菜，需要放大葱还是香葱也是有讲究的，而不同年份的葡萄酿制的酒就更不用说了。</p>\n<blockquote>\n<p>正确的选材示例：山治的料理笔记。</p>\n<p>错误的选材实例：路飞不看笔记误吃有毒鱼皮。</p>\n</blockquote>\n<h3 id=\"料理的主要流程\"><a href=\"#料理的主要流程\" class=\"headerlink\" title=\"料理的主要流程\"></a>料理的主要流程</h3><p>现在，咱们来聊聊吃货该聊的事情：想要做一道菜需要做些什么？</p>\n<h3 id=\"料理三要素\"><a href=\"#料理三要素\" class=\"headerlink\" title=\"料理三要素\"></a>料理三要素</h3><p>来看一下料理三要素：</p>\n<ol>\n<li>做饭的场地</li>\n<li>完美的食材</li>\n<li>优秀的厨师</li>\n</ol>\n<p>当然，虽然在家里一个人就可以做了，但是不要小看料理呀！咱们要聊就聊 big restaurant。比如一家让你难忘的餐厅：海上餐厅“BARATI”。你想要的东西——上面提到的三要素，餐厅后厨全都有。Ok！下面就可以准备料理了。</p>\n<h3 id=\"料理步骤\"><a href=\"#料理步骤\" class=\"headerlink\" title=\"料理步骤\"></a>料理步骤</h3><p>料理的步骤很简单，包括准备步骤和开始步骤。</p>\n<h3 id=\"料理准备\"><a href=\"#料理准备\" class=\"headerlink\" title=\"料理准备\"></a>料理准备</h3><p>让我们来安排一场完美的料理。BARATI 料理的准备步骤：</p>\n<ol>\n<li>选择储存食材的冰箱</li>\n<li>选择料理的主食材</li>\n<li>根据点菜单确定料理菜系</li>\n<li>准备料理需要的菜谱</li>\n<li>指定处理食材的厨师</li>\n<li>指定做料理的主厨</li>\n</ol>\n<h3 id=\"料理开始\"><a href=\"#料理开始\" class=\"headerlink\" title=\"料理开始\"></a>料理开始</h3><p>“高端的食材只需要简单的烹饪”。重头戏开始了！BARATI 料理的工作流程：</p>\n<ol>\n<li>允许外卖</li>\n<li>厨师待命</li>\n<li>加载点菜单的要求（如：不要香菜）</li>\n<li>准备料理所需的锅碗瓢盆，并通知厨师准备好了</li>\n<li>忽略没必要了解的信息（如：食材的价格）</li>\n<li>指定菜品装饰</li>\n<li>根据菜系，获取对应菜谱</li>\n<li>设置突发情况报告人（如：点的菜没有了）</li>\n<li>厨师查看锅碗瓢盆、菜谱和点菜单的要求</li>\n<li>处理食材</li>\n<li>料理完成后，根据点菜单的要求定制</li>\n<li>是否查看客人反馈</li>\n<li>食材准备就绪</li>\n<li>通知所有可以干活的厨师</li>\n<li>准备开工</li>\n</ol>\n<p>突发报告人处理突发情况（点的菜没有了，需要告诉服务员）</p>\n<p>就这样，一顿完美的料理就做好了。</p>\n<h2 id=\"欢迎来到“BARATI”\"><a href=\"#欢迎来到“BARATI”\" class=\"headerlink\" title=\"欢迎来到“BARATI”\"></a>欢迎来到“BARATI”</h2><h3 id=\"选材说明-1\"><a href=\"#选材说明-1\" class=\"headerlink\" title=\"选材说明\"></a>选材说明</h3><p>学技术也是一样，版本说明就是料理的选材说明。遵循“就地取材”原则，本次选用的“主料”是平时项目上使用的 <code>SpringBoot 2.1.5.RELEASE</code> 版本。依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"“BARATI”后厨主要流程\"><a href=\"#“BARATI”后厨主要流程\" class=\"headerlink\" title=\"“BARATI”后厨主要流程\"></a>“BARATI”后厨主要流程</h3><blockquote>\n<p>以 SpringApplication.run() 方法为例</p>\n</blockquote>\n<h4 id=\"料理三要素-1\"><a href=\"#料理三要素-1\" class=\"headerlink\" title=\"料理三要素\"></a>料理三要素</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StartApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 做饭的场地</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 完美的食材</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. 优秀的厨师</span></span><br><span class=\"line\">    SpringApplication.run(StartApplication.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>做饭的场地：SpringApplication</li>\n<li>完美的食材：所有通过 SpringBoot 自动配置扫描，由 ClassLoader 加载的 Class</li>\n<li>优秀的厨师：在启动过程中所有 ApplicationListener 和 ApplicationRunner</li>\n</ol>\n<h4 id=\"料理步骤-1\"><a href=\"#料理步骤-1\" class=\"headerlink\" title=\"料理步骤\"></a>料理步骤</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tString[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 料理准备</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 料理开始</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SpringApplication(primarySources).run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>料理准备</p>\n<p>new SpringApplication(primarySources) 方法，SpringApplication 的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpringApplication</span><span class=\"params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 选择储存食材的冰箱 &gt;&gt; 可指定的类加载器，与 classpath 相关，默认为null，加载时使用 DefaultResourceLoader</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">  <span class=\"comment\">// 2. 选择料理的主食材 &gt;&gt; 设置传入的主源类</span></span><br><span class=\"line\">  Assert.notNull(primarySources, <span class=\"string\">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.primarySources = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">  <span class=\"comment\">// 3. 根据点菜单确定料理菜系 &gt;&gt; 通过加载的 class 判断web应用类型（NONE、SERVLET、REACTIVE）</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">  <span class=\"comment\">// 4. 准备料理需要的菜谱 &gt;&gt; 通过 getClassLoader()，查找并加载所有 ApplicationContextInitializer</span></span><br><span class=\"line\">  setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">    ApplicationContextInitializer.class));</span><br><span class=\"line\">  <span class=\"comment\">// 5. 指定处理食材的厨师 &gt;&gt; 通过 getClassLoader()，查找并加载所有 ApplicationListener</span></span><br><span class=\"line\">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">  <span class=\"comment\">// 6. 指定做料理的主厨 &gt;&gt; 推断并设置 main 函数所在的 class</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>料理开始</p>\n<p>SpringApplication.run(args) 方法，SpringBoot 实际启动的流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">  StopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">  stopWatch.start();</span><br><span class=\"line\">  ConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 1. 允许外卖 &gt;&gt; 主要允许服务器只提供服务，不提供显示器和界面展示的情况，类似只支持外带，不支持店内就餐</span></span><br><span class=\"line\">  configureHeadlessProperty();</span><br><span class=\"line\">  <span class=\"comment\">// 2. 厨师待命 &gt;&gt; 获取所有监听者，进入监听状态</span></span><br><span class=\"line\">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class=\"line\">  listeners.starting();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 加载点菜单的要求（如：不要香菜） &gt;&gt; 读取传入 args 参数</span></span><br><span class=\"line\">    ApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(</span><br><span class=\"line\">      args);</span><br><span class=\"line\">    <span class=\"comment\">// 4. 准备料理所需的锅碗瓢盆，并通知厨师准备好了 &gt;&gt; 设置环境变量，通知监听者</span></span><br><span class=\"line\">    ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class=\"line\">                                                             applicationArguments);</span><br><span class=\"line\">    <span class=\"comment\">// 5. 忽略没必要了解的信息（如：食材的价格） &gt;&gt; 忽略 BeanInfo 信息，主要为了提高启动速度</span></span><br><span class=\"line\">    configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 6. 设置菜品装饰 &gt;&gt; 设置 Banner</span></span><br><span class=\"line\">    Banner printedBanner = printBanner(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 7. 根据菜系，获取对应菜谱 &gt;&gt; 根据应用类型（是 Servlet，还是 Reactive），创建对应上下文</span></span><br><span class=\"line\">    context = createApplicationContext();</span><br><span class=\"line\">    <span class=\"comment\">// 8. 设置突发情况报告人（如：点的菜没有了） &gt;&gt; 加载 SpringBoot 异常上报类</span></span><br><span class=\"line\">    exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">      SpringBootExceptionReporter.class,</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">    <span class=\"comment\">// 9. 厨师查看锅碗瓢盆、菜谱和点菜单的要求 &gt;&gt; 根据环境变量、监听者、启动参数和 Banner，装载上下文</span></span><br><span class=\"line\">    prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                   printedBanner);</span><br><span class=\"line\">    <span class=\"comment\">// 10. 处理食材 &gt;&gt; 刷新上下文</span></span><br><span class=\"line\">    refreshContext(context);</span><br><span class=\"line\">    <span class=\"comment\">// 11. 料理完成后，根据点菜单的要求定制 &gt;&gt; 空操作，刷新上下文后的预留扩展点</span></span><br><span class=\"line\">    afterRefresh(context, applicationArguments);</span><br><span class=\"line\">    stopWatch.stop();</span><br><span class=\"line\">    <span class=\"comment\">// 12. 是否查看客人反馈 &gt;&gt; 设置日志信息打印</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass)</span><br><span class=\"line\">        .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 13. 食材准备就绪 &gt;&gt; 发布 ApplicationStartedEvent 事件，表示监听者任务完成</span></span><br><span class=\"line\">    listeners.started(context);</span><br><span class=\"line\">    <span class=\"comment\">// 14. 通知所有可以干活的厨师 &gt;&gt; 调用 ApplicationRunner，CommandLineRunner 的 run 方法</span></span><br><span class=\"line\">    callRunners(context, applicationArguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// * 处理突发情况 &gt;&gt; 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常</span></span><br><span class=\"line\">    handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 15. 准备开工 &gt;&gt; 发布 ApplicationReadyEvent 事件，表示应用就绪</span></span><br><span class=\"line\">    listeners.running(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// * 处理突发情况 &gt;&gt; 如果启动异常，处理 exceptionReporters 中的异常信息，并抛出异常</span></span><br><span class=\"line\">    handleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇文章想达到的目的是：<strong>将源码映射到现实生活的事件，加深对源码的解读，希望将晦涩难度的源码变成一件有趣的事情</strong>。此文只是作为一个吃货的兴趣篇，并不是特别严谨，在 SpringBoot 启动过程中，还有很多精妙的细节需要继续推敲，我会在后续文章中，对它们进行剖析。当然，由于自身水平限制，有些比喻可能并不一定十分恰当，希望各位老板见仁见智地去理解。若发现不当之处，欢迎私信沟通交流！</p>"},{"title":"“我的一剂良药”之开源指北","date":"2020-01-20T16:00:00.000Z","updated":"2020-01-21T16:00:00.000Z","_content":"\n本文收录于 Gitee 官方“开源指北”项目的“开源故事”目录下，更多精彩故事可戳这里： [开源指北](https://gitee.com/gitee-community/opensource-guide/tree/master) 。\n\n**文章较长，适合闲来无事时“食用”（阅读）。** \n\n## 开篇\n\n开源指北是 Gitee 开源社区送给所有开源人的一份保姆级开源百科，它的出现让开源相关知识不再像“沧海遗珠”一样散落在瀚海苍茫，让初识开源者可以从容地面对开源之海的首次“起航”，让众多热衷开源的开源爱好者在这里畅谈其所想。\n\n不得不说，开源指北项目的发起是一个非常有趣的想法，其秉持着“开源问题由开源来解决”的思想，吸引了众多开源爱好者参与到这项开源运动中来，我也是其中一员。这是我参与的第一个开源项目，在拟定标题时再三思忖，结合自身的亲身感受，最终定了这个标题。至于为什么说对我而言是“一剂良药”，在下文中我会作出解释。\n\n相比“满满的正能量”，我更希望从平常视角坦诚相待，有喜悦，有悲伤，有勇往直前，有踟蹰迷茫。不管读到这篇文章的你正拥有着哪种情绪，都能从这些稀松平常的小事中有所得，然后继续努力前行，成为更好的自己。\n\n接下来，分享一段普普通通、简简单单的故事。\n\n---\n\n<!--more-->\n\n---\n\n## 源起\n\n**“青山若无素，偃蹇不相亲。要识庐山面，他年是故人。”** \n\n我叫西狩，有些朋友也会叫我老江，从事 Java 开发相关工作。\n\n2020年是动荡的一年。从我的大脑里进行热词分析，浮现出来了很多“动荡”的词汇。比如：“疫情”、“大选”、“制裁”、“猝死”、“内卷”等等。我们深知处在一个贩卖焦虑的时代，但有时还是会不自觉地被这些外界的焦虑所影响，对于处在人生各种分岔路口的人们而言，受到的影响可能会更大。随着时间越走越快，看到很多新鲜的事物如雨后春笋般破土而出，陌生而又新奇。就像是面对琳琅满目的商品一样，一不小心便挑花了眼。这时我们可能会迷茫，但我们深知，自己需要去做些什么来面对它们。\n\n我不确定每个人是否都有过这种迷茫的经历，但就我个人而言，迷茫期是经常的，也是正常的。生活是一座围城，选择了漂泊但又渴望稳定，选择了努力但又渴望闲适。“有的人想得多却做得少”，我不确定这句话是否符合自己，但我深知自己做得还远远不够。大家应该都听过这样一句话：“学习最好的时间是十年前，其次是现在”。所以，**不要害怕迷茫，只要敢于面对迷茫并踏出下一步，那就是有意义的。** \n\n我不确定命运是否会眷顾内心和自己拧巴的人，但能够参与一项有意义的开源活动，我觉得自己是幸运的。一切的源头是从日常阅读公众号文章开始讲起，几个月前 [张乘辉](https://github.com/objcoding) 老师的一篇推文《使用 Hexo + Gitee 快速搭建属于自己的博客》，文章内容很简单易懂，而后我开始考虑搭建自己的博客。在搭建过程中，我 Gitee 平台上无意间看到了开源指北的开源活动，怀着一颗好奇心的自己就这样与开源指北相遇了。说实话，虽然平时也会在 Github、Gitee 上转一转，但顶多都是走马观花似的了解，并没有参与到什么开源项目中。起初自己也是随便了解一下。在了解项目简介、阅读其中几篇文章后，感觉自己对一些内容有一定的认知和共鸣，而且内容还有很多缺失，于是便尝试提交了一次 PR。\n\n故事讲到这里，我可能还并不会深陷其中。在提交后的第二天，官方小伙伴 [tenngo](https://gitee.com/tenngoxars) 就合并了我的 PR。及时的正向反馈让我受到了很大的鼓舞，就像是可治百病的“一剂良药”，使我无处安放的心静了下来。于是便开始了我的第一次开源之旅。\n\n## 指天说地\n\n**“一点浩然气，千里快哉风。”** \n\n在开源指北之前，其实网络上有很多开源知识的相关文章，但太过零散，不成体系，对于想要参与开源的人并不友好。开源指北最大的意义就是对开源知识的整合，它涵盖了大部分常见的入门知识，可以帮助很多想要参与开源而不知如何入手的小伙伴，所以，我想有必要分享一下在开源指北参与过程中的感受与收获。\n\n在《降临》中，有句台词让我记忆深刻：“If you immerse yourself into a foreign language, you can actually rewire your brain”。正如前文提到的迷茫期，最近一年的时间里发生了很多事情，思绪万千但却发现脚步却慢了下来。当我下意识提起自己的脚步时，却感觉似乎前方全是岔路，就在这时，开源指北出现了。在参与过程中，无论是查阅资料，还是编写文章，又或是提交 PR，都能感受到开源带给自己的活力。仔细想想，当自己毕业时，不愿在一眼望到头的生活里度过一生，那么自己对未来的迷茫和担忧就可以很好地接收了，因为这就是自己想要的生活。人生在世，不如意事常八九，大多数人都并非是一帆风顺的。**与其每日杞人忧天，不如沉下心来倾听内心的想法，然后坚定地踏出接下来的每一步。** \n\n在开始分享开源过程中的感悟前，先谈及了心态，是因为自己深知心态对我的重要性。在自己心静下来后，做事情的效率会有明显的提高，并且在交流、沟通以及决策上都可以更加清醒。接下来，便带着这份心态聊到哪算哪喽！\n\n开源与我的本职专业有着密切的联系，虽然是第一次参与开源，但自己对开源并不算陌生。曾经怀着激动的心情参加的每次 Pivotal 技术峰会、各种技术的 Meetup 以及各位大佬的技术分享，在这一刻似乎派上了一定的用场。这也说明了**平日积累的重要性**，碎片化学习虽然并不能建立起心中的一套完整的框架体系，但对自己的影响是潜移默化的。我会对每个章节进行阅读，文章结构不顺就梳理结构，上下文衔接问题就修改上下文，明显出现内容缺失就通过查阅资料再加上自己的理解进行补充。后面又进行了反复的阅读，以及关注小伙伴们提交的 PR。我们会为项目中提及的“半开源”的概念展开探讨，会对开源知识互相交流以至于忘记时间，诸如 arch、CLA、中国第一个被 OSI 认可的协议等等。我们也会因为项目中的不足而争辩，而且可能最终谁也说服不了谁，大家的思想是平等的，没有对错，而最终的结论也是有趣而一致的。那么这个结论是什么呢？其实很简单，各自提交 PR 就好了。**求同存异是开源社区的不二法则，我不认可你的观点，但我尊重你表达思想的权利。** \n\n因工作需要，我在 2017 年加入了 Kettle 技术交流群，经过学习掌握了它，但由于后续没有机会再使用，我对 Kettle 的熟练程度大幅度下降，更不要说现在最新的开源版本。同样的原因，我在 2019 年初加入了 Skywalking 交流群，基本属于一个“潜水者”，只是经常会查看技术交流的消息。其他社群我就不一一列举了，我之所以提到这两段经历，是想反思一下自己：为什么曾经有那么多优秀的开源项目摆在自己面前，到现在自己还是一个开源小白？我感觉有两个重要的事情自己没有做得很好：**坚持和思维模式**。\n\n- 参与开源不是一蹴而就的事情，我们需要花费大量的时间来将其打造成为一个更好的东西。我因为不再使用而放弃对 Kettle 的关注，所以它自然而然就离我远去了。**其实大多数人都并非天才，能成为一个项目中优秀开源者的主要原因就是坚持。** \n- 我学习 Kettle 只想使用它来解决问题，但从未想过自己还可以改变它。如果保持这样的思维模式继续下去，那么坚持的意义就是十分有限的了，因为我只是一个熟练工，可能永远都无法突破成为建筑师。**一个目标是否能够可达，有时候需要的只是一个思维的转变。** \n\n最近看了吴晟老师在开放原子基金会 2020 年技术峰会上发表的演讲——[开源运营治理分论坛 - Educate Community Over Support Community](https://www.bilibili.com/video/BV125411E7GK?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1611211180&unique_k=ZKplUv)。演讲中很清晰地为大家讲解了我们在开源中应该关注的重点，解释了社区各种角色的职责，也谈及了对社区发展和社区生态的看法。当然，其中让人受益匪浅的内容还有很多，而且没有太多难理解的技术，更多的是对开源经验的分享，感兴趣的小伙伴可以了解一下。这也是我的一个小建议：**多去与他人交谈，倾听他人的想法，我们需要在思想碰撞的过程中不断刺激自己进行思维升级。** \n\n再分享一则个人觉得有趣的事情，每个开源项目都有自己的排版规则，在参与开源指北过程中，我在一个关于排版的开源项目中发现了一个有趣的协议：WTFPL。参考知乎问答“[什么是 WTFPL（Do What the Fuck You Want to Public License），为什么会有人使用这一授权许可？](https://www.zhihu.com/question/20865060/answer/51757033)”中的描述来了解一下：\n\n> 由于程序拥有所有权，所以每段代码允许大家在何种程度上自然使用就成为了一个严肃的法律问题，所以就诞生了licence这个概念。其中有一些代码是写出来让大家随意免费使用的，所以licence就要规定你可以干一切事情。可是在法律里，“允许你干任何事情”这句话并不严谨，所以随着不断的诉讼、打官司、法学家的诠释，诞生了诸如 [@IAMSK](http://www.zhihu.com/people/c55d6c118b9141f20776588b0308e586) 所说的一大堆授权协议。\n> 但是问题来了。\n> 这个协议是给程序员看的，却是由法学家和律师写的。\n> 于是随着时间的推移，这些协议变得unreadable，也就是程序员根本不可能看懂。\n>\n> 而这些协议还会越来越长，随着欧美法律不断地被新的判例充实。。。。\n>\n> 于是一些程序员为了反抗这一恶性循环，发明了WTFPL。\n>\n> 简而言之，就是：**“你TM爱干啥干啥”**\n\n有趣的点在于，我仿佛能脑补出当时程序员看到冗长的法律条文和专业名词的时候抓狂的面部表情，是个很有意思的小故事。\n\n最后要说一下，个人认为，开源指北项目参与门槛并不高，虽然在内容上会尽力做到精益求精，但它的受众是每一个开源人，大家都可以在这里各抒己见。这个项目的维护也会一直开放，也希望能够在以后听到更多开源故事和开源声音。**毕竟开源这件事儿，一起热闹起来才好玩嘛！** \n\n## 北窗之友\n\n**“今日北窗下，自问何所为，欣然得三友，三友者为谁？琴罢辄举酒，酒罢辄吟诗。”** \n\n如果说有人问：“一次开源经历中，最重要的是什么事情？是最后的结果么？”我想可能不是。当我们去做任何一件事情的时候，都无法预料到下一秒会发生什么，更不会预料到最后的结果会是什么样子，所以结论并不适合放在开源经历的第一位。正所谓兴趣是最好的老师，与其猜测未知的结果，不如遵从本心去体会在开源中遇到的所有感受。因此，**一次成功的硕果固然可喜，但更重要的是享受过程。** \n\n我们可以对于开源项目的任何事情畅所欲言，可以发表自己对开源项目的理解，可以讨论目前存在的问题，还可以从交流中了解到更加广阔的开源世界。当然，开源社区不会是只有一种声音，我们可以有不同的观点，可以有分歧和争辩，还可以享受每一次思想的碰撞。除了必要的社区准则以外，我们的文字、代码以及思想都是无比自由的，或许这就是开源精神带给我的一种体验。\n\n既然谈到了开源精神，那么一群志同道合的秉承开源精神的小伙伴自然是必不可少的。在此，要感谢在开源指北项目中帮助和鼓励过我的小伙伴们：\n\n- 感谢 [jack960330](https://gitee.com/jack960330) 对我编写修订过程中给予的专业指点，也感谢耐心的讲解和对我的认可，钦佩你的专业态度。\n\n- 感谢 [taotieren](https://gitee.com/taotieren) 的中文排版指北项目，在了解一种排版规范的同时，还发现其使用的 WTFPL 开源协议——一个有趣的协议以及背后有趣的小故事。\n\n- 感谢众多的开源小伙伴，我们一起沟通探讨了很多开源小知识，也通过他们了解到了很多开源项目，一起奋战的日子会是一段非常美好的回忆！\n\n- 感谢 Gitee 小助手带我加入开源小队，还给我邮递了那么多奖品，我会继续努力的。不辜负每一次参与！\n- 感谢与开源指北的不期而遇，这是我这个冬季里最温暖的“小太阳”。\n\n“琴罢辄举酒，酒罢辄吟诗”，这是我理想中的开源世界。所谓“琴”、“酒”、“诗”，是代指令自己感到美好的事物——是得到认可的喜悦，是有所收获的满足，是感受到如鱼得水般的自由。我觉得开源指北就是这样的，希望它在未来成长的路上，依旧如此自由！也希望参与开源的你——**Forever to be free !** ","source":"_posts/“我的一剂良药”之开源指北.md","raw":"---\ntitle: “我的一剂良药”之开源指北\ndate: 2020-01-21\nupdated: 2020-01-22\ncategories:\n- 开源\ntags:\n- 开源\n- 感悟\n---\n\n本文收录于 Gitee 官方“开源指北”项目的“开源故事”目录下，更多精彩故事可戳这里： [开源指北](https://gitee.com/gitee-community/opensource-guide/tree/master) 。\n\n**文章较长，适合闲来无事时“食用”（阅读）。** \n\n## 开篇\n\n开源指北是 Gitee 开源社区送给所有开源人的一份保姆级开源百科，它的出现让开源相关知识不再像“沧海遗珠”一样散落在瀚海苍茫，让初识开源者可以从容地面对开源之海的首次“起航”，让众多热衷开源的开源爱好者在这里畅谈其所想。\n\n不得不说，开源指北项目的发起是一个非常有趣的想法，其秉持着“开源问题由开源来解决”的思想，吸引了众多开源爱好者参与到这项开源运动中来，我也是其中一员。这是我参与的第一个开源项目，在拟定标题时再三思忖，结合自身的亲身感受，最终定了这个标题。至于为什么说对我而言是“一剂良药”，在下文中我会作出解释。\n\n相比“满满的正能量”，我更希望从平常视角坦诚相待，有喜悦，有悲伤，有勇往直前，有踟蹰迷茫。不管读到这篇文章的你正拥有着哪种情绪，都能从这些稀松平常的小事中有所得，然后继续努力前行，成为更好的自己。\n\n接下来，分享一段普普通通、简简单单的故事。\n\n---\n\n<!--more-->\n\n---\n\n## 源起\n\n**“青山若无素，偃蹇不相亲。要识庐山面，他年是故人。”** \n\n我叫西狩，有些朋友也会叫我老江，从事 Java 开发相关工作。\n\n2020年是动荡的一年。从我的大脑里进行热词分析，浮现出来了很多“动荡”的词汇。比如：“疫情”、“大选”、“制裁”、“猝死”、“内卷”等等。我们深知处在一个贩卖焦虑的时代，但有时还是会不自觉地被这些外界的焦虑所影响，对于处在人生各种分岔路口的人们而言，受到的影响可能会更大。随着时间越走越快，看到很多新鲜的事物如雨后春笋般破土而出，陌生而又新奇。就像是面对琳琅满目的商品一样，一不小心便挑花了眼。这时我们可能会迷茫，但我们深知，自己需要去做些什么来面对它们。\n\n我不确定每个人是否都有过这种迷茫的经历，但就我个人而言，迷茫期是经常的，也是正常的。生活是一座围城，选择了漂泊但又渴望稳定，选择了努力但又渴望闲适。“有的人想得多却做得少”，我不确定这句话是否符合自己，但我深知自己做得还远远不够。大家应该都听过这样一句话：“学习最好的时间是十年前，其次是现在”。所以，**不要害怕迷茫，只要敢于面对迷茫并踏出下一步，那就是有意义的。** \n\n我不确定命运是否会眷顾内心和自己拧巴的人，但能够参与一项有意义的开源活动，我觉得自己是幸运的。一切的源头是从日常阅读公众号文章开始讲起，几个月前 [张乘辉](https://github.com/objcoding) 老师的一篇推文《使用 Hexo + Gitee 快速搭建属于自己的博客》，文章内容很简单易懂，而后我开始考虑搭建自己的博客。在搭建过程中，我 Gitee 平台上无意间看到了开源指北的开源活动，怀着一颗好奇心的自己就这样与开源指北相遇了。说实话，虽然平时也会在 Github、Gitee 上转一转，但顶多都是走马观花似的了解，并没有参与到什么开源项目中。起初自己也是随便了解一下。在了解项目简介、阅读其中几篇文章后，感觉自己对一些内容有一定的认知和共鸣，而且内容还有很多缺失，于是便尝试提交了一次 PR。\n\n故事讲到这里，我可能还并不会深陷其中。在提交后的第二天，官方小伙伴 [tenngo](https://gitee.com/tenngoxars) 就合并了我的 PR。及时的正向反馈让我受到了很大的鼓舞，就像是可治百病的“一剂良药”，使我无处安放的心静了下来。于是便开始了我的第一次开源之旅。\n\n## 指天说地\n\n**“一点浩然气，千里快哉风。”** \n\n在开源指北之前，其实网络上有很多开源知识的相关文章，但太过零散，不成体系，对于想要参与开源的人并不友好。开源指北最大的意义就是对开源知识的整合，它涵盖了大部分常见的入门知识，可以帮助很多想要参与开源而不知如何入手的小伙伴，所以，我想有必要分享一下在开源指北参与过程中的感受与收获。\n\n在《降临》中，有句台词让我记忆深刻：“If you immerse yourself into a foreign language, you can actually rewire your brain”。正如前文提到的迷茫期，最近一年的时间里发生了很多事情，思绪万千但却发现脚步却慢了下来。当我下意识提起自己的脚步时，却感觉似乎前方全是岔路，就在这时，开源指北出现了。在参与过程中，无论是查阅资料，还是编写文章，又或是提交 PR，都能感受到开源带给自己的活力。仔细想想，当自己毕业时，不愿在一眼望到头的生活里度过一生，那么自己对未来的迷茫和担忧就可以很好地接收了，因为这就是自己想要的生活。人生在世，不如意事常八九，大多数人都并非是一帆风顺的。**与其每日杞人忧天，不如沉下心来倾听内心的想法，然后坚定地踏出接下来的每一步。** \n\n在开始分享开源过程中的感悟前，先谈及了心态，是因为自己深知心态对我的重要性。在自己心静下来后，做事情的效率会有明显的提高，并且在交流、沟通以及决策上都可以更加清醒。接下来，便带着这份心态聊到哪算哪喽！\n\n开源与我的本职专业有着密切的联系，虽然是第一次参与开源，但自己对开源并不算陌生。曾经怀着激动的心情参加的每次 Pivotal 技术峰会、各种技术的 Meetup 以及各位大佬的技术分享，在这一刻似乎派上了一定的用场。这也说明了**平日积累的重要性**，碎片化学习虽然并不能建立起心中的一套完整的框架体系，但对自己的影响是潜移默化的。我会对每个章节进行阅读，文章结构不顺就梳理结构，上下文衔接问题就修改上下文，明显出现内容缺失就通过查阅资料再加上自己的理解进行补充。后面又进行了反复的阅读，以及关注小伙伴们提交的 PR。我们会为项目中提及的“半开源”的概念展开探讨，会对开源知识互相交流以至于忘记时间，诸如 arch、CLA、中国第一个被 OSI 认可的协议等等。我们也会因为项目中的不足而争辩，而且可能最终谁也说服不了谁，大家的思想是平等的，没有对错，而最终的结论也是有趣而一致的。那么这个结论是什么呢？其实很简单，各自提交 PR 就好了。**求同存异是开源社区的不二法则，我不认可你的观点，但我尊重你表达思想的权利。** \n\n因工作需要，我在 2017 年加入了 Kettle 技术交流群，经过学习掌握了它，但由于后续没有机会再使用，我对 Kettle 的熟练程度大幅度下降，更不要说现在最新的开源版本。同样的原因，我在 2019 年初加入了 Skywalking 交流群，基本属于一个“潜水者”，只是经常会查看技术交流的消息。其他社群我就不一一列举了，我之所以提到这两段经历，是想反思一下自己：为什么曾经有那么多优秀的开源项目摆在自己面前，到现在自己还是一个开源小白？我感觉有两个重要的事情自己没有做得很好：**坚持和思维模式**。\n\n- 参与开源不是一蹴而就的事情，我们需要花费大量的时间来将其打造成为一个更好的东西。我因为不再使用而放弃对 Kettle 的关注，所以它自然而然就离我远去了。**其实大多数人都并非天才，能成为一个项目中优秀开源者的主要原因就是坚持。** \n- 我学习 Kettle 只想使用它来解决问题，但从未想过自己还可以改变它。如果保持这样的思维模式继续下去，那么坚持的意义就是十分有限的了，因为我只是一个熟练工，可能永远都无法突破成为建筑师。**一个目标是否能够可达，有时候需要的只是一个思维的转变。** \n\n最近看了吴晟老师在开放原子基金会 2020 年技术峰会上发表的演讲——[开源运营治理分论坛 - Educate Community Over Support Community](https://www.bilibili.com/video/BV125411E7GK?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1611211180&unique_k=ZKplUv)。演讲中很清晰地为大家讲解了我们在开源中应该关注的重点，解释了社区各种角色的职责，也谈及了对社区发展和社区生态的看法。当然，其中让人受益匪浅的内容还有很多，而且没有太多难理解的技术，更多的是对开源经验的分享，感兴趣的小伙伴可以了解一下。这也是我的一个小建议：**多去与他人交谈，倾听他人的想法，我们需要在思想碰撞的过程中不断刺激自己进行思维升级。** \n\n再分享一则个人觉得有趣的事情，每个开源项目都有自己的排版规则，在参与开源指北过程中，我在一个关于排版的开源项目中发现了一个有趣的协议：WTFPL。参考知乎问答“[什么是 WTFPL（Do What the Fuck You Want to Public License），为什么会有人使用这一授权许可？](https://www.zhihu.com/question/20865060/answer/51757033)”中的描述来了解一下：\n\n> 由于程序拥有所有权，所以每段代码允许大家在何种程度上自然使用就成为了一个严肃的法律问题，所以就诞生了licence这个概念。其中有一些代码是写出来让大家随意免费使用的，所以licence就要规定你可以干一切事情。可是在法律里，“允许你干任何事情”这句话并不严谨，所以随着不断的诉讼、打官司、法学家的诠释，诞生了诸如 [@IAMSK](http://www.zhihu.com/people/c55d6c118b9141f20776588b0308e586) 所说的一大堆授权协议。\n> 但是问题来了。\n> 这个协议是给程序员看的，却是由法学家和律师写的。\n> 于是随着时间的推移，这些协议变得unreadable，也就是程序员根本不可能看懂。\n>\n> 而这些协议还会越来越长，随着欧美法律不断地被新的判例充实。。。。\n>\n> 于是一些程序员为了反抗这一恶性循环，发明了WTFPL。\n>\n> 简而言之，就是：**“你TM爱干啥干啥”**\n\n有趣的点在于，我仿佛能脑补出当时程序员看到冗长的法律条文和专业名词的时候抓狂的面部表情，是个很有意思的小故事。\n\n最后要说一下，个人认为，开源指北项目参与门槛并不高，虽然在内容上会尽力做到精益求精，但它的受众是每一个开源人，大家都可以在这里各抒己见。这个项目的维护也会一直开放，也希望能够在以后听到更多开源故事和开源声音。**毕竟开源这件事儿，一起热闹起来才好玩嘛！** \n\n## 北窗之友\n\n**“今日北窗下，自问何所为，欣然得三友，三友者为谁？琴罢辄举酒，酒罢辄吟诗。”** \n\n如果说有人问：“一次开源经历中，最重要的是什么事情？是最后的结果么？”我想可能不是。当我们去做任何一件事情的时候，都无法预料到下一秒会发生什么，更不会预料到最后的结果会是什么样子，所以结论并不适合放在开源经历的第一位。正所谓兴趣是最好的老师，与其猜测未知的结果，不如遵从本心去体会在开源中遇到的所有感受。因此，**一次成功的硕果固然可喜，但更重要的是享受过程。** \n\n我们可以对于开源项目的任何事情畅所欲言，可以发表自己对开源项目的理解，可以讨论目前存在的问题，还可以从交流中了解到更加广阔的开源世界。当然，开源社区不会是只有一种声音，我们可以有不同的观点，可以有分歧和争辩，还可以享受每一次思想的碰撞。除了必要的社区准则以外，我们的文字、代码以及思想都是无比自由的，或许这就是开源精神带给我的一种体验。\n\n既然谈到了开源精神，那么一群志同道合的秉承开源精神的小伙伴自然是必不可少的。在此，要感谢在开源指北项目中帮助和鼓励过我的小伙伴们：\n\n- 感谢 [jack960330](https://gitee.com/jack960330) 对我编写修订过程中给予的专业指点，也感谢耐心的讲解和对我的认可，钦佩你的专业态度。\n\n- 感谢 [taotieren](https://gitee.com/taotieren) 的中文排版指北项目，在了解一种排版规范的同时，还发现其使用的 WTFPL 开源协议——一个有趣的协议以及背后有趣的小故事。\n\n- 感谢众多的开源小伙伴，我们一起沟通探讨了很多开源小知识，也通过他们了解到了很多开源项目，一起奋战的日子会是一段非常美好的回忆！\n\n- 感谢 Gitee 小助手带我加入开源小队，还给我邮递了那么多奖品，我会继续努力的。不辜负每一次参与！\n- 感谢与开源指北的不期而遇，这是我这个冬季里最温暖的“小太阳”。\n\n“琴罢辄举酒，酒罢辄吟诗”，这是我理想中的开源世界。所谓“琴”、“酒”、“诗”，是代指令自己感到美好的事物——是得到认可的喜悦，是有所收获的满足，是感受到如鱼得水般的自由。我觉得开源指北就是这样的，希望它在未来成长的路上，依旧如此自由！也希望参与开源的你——**Forever to be free !** ","slug":"“我的一剂良药”之开源指北","published":1,"_id":"ckluyb5xj000s546addhm0b5v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文收录于 Gitee 官方“开源指北”项目的“开源故事”目录下，更多精彩故事可戳这里： <a href=\"https://gitee.com/gitee-community/opensource-guide/tree/master\">开源指北</a> 。</p>\n<p><strong>文章较长，适合闲来无事时“食用”（阅读）。</strong> </p>\n<h2 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h2><p>开源指北是 Gitee 开源社区送给所有开源人的一份保姆级开源百科，它的出现让开源相关知识不再像“沧海遗珠”一样散落在瀚海苍茫，让初识开源者可以从容地面对开源之海的首次“起航”，让众多热衷开源的开源爱好者在这里畅谈其所想。</p>\n<p>不得不说，开源指北项目的发起是一个非常有趣的想法，其秉持着“开源问题由开源来解决”的思想，吸引了众多开源爱好者参与到这项开源运动中来，我也是其中一员。这是我参与的第一个开源项目，在拟定标题时再三思忖，结合自身的亲身感受，最终定了这个标题。至于为什么说对我而言是“一剂良药”，在下文中我会作出解释。</p>\n<p>相比“满满的正能量”，我更希望从平常视角坦诚相待，有喜悦，有悲伤，有勇往直前，有踟蹰迷茫。不管读到这篇文章的你正拥有着哪种情绪，都能从这些稀松平常的小事中有所得，然后继续努力前行，成为更好的自己。</p>\n<p>接下来，分享一段普普通通、简简单单的故事。</p>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"源起\"><a href=\"#源起\" class=\"headerlink\" title=\"源起\"></a>源起</h2><p><strong>“青山若无素，偃蹇不相亲。要识庐山面，他年是故人。”</strong> </p>\n<p>我叫西狩，有些朋友也会叫我老江，从事 Java 开发相关工作。</p>\n<p>2020年是动荡的一年。从我的大脑里进行热词分析，浮现出来了很多“动荡”的词汇。比如：“疫情”、“大选”、“制裁”、“猝死”、“内卷”等等。我们深知处在一个贩卖焦虑的时代，但有时还是会不自觉地被这些外界的焦虑所影响，对于处在人生各种分岔路口的人们而言，受到的影响可能会更大。随着时间越走越快，看到很多新鲜的事物如雨后春笋般破土而出，陌生而又新奇。就像是面对琳琅满目的商品一样，一不小心便挑花了眼。这时我们可能会迷茫，但我们深知，自己需要去做些什么来面对它们。</p>\n<p>我不确定每个人是否都有过这种迷茫的经历，但就我个人而言，迷茫期是经常的，也是正常的。生活是一座围城，选择了漂泊但又渴望稳定，选择了努力但又渴望闲适。“有的人想得多却做得少”，我不确定这句话是否符合自己，但我深知自己做得还远远不够。大家应该都听过这样一句话：“学习最好的时间是十年前，其次是现在”。所以，<strong>不要害怕迷茫，只要敢于面对迷茫并踏出下一步，那就是有意义的。</strong> </p>\n<p>我不确定命运是否会眷顾内心和自己拧巴的人，但能够参与一项有意义的开源活动，我觉得自己是幸运的。一切的源头是从日常阅读公众号文章开始讲起，几个月前 <a href=\"https://github.com/objcoding\">张乘辉</a> 老师的一篇推文《使用 Hexo + Gitee 快速搭建属于自己的博客》，文章内容很简单易懂，而后我开始考虑搭建自己的博客。在搭建过程中，我 Gitee 平台上无意间看到了开源指北的开源活动，怀着一颗好奇心的自己就这样与开源指北相遇了。说实话，虽然平时也会在 Github、Gitee 上转一转，但顶多都是走马观花似的了解，并没有参与到什么开源项目中。起初自己也是随便了解一下。在了解项目简介、阅读其中几篇文章后，感觉自己对一些内容有一定的认知和共鸣，而且内容还有很多缺失，于是便尝试提交了一次 PR。</p>\n<p>故事讲到这里，我可能还并不会深陷其中。在提交后的第二天，官方小伙伴 <a href=\"https://gitee.com/tenngoxars\">tenngo</a> 就合并了我的 PR。及时的正向反馈让我受到了很大的鼓舞，就像是可治百病的“一剂良药”，使我无处安放的心静了下来。于是便开始了我的第一次开源之旅。</p>\n<h2 id=\"指天说地\"><a href=\"#指天说地\" class=\"headerlink\" title=\"指天说地\"></a>指天说地</h2><p><strong>“一点浩然气，千里快哉风。”</strong> </p>\n<p>在开源指北之前，其实网络上有很多开源知识的相关文章，但太过零散，不成体系，对于想要参与开源的人并不友好。开源指北最大的意义就是对开源知识的整合，它涵盖了大部分常见的入门知识，可以帮助很多想要参与开源而不知如何入手的小伙伴，所以，我想有必要分享一下在开源指北参与过程中的感受与收获。</p>\n<p>在《降临》中，有句台词让我记忆深刻：“If you immerse yourself into a foreign language, you can actually rewire your brain”。正如前文提到的迷茫期，最近一年的时间里发生了很多事情，思绪万千但却发现脚步却慢了下来。当我下意识提起自己的脚步时，却感觉似乎前方全是岔路，就在这时，开源指北出现了。在参与过程中，无论是查阅资料，还是编写文章，又或是提交 PR，都能感受到开源带给自己的活力。仔细想想，当自己毕业时，不愿在一眼望到头的生活里度过一生，那么自己对未来的迷茫和担忧就可以很好地接收了，因为这就是自己想要的生活。人生在世，不如意事常八九，大多数人都并非是一帆风顺的。<strong>与其每日杞人忧天，不如沉下心来倾听内心的想法，然后坚定地踏出接下来的每一步。</strong> </p>\n<p>在开始分享开源过程中的感悟前，先谈及了心态，是因为自己深知心态对我的重要性。在自己心静下来后，做事情的效率会有明显的提高，并且在交流、沟通以及决策上都可以更加清醒。接下来，便带着这份心态聊到哪算哪喽！</p>\n<p>开源与我的本职专业有着密切的联系，虽然是第一次参与开源，但自己对开源并不算陌生。曾经怀着激动的心情参加的每次 Pivotal 技术峰会、各种技术的 Meetup 以及各位大佬的技术分享，在这一刻似乎派上了一定的用场。这也说明了<strong>平日积累的重要性</strong>，碎片化学习虽然并不能建立起心中的一套完整的框架体系，但对自己的影响是潜移默化的。我会对每个章节进行阅读，文章结构不顺就梳理结构，上下文衔接问题就修改上下文，明显出现内容缺失就通过查阅资料再加上自己的理解进行补充。后面又进行了反复的阅读，以及关注小伙伴们提交的 PR。我们会为项目中提及的“半开源”的概念展开探讨，会对开源知识互相交流以至于忘记时间，诸如 arch、CLA、中国第一个被 OSI 认可的协议等等。我们也会因为项目中的不足而争辩，而且可能最终谁也说服不了谁，大家的思想是平等的，没有对错，而最终的结论也是有趣而一致的。那么这个结论是什么呢？其实很简单，各自提交 PR 就好了。<strong>求同存异是开源社区的不二法则，我不认可你的观点，但我尊重你表达思想的权利。</strong> </p>\n<p>因工作需要，我在 2017 年加入了 Kettle 技术交流群，经过学习掌握了它，但由于后续没有机会再使用，我对 Kettle 的熟练程度大幅度下降，更不要说现在最新的开源版本。同样的原因，我在 2019 年初加入了 Skywalking 交流群，基本属于一个“潜水者”，只是经常会查看技术交流的消息。其他社群我就不一一列举了，我之所以提到这两段经历，是想反思一下自己：为什么曾经有那么多优秀的开源项目摆在自己面前，到现在自己还是一个开源小白？我感觉有两个重要的事情自己没有做得很好：<strong>坚持和思维模式</strong>。</p>\n<ul>\n<li>参与开源不是一蹴而就的事情，我们需要花费大量的时间来将其打造成为一个更好的东西。我因为不再使用而放弃对 Kettle 的关注，所以它自然而然就离我远去了。<strong>其实大多数人都并非天才，能成为一个项目中优秀开源者的主要原因就是坚持。</strong> </li>\n<li>我学习 Kettle 只想使用它来解决问题，但从未想过自己还可以改变它。如果保持这样的思维模式继续下去，那么坚持的意义就是十分有限的了，因为我只是一个熟练工，可能永远都无法突破成为建筑师。<strong>一个目标是否能够可达，有时候需要的只是一个思维的转变。</strong> </li>\n</ul>\n<p>最近看了吴晟老师在开放原子基金会 2020 年技术峰会上发表的演讲——<a href=\"https://www.bilibili.com/video/BV125411E7GK?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1611211180&unique_k=ZKplUv\">开源运营治理分论坛 - Educate Community Over Support Community</a>。演讲中很清晰地为大家讲解了我们在开源中应该关注的重点，解释了社区各种角色的职责，也谈及了对社区发展和社区生态的看法。当然，其中让人受益匪浅的内容还有很多，而且没有太多难理解的技术，更多的是对开源经验的分享，感兴趣的小伙伴可以了解一下。这也是我的一个小建议：<strong>多去与他人交谈，倾听他人的想法，我们需要在思想碰撞的过程中不断刺激自己进行思维升级。</strong> </p>\n<p>再分享一则个人觉得有趣的事情，每个开源项目都有自己的排版规则，在参与开源指北过程中，我在一个关于排版的开源项目中发现了一个有趣的协议：WTFPL。参考知乎问答“<a href=\"https://www.zhihu.com/question/20865060/answer/51757033\">什么是 WTFPL（Do What the Fuck You Want to Public License），为什么会有人使用这一授权许可？</a>”中的描述来了解一下：</p>\n<blockquote>\n<p>由于程序拥有所有权，所以每段代码允许大家在何种程度上自然使用就成为了一个严肃的法律问题，所以就诞生了licence这个概念。其中有一些代码是写出来让大家随意免费使用的，所以licence就要规定你可以干一切事情。可是在法律里，“允许你干任何事情”这句话并不严谨，所以随着不断的诉讼、打官司、法学家的诠释，诞生了诸如 <a href=\"http://www.zhihu.com/people/c55d6c118b9141f20776588b0308e586\">@IAMSK</a> 所说的一大堆授权协议。<br>但是问题来了。<br>这个协议是给程序员看的，却是由法学家和律师写的。<br>于是随着时间的推移，这些协议变得unreadable，也就是程序员根本不可能看懂。</p>\n<p>而这些协议还会越来越长，随着欧美法律不断地被新的判例充实。。。。</p>\n<p>于是一些程序员为了反抗这一恶性循环，发明了WTFPL。</p>\n<p>简而言之，就是：<strong>“你TM爱干啥干啥”</strong></p>\n</blockquote>\n<p>有趣的点在于，我仿佛能脑补出当时程序员看到冗长的法律条文和专业名词的时候抓狂的面部表情，是个很有意思的小故事。</p>\n<p>最后要说一下，个人认为，开源指北项目参与门槛并不高，虽然在内容上会尽力做到精益求精，但它的受众是每一个开源人，大家都可以在这里各抒己见。这个项目的维护也会一直开放，也希望能够在以后听到更多开源故事和开源声音。<strong>毕竟开源这件事儿，一起热闹起来才好玩嘛！</strong> </p>\n<h2 id=\"北窗之友\"><a href=\"#北窗之友\" class=\"headerlink\" title=\"北窗之友\"></a>北窗之友</h2><p><strong>“今日北窗下，自问何所为，欣然得三友，三友者为谁？琴罢辄举酒，酒罢辄吟诗。”</strong> </p>\n<p>如果说有人问：“一次开源经历中，最重要的是什么事情？是最后的结果么？”我想可能不是。当我们去做任何一件事情的时候，都无法预料到下一秒会发生什么，更不会预料到最后的结果会是什么样子，所以结论并不适合放在开源经历的第一位。正所谓兴趣是最好的老师，与其猜测未知的结果，不如遵从本心去体会在开源中遇到的所有感受。因此，<strong>一次成功的硕果固然可喜，但更重要的是享受过程。</strong> </p>\n<p>我们可以对于开源项目的任何事情畅所欲言，可以发表自己对开源项目的理解，可以讨论目前存在的问题，还可以从交流中了解到更加广阔的开源世界。当然，开源社区不会是只有一种声音，我们可以有不同的观点，可以有分歧和争辩，还可以享受每一次思想的碰撞。除了必要的社区准则以外，我们的文字、代码以及思想都是无比自由的，或许这就是开源精神带给我的一种体验。</p>\n<p>既然谈到了开源精神，那么一群志同道合的秉承开源精神的小伙伴自然是必不可少的。在此，要感谢在开源指北项目中帮助和鼓励过我的小伙伴们：</p>\n<ul>\n<li><p>感谢 <a href=\"https://gitee.com/jack960330\">jack960330</a> 对我编写修订过程中给予的专业指点，也感谢耐心的讲解和对我的认可，钦佩你的专业态度。</p>\n</li>\n<li><p>感谢 <a href=\"https://gitee.com/taotieren\">taotieren</a> 的中文排版指北项目，在了解一种排版规范的同时，还发现其使用的 WTFPL 开源协议——一个有趣的协议以及背后有趣的小故事。</p>\n</li>\n<li><p>感谢众多的开源小伙伴，我们一起沟通探讨了很多开源小知识，也通过他们了解到了很多开源项目，一起奋战的日子会是一段非常美好的回忆！</p>\n</li>\n<li><p>感谢 Gitee 小助手带我加入开源小队，还给我邮递了那么多奖品，我会继续努力的。不辜负每一次参与！</p>\n</li>\n<li><p>感谢与开源指北的不期而遇，这是我这个冬季里最温暖的“小太阳”。</p>\n</li>\n</ul>\n<p>“琴罢辄举酒，酒罢辄吟诗”，这是我理想中的开源世界。所谓“琴”、“酒”、“诗”，是代指令自己感到美好的事物——是得到认可的喜悦，是有所收获的满足，是感受到如鱼得水般的自由。我觉得开源指北就是这样的，希望它在未来成长的路上，依旧如此自由！也希望参与开源的你——<strong>Forever to be free !</strong> </p>\n","site":{"data":{}},"length":4625,"excerpt":"<p>本文收录于 Gitee 官方“开源指北”项目的“开源故事”目录下，更多精彩故事可戳这里： <a href=\"https://gitee.com/gitee-community/opensource-guide/tree/master\">开源指北</a> 。</p>\n<p><strong>文章较长，适合闲来无事时“食用”（阅读）。</strong> </p>\n<h2 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h2><p>开源指北是 Gitee 开源社区送给所有开源人的一份保姆级开源百科，它的出现让开源相关知识不再像“沧海遗珠”一样散落在瀚海苍茫，让初识开源者可以从容地面对开源之海的首次“起航”，让众多热衷开源的开源爱好者在这里畅谈其所想。</p>\n<p>不得不说，开源指北项目的发起是一个非常有趣的想法，其秉持着“开源问题由开源来解决”的思想，吸引了众多开源爱好者参与到这项开源运动中来，我也是其中一员。这是我参与的第一个开源项目，在拟定标题时再三思忖，结合自身的亲身感受，最终定了这个标题。至于为什么说对我而言是“一剂良药”，在下文中我会作出解释。</p>\n<p>相比“满满的正能量”，我更希望从平常视角坦诚相待，有喜悦，有悲伤，有勇往直前，有踟蹰迷茫。不管读到这篇文章的你正拥有着哪种情绪，都能从这些稀松平常的小事中有所得，然后继续努力前行，成为更好的自己。</p>\n<p>接下来，分享一段普普通通、简简单单的故事。</p>\n<hr>","more":"<hr>\n<h2 id=\"源起\"><a href=\"#源起\" class=\"headerlink\" title=\"源起\"></a>源起</h2><p><strong>“青山若无素，偃蹇不相亲。要识庐山面，他年是故人。”</strong> </p>\n<p>我叫西狩，有些朋友也会叫我老江，从事 Java 开发相关工作。</p>\n<p>2020年是动荡的一年。从我的大脑里进行热词分析，浮现出来了很多“动荡”的词汇。比如：“疫情”、“大选”、“制裁”、“猝死”、“内卷”等等。我们深知处在一个贩卖焦虑的时代，但有时还是会不自觉地被这些外界的焦虑所影响，对于处在人生各种分岔路口的人们而言，受到的影响可能会更大。随着时间越走越快，看到很多新鲜的事物如雨后春笋般破土而出，陌生而又新奇。就像是面对琳琅满目的商品一样，一不小心便挑花了眼。这时我们可能会迷茫，但我们深知，自己需要去做些什么来面对它们。</p>\n<p>我不确定每个人是否都有过这种迷茫的经历，但就我个人而言，迷茫期是经常的，也是正常的。生活是一座围城，选择了漂泊但又渴望稳定，选择了努力但又渴望闲适。“有的人想得多却做得少”，我不确定这句话是否符合自己，但我深知自己做得还远远不够。大家应该都听过这样一句话：“学习最好的时间是十年前，其次是现在”。所以，<strong>不要害怕迷茫，只要敢于面对迷茫并踏出下一步，那就是有意义的。</strong> </p>\n<p>我不确定命运是否会眷顾内心和自己拧巴的人，但能够参与一项有意义的开源活动，我觉得自己是幸运的。一切的源头是从日常阅读公众号文章开始讲起，几个月前 <a href=\"https://github.com/objcoding\">张乘辉</a> 老师的一篇推文《使用 Hexo + Gitee 快速搭建属于自己的博客》，文章内容很简单易懂，而后我开始考虑搭建自己的博客。在搭建过程中，我 Gitee 平台上无意间看到了开源指北的开源活动，怀着一颗好奇心的自己就这样与开源指北相遇了。说实话，虽然平时也会在 Github、Gitee 上转一转，但顶多都是走马观花似的了解，并没有参与到什么开源项目中。起初自己也是随便了解一下。在了解项目简介、阅读其中几篇文章后，感觉自己对一些内容有一定的认知和共鸣，而且内容还有很多缺失，于是便尝试提交了一次 PR。</p>\n<p>故事讲到这里，我可能还并不会深陷其中。在提交后的第二天，官方小伙伴 <a href=\"https://gitee.com/tenngoxars\">tenngo</a> 就合并了我的 PR。及时的正向反馈让我受到了很大的鼓舞，就像是可治百病的“一剂良药”，使我无处安放的心静了下来。于是便开始了我的第一次开源之旅。</p>\n<h2 id=\"指天说地\"><a href=\"#指天说地\" class=\"headerlink\" title=\"指天说地\"></a>指天说地</h2><p><strong>“一点浩然气，千里快哉风。”</strong> </p>\n<p>在开源指北之前，其实网络上有很多开源知识的相关文章，但太过零散，不成体系，对于想要参与开源的人并不友好。开源指北最大的意义就是对开源知识的整合，它涵盖了大部分常见的入门知识，可以帮助很多想要参与开源而不知如何入手的小伙伴，所以，我想有必要分享一下在开源指北参与过程中的感受与收获。</p>\n<p>在《降临》中，有句台词让我记忆深刻：“If you immerse yourself into a foreign language, you can actually rewire your brain”。正如前文提到的迷茫期，最近一年的时间里发生了很多事情，思绪万千但却发现脚步却慢了下来。当我下意识提起自己的脚步时，却感觉似乎前方全是岔路，就在这时，开源指北出现了。在参与过程中，无论是查阅资料，还是编写文章，又或是提交 PR，都能感受到开源带给自己的活力。仔细想想，当自己毕业时，不愿在一眼望到头的生活里度过一生，那么自己对未来的迷茫和担忧就可以很好地接收了，因为这就是自己想要的生活。人生在世，不如意事常八九，大多数人都并非是一帆风顺的。<strong>与其每日杞人忧天，不如沉下心来倾听内心的想法，然后坚定地踏出接下来的每一步。</strong> </p>\n<p>在开始分享开源过程中的感悟前，先谈及了心态，是因为自己深知心态对我的重要性。在自己心静下来后，做事情的效率会有明显的提高，并且在交流、沟通以及决策上都可以更加清醒。接下来，便带着这份心态聊到哪算哪喽！</p>\n<p>开源与我的本职专业有着密切的联系，虽然是第一次参与开源，但自己对开源并不算陌生。曾经怀着激动的心情参加的每次 Pivotal 技术峰会、各种技术的 Meetup 以及各位大佬的技术分享，在这一刻似乎派上了一定的用场。这也说明了<strong>平日积累的重要性</strong>，碎片化学习虽然并不能建立起心中的一套完整的框架体系，但对自己的影响是潜移默化的。我会对每个章节进行阅读，文章结构不顺就梳理结构，上下文衔接问题就修改上下文，明显出现内容缺失就通过查阅资料再加上自己的理解进行补充。后面又进行了反复的阅读，以及关注小伙伴们提交的 PR。我们会为项目中提及的“半开源”的概念展开探讨，会对开源知识互相交流以至于忘记时间，诸如 arch、CLA、中国第一个被 OSI 认可的协议等等。我们也会因为项目中的不足而争辩，而且可能最终谁也说服不了谁，大家的思想是平等的，没有对错，而最终的结论也是有趣而一致的。那么这个结论是什么呢？其实很简单，各自提交 PR 就好了。<strong>求同存异是开源社区的不二法则，我不认可你的观点，但我尊重你表达思想的权利。</strong> </p>\n<p>因工作需要，我在 2017 年加入了 Kettle 技术交流群，经过学习掌握了它，但由于后续没有机会再使用，我对 Kettle 的熟练程度大幅度下降，更不要说现在最新的开源版本。同样的原因，我在 2019 年初加入了 Skywalking 交流群，基本属于一个“潜水者”，只是经常会查看技术交流的消息。其他社群我就不一一列举了，我之所以提到这两段经历，是想反思一下自己：为什么曾经有那么多优秀的开源项目摆在自己面前，到现在自己还是一个开源小白？我感觉有两个重要的事情自己没有做得很好：<strong>坚持和思维模式</strong>。</p>\n<ul>\n<li>参与开源不是一蹴而就的事情，我们需要花费大量的时间来将其打造成为一个更好的东西。我因为不再使用而放弃对 Kettle 的关注，所以它自然而然就离我远去了。<strong>其实大多数人都并非天才，能成为一个项目中优秀开源者的主要原因就是坚持。</strong> </li>\n<li>我学习 Kettle 只想使用它来解决问题，但从未想过自己还可以改变它。如果保持这样的思维模式继续下去，那么坚持的意义就是十分有限的了，因为我只是一个熟练工，可能永远都无法突破成为建筑师。<strong>一个目标是否能够可达，有时候需要的只是一个思维的转变。</strong> </li>\n</ul>\n<p>最近看了吴晟老师在开放原子基金会 2020 年技术峰会上发表的演讲——<a href=\"https://www.bilibili.com/video/BV125411E7GK?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1611211180&unique_k=ZKplUv\">开源运营治理分论坛 - Educate Community Over Support Community</a>。演讲中很清晰地为大家讲解了我们在开源中应该关注的重点，解释了社区各种角色的职责，也谈及了对社区发展和社区生态的看法。当然，其中让人受益匪浅的内容还有很多，而且没有太多难理解的技术，更多的是对开源经验的分享，感兴趣的小伙伴可以了解一下。这也是我的一个小建议：<strong>多去与他人交谈，倾听他人的想法，我们需要在思想碰撞的过程中不断刺激自己进行思维升级。</strong> </p>\n<p>再分享一则个人觉得有趣的事情，每个开源项目都有自己的排版规则，在参与开源指北过程中，我在一个关于排版的开源项目中发现了一个有趣的协议：WTFPL。参考知乎问答“<a href=\"https://www.zhihu.com/question/20865060/answer/51757033\">什么是 WTFPL（Do What the Fuck You Want to Public License），为什么会有人使用这一授权许可？</a>”中的描述来了解一下：</p>\n<blockquote>\n<p>由于程序拥有所有权，所以每段代码允许大家在何种程度上自然使用就成为了一个严肃的法律问题，所以就诞生了licence这个概念。其中有一些代码是写出来让大家随意免费使用的，所以licence就要规定你可以干一切事情。可是在法律里，“允许你干任何事情”这句话并不严谨，所以随着不断的诉讼、打官司、法学家的诠释，诞生了诸如 <a href=\"http://www.zhihu.com/people/c55d6c118b9141f20776588b0308e586\">@IAMSK</a> 所说的一大堆授权协议。<br>但是问题来了。<br>这个协议是给程序员看的，却是由法学家和律师写的。<br>于是随着时间的推移，这些协议变得unreadable，也就是程序员根本不可能看懂。</p>\n<p>而这些协议还会越来越长，随着欧美法律不断地被新的判例充实。。。。</p>\n<p>于是一些程序员为了反抗这一恶性循环，发明了WTFPL。</p>\n<p>简而言之，就是：<strong>“你TM爱干啥干啥”</strong></p>\n</blockquote>\n<p>有趣的点在于，我仿佛能脑补出当时程序员看到冗长的法律条文和专业名词的时候抓狂的面部表情，是个很有意思的小故事。</p>\n<p>最后要说一下，个人认为，开源指北项目参与门槛并不高，虽然在内容上会尽力做到精益求精，但它的受众是每一个开源人，大家都可以在这里各抒己见。这个项目的维护也会一直开放，也希望能够在以后听到更多开源故事和开源声音。<strong>毕竟开源这件事儿，一起热闹起来才好玩嘛！</strong> </p>\n<h2 id=\"北窗之友\"><a href=\"#北窗之友\" class=\"headerlink\" title=\"北窗之友\"></a>北窗之友</h2><p><strong>“今日北窗下，自问何所为，欣然得三友，三友者为谁？琴罢辄举酒，酒罢辄吟诗。”</strong> </p>\n<p>如果说有人问：“一次开源经历中，最重要的是什么事情？是最后的结果么？”我想可能不是。当我们去做任何一件事情的时候，都无法预料到下一秒会发生什么，更不会预料到最后的结果会是什么样子，所以结论并不适合放在开源经历的第一位。正所谓兴趣是最好的老师，与其猜测未知的结果，不如遵从本心去体会在开源中遇到的所有感受。因此，<strong>一次成功的硕果固然可喜，但更重要的是享受过程。</strong> </p>\n<p>我们可以对于开源项目的任何事情畅所欲言，可以发表自己对开源项目的理解，可以讨论目前存在的问题，还可以从交流中了解到更加广阔的开源世界。当然，开源社区不会是只有一种声音，我们可以有不同的观点，可以有分歧和争辩，还可以享受每一次思想的碰撞。除了必要的社区准则以外，我们的文字、代码以及思想都是无比自由的，或许这就是开源精神带给我的一种体验。</p>\n<p>既然谈到了开源精神，那么一群志同道合的秉承开源精神的小伙伴自然是必不可少的。在此，要感谢在开源指北项目中帮助和鼓励过我的小伙伴们：</p>\n<ul>\n<li><p>感谢 <a href=\"https://gitee.com/jack960330\">jack960330</a> 对我编写修订过程中给予的专业指点，也感谢耐心的讲解和对我的认可，钦佩你的专业态度。</p>\n</li>\n<li><p>感谢 <a href=\"https://gitee.com/taotieren\">taotieren</a> 的中文排版指北项目，在了解一种排版规范的同时，还发现其使用的 WTFPL 开源协议——一个有趣的协议以及背后有趣的小故事。</p>\n</li>\n<li><p>感谢众多的开源小伙伴，我们一起沟通探讨了很多开源小知识，也通过他们了解到了很多开源项目，一起奋战的日子会是一段非常美好的回忆！</p>\n</li>\n<li><p>感谢 Gitee 小助手带我加入开源小队，还给我邮递了那么多奖品，我会继续努力的。不辜负每一次参与！</p>\n</li>\n<li><p>感谢与开源指北的不期而遇，这是我这个冬季里最温暖的“小太阳”。</p>\n</li>\n</ul>\n<p>“琴罢辄举酒，酒罢辄吟诗”，这是我理想中的开源世界。所谓“琴”、“酒”、“诗”，是代指令自己感到美好的事物——是得到认可的喜悦，是有所收获的满足，是感受到如鱼得水般的自由。我觉得开源指北就是这样的，希望它在未来成长的路上，依旧如此自由！也希望参与开源的你——<strong>Forever to be free !</strong> </p>"},{"title":"必知必会面试题之 Java 注解","date":"2021-02-23T16:00:00.000Z","updated":"2021-02-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [元注解](#元注解) \n  - [@Documented](#@Documented) \n  - [@Indexed](#@Indexed) \n  - [@Retention](#@Retention) \n\n  - [@Target](#@Target) \n\n---\n\n<!--more-->\n\n---\n\n- [常用注解](#常用注解) \n  - [@Deprecated](#@Deprecated) \n\n  - [@FunctionalInterface](#@FunctionalInterface) \n  - [@Override](#@Override) \n  - [@PostConstruct](#@PostConstruct) \n  - [@SafeVarargs](#@SafeVarargs) \n  - [@SuppressWarnings](#@SuppressWarnings) \n\n- [附录](#附录) \n  - [ElementType](#ElementType) \n  - [RetentionPolicy](#RetentionPolicy) \n  - [@SuppressWarnings 关键字](#@SuppressWarnings关键字) \n\n\n\n## 元注解\n\n### @Documented\n\n仅用在注解类上，表示在使用 javadoc 工具生成帮助文档时，使用该注解的类会在 API 文档中展示该注解。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 创建一个注解类 TestAnnotation\n\n  ```java\n  package com.xs.annotation;\n  \n  import java.lang.annotation.Documented;\n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Target;\n  \n  @Documented\n  @Target(ElementType.TYPE)\n  public @interface TestAnnotation {\n  \n    public String value() default \"javadoc\";\n  }\n  ```\n\n- 创建一个使用该注解的类 DocumentTest\n\n  ```java\n  package com.xs.annotation;\n  \n  @TestAnnotation\n  public class DocumentedTest {\n  }\n  ```\n\n- 生成 javadoc（使用 javadoc 命令 或 使用 eclipse、IDEA 等 IDE 提供的 javadoc 生成工具）\n\n- 打开生成的 API 文档（/doc/index.html），如下：\n\n  [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wKKTIUib-1614172467381)(必知必会之Java注解.assets/image-20210219181622050.png)]\n\n- 若删除注解类 TestAnnotation 中的 @Documented 注解，再次生成 javadoc，**注解消失**。\n\n  [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eBIAda2g-1614172467384)(必知必会之Java注解.assets/image-20210219182152788.png)]\n\n### @Inherited\n\n仅用在注解类上，被它修饰的注解具有继承性。也就是说，在一个类上使用被 @Inherited 标注的注解，其子类也会继承这些被 @Inherited 标注的注解。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 创建一个带有 @Inherited 的注解类 InheritedAnnotation\n\n  ```java\n  package com.xs.annotation;\n  \n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Inherited;\n  import java.lang.annotation.Target;\n  \n  @Inherited\n  @Target(ElementType.TYPE)\n  @Retention(RetentionPolicy.RUNTIME)\n  public @interface InheritedAnnotation {\n  \n    public String value() default \"Inherited\";\n  }\n  ```\n\n- 创建一个使用该注解的类 InheritedParent\n\n  ```java\n  package com.xs.annotation;\n  \n  import com.xs.annotation.TestInheritedAnnotation;\n  \n  @InheritedAnnotation(value=\"parent\")\n  public class InheritedParent {\n    \n  }\n  ```\n\n- 为 InheritedParent 类创建子类 InheritedChild\n\n  ```java\n  package com.xs.annotation;\n  \n  import com.xs.annotation.InheritedParent;\n  \n  public class InheritedChild extends InheritedParent {\n    \n    public static void main(String[] args) {\n  \t\tClass<InheritedChild> child = InheritedChild.class;\n  \t\tInheritedAnnotation annotation = child.getAnnotation(InheritedAnnotation.class);\n  \t\tSystem.out.println(annotation.value());\n  \t}\n  }\n  ```\n\n- 运行 main 方法，输出如下。\n\n  ```\n  parent\n  ```\n\n### @Retention\n\n仅用在注解类上，用来描述注解保留的时间范围。一共有三种策略，定义在 [RetentionPolicy](#RetentionPolicy) 枚举中，分别是：源文件保留、编译期保留、运行期保留，默认值为编译期保留。运行期保留可以用来获取注解信息。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 分别实现三种策略\n\n  ```java\n  package com.xs.annotation.meta;\n  \n  import java.lang.annotation.Retention;\n  import java.lang.annotation.RetentionPolicy;\n  \n  @Retention(RetentionPolicy.SOURCE)\n  public @interface SourcePolicy {\n   \n  }\n  \n  @Retention(RetentionPolicy.CLASS)\n  public @interface ClassPolicy {\n   \n  }\n  \n  @Retention(RetentionPolicy.RUNTIME)\n  public @interface RuntimePolicy {\n   \n  }\n  ```\n\n- 创建一个类，并使用以上三种注解去注解三个方法\n\n  ```java\n  package com.xs.annotation.meta;\n  \n  public class RetentionTest {\n   \n  \t@SourcePolicy\n  \tpublic void sourcePolicy() {\n  \t}\n   \n  \t@ClassPolicy\n  \tpublic void classPolicy() {\n  \t}\n   \n  \t@RuntimePolicy\n  \tpublic void runtimePolicy() {\n  \t}\n  }\n  ```\n\n- 生成字节码文件\n\n  ```shell\n  javap -verbose RetentionClass\n  ### 以下为输出结果 ###\n  警告: 二进制文件RetentionClass包含com.xs.annotation.meta.RetentionClass\n  Classfile /Users/lihuiming/git/xs/xs-technology/xs-learning-annotation/target/classes/com/xs/annotation/meta/RetentionClass.class\n    Last modified 2021-2-20; size 709 bytes\n    MD5 checksum 88516f888e7e83d00ffe708e32d852a0\n    Compiled from \"RetentionClass.java\"\n  public class com.xs.annotation.meta.RetentionClass\n    minor version: 0\n    major version: 52\n    flags: ACC_PUBLIC, ACC_SUPER\n  Constant pool:\n     #1 = Methodref          #3.#20         // java/lang/Object.\"<init>\":()V\n     #2 = Class              #21            // com/xs/annotation/meta/RetentionClass\n     #3 = Class              #22            // java/lang/Object\n     #4 = Utf8               <init>\n     #5 = Utf8               ()V\n     #6 = Utf8               Code\n     #7 = Utf8               LineNumberTable\n     #8 = Utf8               LocalVariableTable\n     #9 = Utf8               this\n    #10 = Utf8               Lcom/xs/annotation/meta/RetentionClass;\n    #11 = Utf8               sourcePolicy\n    #12 = Utf8               classPolicy\n    #13 = Utf8               RuntimeInvisibleAnnotations\n    #14 = Utf8               Lcom/xs/annotation/meta/RetentionClassPolicy;\n    #15 = Utf8               runtimePolicy\n    #16 = Utf8               RuntimeVisibleAnnotations\n    #17 = Utf8               Lcom/xs/annotation/meta/RetentionRuntimePolicy;\n    #18 = Utf8               SourceFile\n    #19 = Utf8               RetentionClass.java\n    #20 = NameAndType        #4:#5          // \"<init>\":()V\n    #21 = Utf8               com/xs/annotation/meta/RetentionClass\n    #22 = Utf8               java/lang/Object\n  {\n    public com.xs.annotation.meta.RetentionClass();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=1, locals=1, args_size=1\n           0: aload_0\n           1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n           4: return\n        LineNumberTable:\n          line 8: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       5     0  this   Lcom/xs/annotation/meta/RetentionClass;\n  \n    public void sourcePolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 12: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n  \n    public void classPolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 16: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n      RuntimeInvisibleAnnotations:\n        0: #14()\n  \n    public void runtimePolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 20: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n      RuntimeVisibleAnnotations:\n        0: #17()\n  }\n  SourceFile: \"RetentionClass.java\"\n  ```\n\n- 从字节码可以看出，编译器没有记录下 sourcePolicy() 方法的注解信息，分别使用了 RuntimeInvisibleAnnotations 和 RuntimeVisibleAnnotations 属性去记录了classPolicy()方法 和 runtimePolicy()方法 的注解信息。\n\n### @Target\n\n仅用在注解类上，用来标注注解的元素类型（[ElementType](#ElementType)），即设置注解的适用范围。如果没有标注 @Target，那么该注解可以作用在任何地方。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\npackage javax.validation;\n\nimport static java.lang.annotation.ElementType.CONSTRUCTOR;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n@Target({ METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE })\n@Retention(RUNTIME)\n@Documented\npublic @interface Valid {\n}\n```\n\n\n\n## 常用注解\n\n### @Deprecated\n\n标注在类、接口、成员方法和成员变量上，表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\n@Deprecated\npublic class DeprecatedClass {\n  \n  @Deprecated\n  public int value;\n  \n  @Deprecated\n  public void m1() {\n    System.out.println(\"Deprecated\");\n  }\n}\n```\n\n### @FunctionalInterface\n\nJava 8 版本后，Java引入函数式编程。@FunctionalInterface 就是 Java 8 版本新增的注解，用来标注函数式接口。\n\n什么是函数式接口？如果接口中只有一个抽象方法（可以包含多个默认方法或多个 static 方法），那么该接口就是函数式接口。函数式接口是为 Java 8 的 Lambda 表达式准备的。\n\n@FunctionalInterface 本身只起到标注作用，用来告诉编译器检查这个接口是否符合函数式接口的规范（只能包含一个抽象方法）。\n\n**注解版本：1.8+** \n\n**场景举例：** \n\n```java\npackage org.springframework.boot;\n\n@FunctionalInterface\npublic interface ApplicationRunner {\n  void run(ApplicationArguments args) throws Exception;\n}\n```\n\n### @Override\n\n标注在方法上，用来标注方法为重写方法。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\npublic class Parent {\n  \n  public void m1() {\n    System.out.println(\"Parent\");\n  }\n}\n\npublic class Child extends Parent {\n  \n  @Override\n  public void m1() {\n    System.out.println(\"Child\");\n  }\n}\n```\n\n### @PostConstruct\n\n@PostConstruct 该注解被用来修饰一个非静态的 void() 方法。被 @PostConstruct 修饰的方法会**在服务器加载 Servlet 的时候运行，并且只会被服务器执行一次**。PostConstruct 在**构造函数之后**执行，**init() 方法之前**执行。\n\n该注解的方法在 Spring 整个 Bean 初始化中的执行顺序：**Constructor（构造方法） -> @Autowired（依赖注入） -> @PostConstruct（注释的方法）**。\n\n**注解版本：1.0+** \n\n**场景举例：** \n\n```java\npublic class Test {\n  private static Test test = new Test();\n  \n  @Autowired\n  private OtherService otherService;\n  \n  @PostConstruct\n  public void init() {\n    System.out.println(\"init\");\n    test.otherService = otherService;\n  }\n}\n```\n\n### @SafeVarargs\n\n标注在 static 或 final 方法上，表示被该注解修饰的方法取消显示指定的编译器警告。\n\n**注解版本：1.7+** \n\n**场景举例：** \n\n```java\npublic class SafeVarargsClass {\n  \n  public static void main(String[] args) {\n    // 没有 @SafeVarargs 会有编译警告\n    display(\"10\", 20, 30);\n  }\n  \n  @SafeVarargs\n  public static <T> void m1(T... array) {\n    for (T arg : array) {\n      System.out.println(arg.getClass().getName() + \"：\" + arg);\n    }\n  }\n}\n```\n\n### @SuppressWarnings\n\n标注在类或方法上，表示被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告，且会一直作用于该程序元素的所有子元素。\n\n注解的使用有以下三种：\n\n- 抑制单类型的警告：@SuppressWarnings(\"unchecked\")\n\n- 抑制多类型的警告：@SuppressWarnings(\"unchecked\",\"rawtypes\")\n\n- 抑制所有类型的警告：@SuppressWarnings(\"unchecked\")\n\n全部关键字请参考附录：[@SuppressWarnings 关键字](#@SuppressWarnings 关键字) \n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\n@SuppressWarnings(\"unchecked\",\"rawtypes\")\npublic class SuppressWarningsClass {\n  \n  @SuppressWarnings(\"unchecked\")\n  public void m1() {\n    System.out.println(\"unchecked\");\n  }\n}\n```\n\n\n\n## 附录\n\n### ElementType\n\n> The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. These constants are used in {@link Target java.lang.annotation.Target} meta-annotations to specify where it is legal to write annotations of a given type.\n\n**版本：1.5+** \n\n| 取值            | 释义                                   |\n| --------------- | -------------------------------------- |\n| TYPE            | 用于描述类、接口（包括注解类型）、枚举 |\n| FIELD           | 用于描述字段（包括枚举、常量）         |\n| METHOD          | 用于描述方法                           |\n| PARAMETER       | 用于描述形参                           |\n| CONSTRUCTOR     | 用于描述构造器                         |\n| LOCAL_VARIABLE  | 用于描述局部变量                       |\n| ANNOTATION_TYPE | 用于描述注解类型                       |\n| PACKAGE         | 用于描述包                             |\n| TYPE_PARAMETER  | JAVA 8 新增，作用在泛型上              |\n| TYPE_USE        | JAVA 8 新增，用于描述任何类型          |\n\n### RetentionPolicy\n\n> Annotation retention policy.  The constants of this enumerated type describe the various policies for retaining annotations.  They are used in conjunction with the {@link Retention} meta-annotation type to specify how long annotations are to be retained.\n\n**版本：1.5+** \n\n| 取值    | 释义                                                         |\n| ------- | ------------------------------------------------------------ |\n| SOURCE  | 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃； |\n| CLASS   | 注解被保留到 class文件，但jvm加载class文件时候被遗弃，默认为该级别； |\n| RUNTIME | 注解不仅被保存到 class文件中，jvm加载class文件之后，仍然存在； |\n\n### @SuppressWarnings 关键字\n\n| 关键字                   | 用途                                                   |\n| ------------------------ | ------------------------------------------------------ |\n| all                      | 抑制所有警告                                           |\n| boxing                   | 抑制装箱、拆箱操作时候的警告                           |\n| cast                     | 抑制映射相关的警告                                     |\n| dep-ann                  | 抑制启用注释的警告                                     |\n| deprecation              | 抑制过期方法警告                                       |\n| fallthrough              | 抑制在 switch 中缺失 breaks 的警告                     |\n| finally                  | 抑制 finally 模块没有返回的警告                        |\n| hiding                   | 抑制相对于隐藏变量的局部变量的警告                     |\n| incomplete-switch        | 忽略不完整的 switch 语句                               |\n| nls                      | 忽略非 nls 格式的字符                                  |\n| null                     | 忽略对 null 的操作                                     |\n| rawtypes                 | 使用 generics 时忽略没有指定相应的类型                 |\n| restriction              | 抑制禁止使用劝阻或禁止引用的警告                       |\n| serial                   | 忽略在 serializable 类中没有声明 serialVersionUID 变量 |\n| static-access            | 抑制不正确的静态访问方式警告                           |\n| synthetic-access         | 抑制子类没有按最优方法访问内部类的警告                 |\n| unchecked                | 抑制没有进行类型检查操作的警告                         |\n| unqualified-field-access | 抑制没有权限访问的域的警告                             |\n| unused                   | 抑制没被使用过的代码的警告                             |\n\n","source":"_posts/必知必会面试题之Java注解.md","raw":"---\ntitle: 必知必会面试题之 Java 注解\ndate: 2021-02-24\nupdated: 2021-02-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [元注解](#元注解) \n  - [@Documented](#@Documented) \n  - [@Indexed](#@Indexed) \n  - [@Retention](#@Retention) \n\n  - [@Target](#@Target) \n\n---\n\n<!--more-->\n\n---\n\n- [常用注解](#常用注解) \n  - [@Deprecated](#@Deprecated) \n\n  - [@FunctionalInterface](#@FunctionalInterface) \n  - [@Override](#@Override) \n  - [@PostConstruct](#@PostConstruct) \n  - [@SafeVarargs](#@SafeVarargs) \n  - [@SuppressWarnings](#@SuppressWarnings) \n\n- [附录](#附录) \n  - [ElementType](#ElementType) \n  - [RetentionPolicy](#RetentionPolicy) \n  - [@SuppressWarnings 关键字](#@SuppressWarnings关键字) \n\n\n\n## 元注解\n\n### @Documented\n\n仅用在注解类上，表示在使用 javadoc 工具生成帮助文档时，使用该注解的类会在 API 文档中展示该注解。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 创建一个注解类 TestAnnotation\n\n  ```java\n  package com.xs.annotation;\n  \n  import java.lang.annotation.Documented;\n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Target;\n  \n  @Documented\n  @Target(ElementType.TYPE)\n  public @interface TestAnnotation {\n  \n    public String value() default \"javadoc\";\n  }\n  ```\n\n- 创建一个使用该注解的类 DocumentTest\n\n  ```java\n  package com.xs.annotation;\n  \n  @TestAnnotation\n  public class DocumentedTest {\n  }\n  ```\n\n- 生成 javadoc（使用 javadoc 命令 或 使用 eclipse、IDEA 等 IDE 提供的 javadoc 生成工具）\n\n- 打开生成的 API 文档（/doc/index.html），如下：\n\n  [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wKKTIUib-1614172467381)(必知必会之Java注解.assets/image-20210219181622050.png)]\n\n- 若删除注解类 TestAnnotation 中的 @Documented 注解，再次生成 javadoc，**注解消失**。\n\n  [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eBIAda2g-1614172467384)(必知必会之Java注解.assets/image-20210219182152788.png)]\n\n### @Inherited\n\n仅用在注解类上，被它修饰的注解具有继承性。也就是说，在一个类上使用被 @Inherited 标注的注解，其子类也会继承这些被 @Inherited 标注的注解。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 创建一个带有 @Inherited 的注解类 InheritedAnnotation\n\n  ```java\n  package com.xs.annotation;\n  \n  import java.lang.annotation.ElementType;\n  import java.lang.annotation.Inherited;\n  import java.lang.annotation.Target;\n  \n  @Inherited\n  @Target(ElementType.TYPE)\n  @Retention(RetentionPolicy.RUNTIME)\n  public @interface InheritedAnnotation {\n  \n    public String value() default \"Inherited\";\n  }\n  ```\n\n- 创建一个使用该注解的类 InheritedParent\n\n  ```java\n  package com.xs.annotation;\n  \n  import com.xs.annotation.TestInheritedAnnotation;\n  \n  @InheritedAnnotation(value=\"parent\")\n  public class InheritedParent {\n    \n  }\n  ```\n\n- 为 InheritedParent 类创建子类 InheritedChild\n\n  ```java\n  package com.xs.annotation;\n  \n  import com.xs.annotation.InheritedParent;\n  \n  public class InheritedChild extends InheritedParent {\n    \n    public static void main(String[] args) {\n  \t\tClass<InheritedChild> child = InheritedChild.class;\n  \t\tInheritedAnnotation annotation = child.getAnnotation(InheritedAnnotation.class);\n  \t\tSystem.out.println(annotation.value());\n  \t}\n  }\n  ```\n\n- 运行 main 方法，输出如下。\n\n  ```\n  parent\n  ```\n\n### @Retention\n\n仅用在注解类上，用来描述注解保留的时间范围。一共有三种策略，定义在 [RetentionPolicy](#RetentionPolicy) 枚举中，分别是：源文件保留、编译期保留、运行期保留，默认值为编译期保留。运行期保留可以用来获取注解信息。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n- 分别实现三种策略\n\n  ```java\n  package com.xs.annotation.meta;\n  \n  import java.lang.annotation.Retention;\n  import java.lang.annotation.RetentionPolicy;\n  \n  @Retention(RetentionPolicy.SOURCE)\n  public @interface SourcePolicy {\n   \n  }\n  \n  @Retention(RetentionPolicy.CLASS)\n  public @interface ClassPolicy {\n   \n  }\n  \n  @Retention(RetentionPolicy.RUNTIME)\n  public @interface RuntimePolicy {\n   \n  }\n  ```\n\n- 创建一个类，并使用以上三种注解去注解三个方法\n\n  ```java\n  package com.xs.annotation.meta;\n  \n  public class RetentionTest {\n   \n  \t@SourcePolicy\n  \tpublic void sourcePolicy() {\n  \t}\n   \n  \t@ClassPolicy\n  \tpublic void classPolicy() {\n  \t}\n   \n  \t@RuntimePolicy\n  \tpublic void runtimePolicy() {\n  \t}\n  }\n  ```\n\n- 生成字节码文件\n\n  ```shell\n  javap -verbose RetentionClass\n  ### 以下为输出结果 ###\n  警告: 二进制文件RetentionClass包含com.xs.annotation.meta.RetentionClass\n  Classfile /Users/lihuiming/git/xs/xs-technology/xs-learning-annotation/target/classes/com/xs/annotation/meta/RetentionClass.class\n    Last modified 2021-2-20; size 709 bytes\n    MD5 checksum 88516f888e7e83d00ffe708e32d852a0\n    Compiled from \"RetentionClass.java\"\n  public class com.xs.annotation.meta.RetentionClass\n    minor version: 0\n    major version: 52\n    flags: ACC_PUBLIC, ACC_SUPER\n  Constant pool:\n     #1 = Methodref          #3.#20         // java/lang/Object.\"<init>\":()V\n     #2 = Class              #21            // com/xs/annotation/meta/RetentionClass\n     #3 = Class              #22            // java/lang/Object\n     #4 = Utf8               <init>\n     #5 = Utf8               ()V\n     #6 = Utf8               Code\n     #7 = Utf8               LineNumberTable\n     #8 = Utf8               LocalVariableTable\n     #9 = Utf8               this\n    #10 = Utf8               Lcom/xs/annotation/meta/RetentionClass;\n    #11 = Utf8               sourcePolicy\n    #12 = Utf8               classPolicy\n    #13 = Utf8               RuntimeInvisibleAnnotations\n    #14 = Utf8               Lcom/xs/annotation/meta/RetentionClassPolicy;\n    #15 = Utf8               runtimePolicy\n    #16 = Utf8               RuntimeVisibleAnnotations\n    #17 = Utf8               Lcom/xs/annotation/meta/RetentionRuntimePolicy;\n    #18 = Utf8               SourceFile\n    #19 = Utf8               RetentionClass.java\n    #20 = NameAndType        #4:#5          // \"<init>\":()V\n    #21 = Utf8               com/xs/annotation/meta/RetentionClass\n    #22 = Utf8               java/lang/Object\n  {\n    public com.xs.annotation.meta.RetentionClass();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=1, locals=1, args_size=1\n           0: aload_0\n           1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n           4: return\n        LineNumberTable:\n          line 8: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       5     0  this   Lcom/xs/annotation/meta/RetentionClass;\n  \n    public void sourcePolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 12: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n  \n    public void classPolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 16: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n      RuntimeInvisibleAnnotations:\n        0: #14()\n  \n    public void runtimePolicy();\n      descriptor: ()V\n      flags: ACC_PUBLIC\n      Code:\n        stack=0, locals=1, args_size=1\n           0: return\n        LineNumberTable:\n          line 20: 0\n        LocalVariableTable:\n          Start  Length  Slot  Name   Signature\n              0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;\n      RuntimeVisibleAnnotations:\n        0: #17()\n  }\n  SourceFile: \"RetentionClass.java\"\n  ```\n\n- 从字节码可以看出，编译器没有记录下 sourcePolicy() 方法的注解信息，分别使用了 RuntimeInvisibleAnnotations 和 RuntimeVisibleAnnotations 属性去记录了classPolicy()方法 和 runtimePolicy()方法 的注解信息。\n\n### @Target\n\n仅用在注解类上，用来标注注解的元素类型（[ElementType](#ElementType)），即设置注解的适用范围。如果没有标注 @Target，那么该注解可以作用在任何地方。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\npackage javax.validation;\n\nimport static java.lang.annotation.ElementType.CONSTRUCTOR;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n@Target({ METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE })\n@Retention(RUNTIME)\n@Documented\npublic @interface Valid {\n}\n```\n\n\n\n## 常用注解\n\n### @Deprecated\n\n标注在类、接口、成员方法和成员变量上，表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\n@Deprecated\npublic class DeprecatedClass {\n  \n  @Deprecated\n  public int value;\n  \n  @Deprecated\n  public void m1() {\n    System.out.println(\"Deprecated\");\n  }\n}\n```\n\n### @FunctionalInterface\n\nJava 8 版本后，Java引入函数式编程。@FunctionalInterface 就是 Java 8 版本新增的注解，用来标注函数式接口。\n\n什么是函数式接口？如果接口中只有一个抽象方法（可以包含多个默认方法或多个 static 方法），那么该接口就是函数式接口。函数式接口是为 Java 8 的 Lambda 表达式准备的。\n\n@FunctionalInterface 本身只起到标注作用，用来告诉编译器检查这个接口是否符合函数式接口的规范（只能包含一个抽象方法）。\n\n**注解版本：1.8+** \n\n**场景举例：** \n\n```java\npackage org.springframework.boot;\n\n@FunctionalInterface\npublic interface ApplicationRunner {\n  void run(ApplicationArguments args) throws Exception;\n}\n```\n\n### @Override\n\n标注在方法上，用来标注方法为重写方法。\n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\npublic class Parent {\n  \n  public void m1() {\n    System.out.println(\"Parent\");\n  }\n}\n\npublic class Child extends Parent {\n  \n  @Override\n  public void m1() {\n    System.out.println(\"Child\");\n  }\n}\n```\n\n### @PostConstruct\n\n@PostConstruct 该注解被用来修饰一个非静态的 void() 方法。被 @PostConstruct 修饰的方法会**在服务器加载 Servlet 的时候运行，并且只会被服务器执行一次**。PostConstruct 在**构造函数之后**执行，**init() 方法之前**执行。\n\n该注解的方法在 Spring 整个 Bean 初始化中的执行顺序：**Constructor（构造方法） -> @Autowired（依赖注入） -> @PostConstruct（注释的方法）**。\n\n**注解版本：1.0+** \n\n**场景举例：** \n\n```java\npublic class Test {\n  private static Test test = new Test();\n  \n  @Autowired\n  private OtherService otherService;\n  \n  @PostConstruct\n  public void init() {\n    System.out.println(\"init\");\n    test.otherService = otherService;\n  }\n}\n```\n\n### @SafeVarargs\n\n标注在 static 或 final 方法上，表示被该注解修饰的方法取消显示指定的编译器警告。\n\n**注解版本：1.7+** \n\n**场景举例：** \n\n```java\npublic class SafeVarargsClass {\n  \n  public static void main(String[] args) {\n    // 没有 @SafeVarargs 会有编译警告\n    display(\"10\", 20, 30);\n  }\n  \n  @SafeVarargs\n  public static <T> void m1(T... array) {\n    for (T arg : array) {\n      System.out.println(arg.getClass().getName() + \"：\" + arg);\n    }\n  }\n}\n```\n\n### @SuppressWarnings\n\n标注在类或方法上，表示被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告，且会一直作用于该程序元素的所有子元素。\n\n注解的使用有以下三种：\n\n- 抑制单类型的警告：@SuppressWarnings(\"unchecked\")\n\n- 抑制多类型的警告：@SuppressWarnings(\"unchecked\",\"rawtypes\")\n\n- 抑制所有类型的警告：@SuppressWarnings(\"unchecked\")\n\n全部关键字请参考附录：[@SuppressWarnings 关键字](#@SuppressWarnings 关键字) \n\n**注解版本：1.5+** \n\n**场景举例：** \n\n```java\n@SuppressWarnings(\"unchecked\",\"rawtypes\")\npublic class SuppressWarningsClass {\n  \n  @SuppressWarnings(\"unchecked\")\n  public void m1() {\n    System.out.println(\"unchecked\");\n  }\n}\n```\n\n\n\n## 附录\n\n### ElementType\n\n> The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. These constants are used in {@link Target java.lang.annotation.Target} meta-annotations to specify where it is legal to write annotations of a given type.\n\n**版本：1.5+** \n\n| 取值            | 释义                                   |\n| --------------- | -------------------------------------- |\n| TYPE            | 用于描述类、接口（包括注解类型）、枚举 |\n| FIELD           | 用于描述字段（包括枚举、常量）         |\n| METHOD          | 用于描述方法                           |\n| PARAMETER       | 用于描述形参                           |\n| CONSTRUCTOR     | 用于描述构造器                         |\n| LOCAL_VARIABLE  | 用于描述局部变量                       |\n| ANNOTATION_TYPE | 用于描述注解类型                       |\n| PACKAGE         | 用于描述包                             |\n| TYPE_PARAMETER  | JAVA 8 新增，作用在泛型上              |\n| TYPE_USE        | JAVA 8 新增，用于描述任何类型          |\n\n### RetentionPolicy\n\n> Annotation retention policy.  The constants of this enumerated type describe the various policies for retaining annotations.  They are used in conjunction with the {@link Retention} meta-annotation type to specify how long annotations are to be retained.\n\n**版本：1.5+** \n\n| 取值    | 释义                                                         |\n| ------- | ------------------------------------------------------------ |\n| SOURCE  | 注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃； |\n| CLASS   | 注解被保留到 class文件，但jvm加载class文件时候被遗弃，默认为该级别； |\n| RUNTIME | 注解不仅被保存到 class文件中，jvm加载class文件之后，仍然存在； |\n\n### @SuppressWarnings 关键字\n\n| 关键字                   | 用途                                                   |\n| ------------------------ | ------------------------------------------------------ |\n| all                      | 抑制所有警告                                           |\n| boxing                   | 抑制装箱、拆箱操作时候的警告                           |\n| cast                     | 抑制映射相关的警告                                     |\n| dep-ann                  | 抑制启用注释的警告                                     |\n| deprecation              | 抑制过期方法警告                                       |\n| fallthrough              | 抑制在 switch 中缺失 breaks 的警告                     |\n| finally                  | 抑制 finally 模块没有返回的警告                        |\n| hiding                   | 抑制相对于隐藏变量的局部变量的警告                     |\n| incomplete-switch        | 忽略不完整的 switch 语句                               |\n| nls                      | 忽略非 nls 格式的字符                                  |\n| null                     | 忽略对 null 的操作                                     |\n| rawtypes                 | 使用 generics 时忽略没有指定相应的类型                 |\n| restriction              | 抑制禁止使用劝阻或禁止引用的警告                       |\n| serial                   | 忽略在 serializable 类中没有声明 serialVersionUID 变量 |\n| static-access            | 抑制不正确的静态访问方式警告                           |\n| synthetic-access         | 抑制子类没有按最优方法访问内部类的警告                 |\n| unchecked                | 抑制没有进行类型检查操作的警告                         |\n| unqualified-field-access | 抑制没有权限访问的域的警告                             |\n| unused                   | 抑制没被使用过的代码的警告                             |\n\n","slug":"必知必会面试题之Java注解","published":1,"_id":"ckluyfpil001g546abjyde515","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><p><a href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\">元注解</a> </p>\n<ul>\n<li><p><a href=\"#@Documented\">@Documented</a> </p>\n</li>\n<li><p><a href=\"#@Indexed\">@Indexed</a> </p>\n</li>\n<li><p><a href=\"#@Retention\">@Retention</a> </p>\n</li>\n<li><p><a href=\"#@Target\">@Target</a> </p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<ul>\n<li><p><a href=\"#%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\">常用注解</a> </p>\n<ul>\n<li><p><a href=\"#@Deprecated\">@Deprecated</a> </p>\n</li>\n<li><p><a href=\"#@FunctionalInterface\">@FunctionalInterface</a> </p>\n</li>\n<li><p><a href=\"#@Override\">@Override</a> </p>\n</li>\n<li><p><a href=\"#@PostConstruct\">@PostConstruct</a> </p>\n</li>\n<li><p><a href=\"#@SafeVarargs\">@SafeVarargs</a> </p>\n</li>\n<li><p><a href=\"#@SuppressWarnings\">@SuppressWarnings</a> </p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E9%99%84%E5%BD%95\">附录</a> </p>\n<ul>\n<li><a href=\"#ElementType\">ElementType</a> </li>\n<li><a href=\"#RetentionPolicy\">RetentionPolicy</a> </li>\n<li><a href=\"#@SuppressWarnings%E5%85%B3%E9%94%AE%E5%AD%97\">@SuppressWarnings 关键字</a> </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><p>仅用在注解类上，表示在使用 javadoc 工具生成帮助文档时，使用该注解的类会在 API 文档中展示该注解。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>创建一个注解类 TestAnnotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> TestAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;javadoc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个使用该注解的类 DocumentTest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TestAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DocumentedTest</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成 javadoc（使用 javadoc 命令 或 使用 eclipse、IDEA 等 IDE 提供的 javadoc 生成工具）</p>\n</li>\n<li><p>打开生成的 API 文档（/doc/index.html），如下：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wKKTIUib-1614172467381)(必知必会之Java注解.assets/image-20210219181622050.png)]</p>\n</li>\n<li><p>若删除注解类 TestAnnotation 中的 @Documented 注解，再次生成 javadoc，<strong>注解消失</strong>。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eBIAda2g-1614172467384)(必知必会之Java注解.assets/image-20210219182152788.png)]</p>\n</li>\n</ul>\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>仅用在注解类上，被它修饰的注解具有继承性。也就是说，在一个类上使用被 @Inherited 标注的注解，其子类也会继承这些被 @Inherited 标注的注解。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>创建一个带有 @Inherited 的注解类 InheritedAnnotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> InheritedAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;Inherited&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个使用该注解的类 InheritedParent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xs.annotation.TestInheritedAnnotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@InheritedAnnotation(value=&quot;parent&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritedParent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>为 InheritedParent 类创建子类 InheritedChild</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xs.annotation.InheritedParent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritedChild</span> <span class=\"keyword\">extends</span> <span class=\"title\">InheritedParent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClass&lt;InheritedChild&gt; child = InheritedChild.class;</span><br><span class=\"line\">\t\tInheritedAnnotation annotation = child.getAnnotation(InheritedAnnotation.class);</span><br><span class=\"line\">\t\tSystem.out.println(annotation.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>运行 main 方法，输出如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><p>仅用在注解类上，用来描述注解保留的时间范围。一共有三种策略，定义在 <a href=\"#RetentionPolicy\">RetentionPolicy</a> 枚举中，分别是：源文件保留、编译期保留、运行期保留，默认值为编译期保留。运行期保留可以用来获取注解信息。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>分别实现三种策略</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation.meta;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SourcePolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.CLASS)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ClassPolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RuntimePolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个类，并使用以上三种注解去注解三个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation.meta;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetentionTest</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@SourcePolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sourcePolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@ClassPolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">classPolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@RuntimePolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runtimePolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成字节码文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -verbose RetentionClass</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 以下为输出结果 ###</span></span></span><br><span class=\"line\">警告: 二进制文件RetentionClass包含com.xs.annotation.meta.RetentionClass</span><br><span class=\"line\">Classfile /Users/lihuiming/git/xs/xs-technology/xs-learning-annotation/target/classes/com/xs/annotation/meta/RetentionClass.class</span><br><span class=\"line\">  Last modified 2021-2-20; size 709 bytes</span><br><span class=\"line\">  MD5 checksum 88516f888e7e83d00ffe708e32d852a0</span><br><span class=\"line\">  Compiled from &quot;RetentionClass.java&quot;</span><br><span class=\"line\">public class com.xs.annotation.meta.RetentionClass</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">1 = Methodref          <span class=\"comment\">#3.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">2 = Class              <span class=\"comment\">#21            // com/xs/annotation/meta/RetentionClass</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">3 = Class              <span class=\"comment\">#22            // java/lang/Object</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">4 = Utf8               &lt;init&gt;</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">5 = Utf8               ()V</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">6 = Utf8               Code</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">7 = Utf8               LineNumberTable</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">8 = Utf8               LocalVariableTable</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">9 = Utf8               this</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">10 = Utf8               Lcom/xs/annotation/meta/RetentionClass;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">11 = Utf8               sourcePolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">12 = Utf8               classPolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">13 = Utf8               RuntimeInvisibleAnnotations</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">14 = Utf8               Lcom/xs/annotation/meta/RetentionClassPolicy;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">15 = Utf8               runtimePolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">16 = Utf8               RuntimeVisibleAnnotations</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">17 = Utf8               Lcom/xs/annotation/meta/RetentionRuntimePolicy;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">18 = Utf8               SourceFile</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">19 = Utf8               RetentionClass.java</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">20 = NameAndType        <span class=\"comment\">#4:#5          // &quot;&lt;init&gt;&quot;:()V</span></span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">21 = Utf8               com/xs/annotation/meta/RetentionClass</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">22 = Utf8               java/lang/Object</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.xs.annotation.meta.RetentionClass();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 8: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void sourcePolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 12: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void classPolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\">    RuntimeInvisibleAnnotations:</span><br><span class=\"line\">      0: #14()</span><br><span class=\"line\"></span><br><span class=\"line\">  public void runtimePolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 20: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\">    RuntimeVisibleAnnotations:</span><br><span class=\"line\">      0: #17()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;RetentionClass.java&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>从字节码可以看出，编译器没有记录下 sourcePolicy() 方法的注解信息，分别使用了 RuntimeInvisibleAnnotations 和 RuntimeVisibleAnnotations 属性去记录了classPolicy()方法 和 runtimePolicy()方法 的注解信息。</p>\n</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>仅用在注解类上，用来标注注解的元素类型（<a href=\"#ElementType\">ElementType</a>），即设置注解的适用范围。如果没有标注 @Target，那么该注解可以作用在任何地方。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.validation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.CONSTRUCTOR;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.PARAMETER;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.TYPE_USE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123; METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Valid &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h2><h3 id=\"Deprecated\"><a href=\"#Deprecated\" class=\"headerlink\" title=\"@Deprecated\"></a>@Deprecated</h3><p>标注在类、接口、成员方法和成员变量上，表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeprecatedClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Deprecated&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>Java 8 版本后，Java引入函数式编程。@FunctionalInterface 就是 Java 8 版本新增的注解，用来标注函数式接口。</p>\n<p>什么是函数式接口？如果接口中只有一个抽象方法（可以包含多个默认方法或多个 static 方法），那么该接口就是函数式接口。函数式接口是为 Java 8 的 Lambda 表达式准备的。</p>\n<p>@FunctionalInterface 本身只起到标注作用，用来告诉编译器检查这个接口是否符合函数式接口的规范（只能包含一个抽象方法）。</p>\n<p><strong>注解版本：1.8+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Override\"><a href=\"#Override\" class=\"headerlink\" title=\"@Override\"></a>@Override</h3><p>标注在方法上，用来标注方法为重写方法。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Parent&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Child&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PostConstruct\"><a href=\"#PostConstruct\" class=\"headerlink\" title=\"@PostConstruct\"></a>@PostConstruct</h3><p>@PostConstruct 该注解被用来修饰一个非静态的 void() 方法。被 @PostConstruct 修饰的方法会<strong>在服务器加载 Servlet 的时候运行，并且只会被服务器执行一次</strong>。PostConstruct 在<strong>构造函数之后</strong>执行，<strong>init() 方法之前</strong>执行。</p>\n<p>该注解的方法在 Spring 整个 Bean 初始化中的执行顺序：<strong>Constructor（构造方法） -&gt; @Autowired（依赖注入） -&gt; @PostConstruct（注释的方法）</strong>。</p>\n<p><strong>注解版本：1.0+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> OtherService otherService;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    test.otherService = otherService;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SafeVarargs\"><a href=\"#SafeVarargs\" class=\"headerlink\" title=\"@SafeVarargs\"></a>@SafeVarargs</h3><p>标注在 static 或 final 方法上，表示被该注解修饰的方法取消显示指定的编译器警告。</p>\n<p><strong>注解版本：1.7+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeVarargsClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有 @SafeVarargs 会有编译警告</span></span><br><span class=\"line\">    display(<span class=\"string\">&quot;10&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@SafeVarargs</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(T... array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T arg : array) &#123;</span><br><span class=\"line\">      System.out.println(arg.getClass().getName() + <span class=\"string\">&quot;：&quot;</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a>@SuppressWarnings</h3><p>标注在类或方法上，表示被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告，且会一直作用于该程序元素的所有子元素。</p>\n<p>注解的使用有以下三种：</p>\n<ul>\n<li><p>抑制单类型的警告：@SuppressWarnings(“unchecked”)</p>\n</li>\n<li><p>抑制多类型的警告：@SuppressWarnings(“unchecked”,”rawtypes”)</p>\n</li>\n<li><p>抑制所有类型的警告：@SuppressWarnings(“unchecked”)</p>\n</li>\n</ul>\n<p>全部关键字请参考附录：[@SuppressWarnings 关键字](#@SuppressWarnings 关键字) </p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;,&quot;rawtypes&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuppressWarningsClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;unchecked&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"ElementType\"><a href=\"#ElementType\" class=\"headerlink\" title=\"ElementType\"></a>ElementType</h3><blockquote>\n<p>The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. These constants are used in {@link Target java.lang.annotation.Target} meta-annotations to specify where it is legal to write annotations of a given type.</p>\n</blockquote>\n<p><strong>版本：1.5+</strong> </p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TYPE</td>\n<td>用于描述类、接口（包括注解类型）、枚举</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>用于描述字段（包括枚举、常量）</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>用于描述方法</td>\n</tr>\n<tr>\n<td>PARAMETER</td>\n<td>用于描述形参</td>\n</tr>\n<tr>\n<td>CONSTRUCTOR</td>\n<td>用于描述构造器</td>\n</tr>\n<tr>\n<td>LOCAL_VARIABLE</td>\n<td>用于描述局部变量</td>\n</tr>\n<tr>\n<td>ANNOTATION_TYPE</td>\n<td>用于描述注解类型</td>\n</tr>\n<tr>\n<td>PACKAGE</td>\n<td>用于描述包</td>\n</tr>\n<tr>\n<td>TYPE_PARAMETER</td>\n<td>JAVA 8 新增，作用在泛型上</td>\n</tr>\n<tr>\n<td>TYPE_USE</td>\n<td>JAVA 8 新增，用于描述任何类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"RetentionPolicy\"><a href=\"#RetentionPolicy\" class=\"headerlink\" title=\"RetentionPolicy\"></a>RetentionPolicy</h3><blockquote>\n<p>Annotation retention policy.  The constants of this enumerated type describe the various policies for retaining annotations.  They are used in conjunction with the {@link Retention} meta-annotation type to specify how long annotations are to be retained.</p>\n</blockquote>\n<p><strong>版本：1.5+</strong> </p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SOURCE</td>\n<td>注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>注解被保留到 class文件，但jvm加载class文件时候被遗弃，默认为该级别；</td>\n</tr>\n<tr>\n<td>RUNTIME</td>\n<td>注解不仅被保存到 class文件中，jvm加载class文件之后，仍然存在；</td>\n</tr>\n</tbody></table>\n<h3 id=\"SuppressWarnings-关键字\"><a href=\"#SuppressWarnings-关键字\" class=\"headerlink\" title=\"@SuppressWarnings 关键字\"></a>@SuppressWarnings 关键字</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>抑制所有警告</td>\n</tr>\n<tr>\n<td>boxing</td>\n<td>抑制装箱、拆箱操作时候的警告</td>\n</tr>\n<tr>\n<td>cast</td>\n<td>抑制映射相关的警告</td>\n</tr>\n<tr>\n<td>dep-ann</td>\n<td>抑制启用注释的警告</td>\n</tr>\n<tr>\n<td>deprecation</td>\n<td>抑制过期方法警告</td>\n</tr>\n<tr>\n<td>fallthrough</td>\n<td>抑制在 switch 中缺失 breaks 的警告</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>抑制 finally 模块没有返回的警告</td>\n</tr>\n<tr>\n<td>hiding</td>\n<td>抑制相对于隐藏变量的局部变量的警告</td>\n</tr>\n<tr>\n<td>incomplete-switch</td>\n<td>忽略不完整的 switch 语句</td>\n</tr>\n<tr>\n<td>nls</td>\n<td>忽略非 nls 格式的字符</td>\n</tr>\n<tr>\n<td>null</td>\n<td>忽略对 null 的操作</td>\n</tr>\n<tr>\n<td>rawtypes</td>\n<td>使用 generics 时忽略没有指定相应的类型</td>\n</tr>\n<tr>\n<td>restriction</td>\n<td>抑制禁止使用劝阻或禁止引用的警告</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>忽略在 serializable 类中没有声明 serialVersionUID 变量</td>\n</tr>\n<tr>\n<td>static-access</td>\n<td>抑制不正确的静态访问方式警告</td>\n</tr>\n<tr>\n<td>synthetic-access</td>\n<td>抑制子类没有按最优方法访问内部类的警告</td>\n</tr>\n<tr>\n<td>unchecked</td>\n<td>抑制没有进行类型检查操作的警告</td>\n</tr>\n<tr>\n<td>unqualified-field-access</td>\n<td>抑制没有权限访问的域的警告</td>\n</tr>\n<tr>\n<td>unused</td>\n<td>抑制没被使用过的代码的警告</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":9725,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><p><a href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\">元注解</a> </p>\n<ul>\n<li><p><a href=\"#@Documented\">@Documented</a> </p>\n</li>\n<li><p><a href=\"#@Indexed\">@Indexed</a> </p>\n</li>\n<li><p><a href=\"#@Retention\">@Retention</a> </p>\n</li>\n<li><p><a href=\"#@Target\">@Target</a> </p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>","more":"<hr>\n<ul>\n<li><p><a href=\"#%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\">常用注解</a> </p>\n<ul>\n<li><p><a href=\"#@Deprecated\">@Deprecated</a> </p>\n</li>\n<li><p><a href=\"#@FunctionalInterface\">@FunctionalInterface</a> </p>\n</li>\n<li><p><a href=\"#@Override\">@Override</a> </p>\n</li>\n<li><p><a href=\"#@PostConstruct\">@PostConstruct</a> </p>\n</li>\n<li><p><a href=\"#@SafeVarargs\">@SafeVarargs</a> </p>\n</li>\n<li><p><a href=\"#@SuppressWarnings\">@SuppressWarnings</a> </p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#%E9%99%84%E5%BD%95\">附录</a> </p>\n<ul>\n<li><a href=\"#ElementType\">ElementType</a> </li>\n<li><a href=\"#RetentionPolicy\">RetentionPolicy</a> </li>\n<li><a href=\"#@SuppressWarnings%E5%85%B3%E9%94%AE%E5%AD%97\">@SuppressWarnings 关键字</a> </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><p>仅用在注解类上，表示在使用 javadoc 工具生成帮助文档时，使用该注解的类会在 API 文档中展示该注解。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>创建一个注解类 TestAnnotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> TestAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;javadoc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个使用该注解的类 DocumentTest</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@TestAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DocumentedTest</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成 javadoc（使用 javadoc 命令 或 使用 eclipse、IDEA 等 IDE 提供的 javadoc 生成工具）</p>\n</li>\n<li><p>打开生成的 API 文档（/doc/index.html），如下：</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wKKTIUib-1614172467381)(必知必会之Java注解.assets/image-20210219181622050.png)]</p>\n</li>\n<li><p>若删除注解类 TestAnnotation 中的 @Documented 注解，再次生成 javadoc，<strong>注解消失</strong>。</p>\n<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eBIAda2g-1614172467384)(必知必会之Java注解.assets/image-20210219182152788.png)]</p>\n</li>\n</ul>\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>仅用在注解类上，被它修饰的注解具有继承性。也就是说，在一个类上使用被 @Inherited 标注的注解，其子类也会继承这些被 @Inherited 标注的注解。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>创建一个带有 @Inherited 的注解类 InheritedAnnotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Inherited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> InheritedAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;Inherited&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个使用该注解的类 InheritedParent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xs.annotation.TestInheritedAnnotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@InheritedAnnotation(value=&quot;parent&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritedParent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>为 InheritedParent 类创建子类 InheritedChild</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.xs.annotation.InheritedParent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritedChild</span> <span class=\"keyword\">extends</span> <span class=\"title\">InheritedParent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClass&lt;InheritedChild&gt; child = InheritedChild.class;</span><br><span class=\"line\">\t\tInheritedAnnotation annotation = child.getAnnotation(InheritedAnnotation.class);</span><br><span class=\"line\">\t\tSystem.out.println(annotation.value());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>运行 main 方法，输出如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h3><p>仅用在注解类上，用来描述注解保留的时间范围。一共有三种策略，定义在 <a href=\"#RetentionPolicy\">RetentionPolicy</a> 枚举中，分别是：源文件保留、编译期保留、运行期保留，默认值为编译期保留。运行期保留可以用来获取注解信息。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<ul>\n<li><p>分别实现三种策略</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation.meta;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SourcePolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.CLASS)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ClassPolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RuntimePolicy &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个类，并使用以上三种注解去注解三个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xs.annotation.meta;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetentionTest</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@SourcePolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sourcePolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@ClassPolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">classPolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"meta\">@RuntimePolicy</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runtimePolicy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>生成字节码文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -verbose RetentionClass</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">## 以下为输出结果 ###</span></span></span><br><span class=\"line\">警告: 二进制文件RetentionClass包含com.xs.annotation.meta.RetentionClass</span><br><span class=\"line\">Classfile /Users/lihuiming/git/xs/xs-technology/xs-learning-annotation/target/classes/com/xs/annotation/meta/RetentionClass.class</span><br><span class=\"line\">  Last modified 2021-2-20; size 709 bytes</span><br><span class=\"line\">  MD5 checksum 88516f888e7e83d00ffe708e32d852a0</span><br><span class=\"line\">  Compiled from &quot;RetentionClass.java&quot;</span><br><span class=\"line\">public class com.xs.annotation.meta.RetentionClass</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">1 = Methodref          <span class=\"comment\">#3.#20         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">2 = Class              <span class=\"comment\">#21            // com/xs/annotation/meta/RetentionClass</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">3 = Class              <span class=\"comment\">#22            // java/lang/Object</span></span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">4 = Utf8               &lt;init&gt;</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">5 = Utf8               ()V</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">6 = Utf8               Code</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">7 = Utf8               LineNumberTable</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">8 = Utf8               LocalVariableTable</span></span><br><span class=\"line\"><span class=\"meta\">   #</span><span class=\"bash\">9 = Utf8               this</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">10 = Utf8               Lcom/xs/annotation/meta/RetentionClass;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">11 = Utf8               sourcePolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">12 = Utf8               classPolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">13 = Utf8               RuntimeInvisibleAnnotations</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">14 = Utf8               Lcom/xs/annotation/meta/RetentionClassPolicy;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">15 = Utf8               runtimePolicy</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">16 = Utf8               RuntimeVisibleAnnotations</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">17 = Utf8               Lcom/xs/annotation/meta/RetentionRuntimePolicy;</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">18 = Utf8               SourceFile</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">19 = Utf8               RetentionClass.java</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">20 = NameAndType        <span class=\"comment\">#4:#5          // &quot;&lt;init&gt;&quot;:()V</span></span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">21 = Utf8               com/xs/annotation/meta/RetentionClass</span></span><br><span class=\"line\"><span class=\"meta\">  #</span><span class=\"bash\">22 = Utf8               java/lang/Object</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.xs.annotation.meta.RetentionClass();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 8: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void sourcePolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 12: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void classPolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 16: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\">    RuntimeInvisibleAnnotations:</span><br><span class=\"line\">      0: #14()</span><br><span class=\"line\"></span><br><span class=\"line\">  public void runtimePolicy();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 20: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       1     0  this   Lcom/xs/annotation/meta/RetentionClass;</span><br><span class=\"line\">    RuntimeVisibleAnnotations:</span><br><span class=\"line\">      0: #17()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;RetentionClass.java&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>从字节码可以看出，编译器没有记录下 sourcePolicy() 方法的注解信息，分别使用了 RuntimeInvisibleAnnotations 和 RuntimeVisibleAnnotations 属性去记录了classPolicy()方法 和 runtimePolicy()方法 的注解信息。</p>\n</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>仅用在注解类上，用来标注注解的元素类型（<a href=\"#ElementType\">ElementType</a>），即设置注解的适用范围。如果没有标注 @Target，那么该注解可以作用在任何地方。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.validation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.CONSTRUCTOR;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.PARAMETER;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.ElementType.TYPE_USE;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123; METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Valid &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h2><h3 id=\"Deprecated\"><a href=\"#Deprecated\" class=\"headerlink\" title=\"@Deprecated\"></a>@Deprecated</h3><p>标注在类、接口、成员方法和成员变量上，表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeprecatedClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Deprecated&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"@FunctionalInterface\"></a>@FunctionalInterface</h3><p>Java 8 版本后，Java引入函数式编程。@FunctionalInterface 就是 Java 8 版本新增的注解，用来标注函数式接口。</p>\n<p>什么是函数式接口？如果接口中只有一个抽象方法（可以包含多个默认方法或多个 static 方法），那么该接口就是函数式接口。函数式接口是为 Java 8 的 Lambda 表达式准备的。</p>\n<p>@FunctionalInterface 本身只起到标注作用，用来告诉编译器检查这个接口是否符合函数式接口的规范（只能包含一个抽象方法）。</p>\n<p><strong>注解版本：1.8+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Override\"><a href=\"#Override\" class=\"headerlink\" title=\"@Override\"></a>@Override</h3><p>标注在方法上，用来标注方法为重写方法。</p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Parent&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Child&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PostConstruct\"><a href=\"#PostConstruct\" class=\"headerlink\" title=\"@PostConstruct\"></a>@PostConstruct</h3><p>@PostConstruct 该注解被用来修饰一个非静态的 void() 方法。被 @PostConstruct 修饰的方法会<strong>在服务器加载 Servlet 的时候运行，并且只会被服务器执行一次</strong>。PostConstruct 在<strong>构造函数之后</strong>执行，<strong>init() 方法之前</strong>执行。</p>\n<p>该注解的方法在 Spring 整个 Bean 初始化中的执行顺序：<strong>Constructor（构造方法） -&gt; @Autowired（依赖注入） -&gt; @PostConstruct（注释的方法）</strong>。</p>\n<p><strong>注解版本：1.0+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> OtherService otherService;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    test.otherService = otherService;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SafeVarargs\"><a href=\"#SafeVarargs\" class=\"headerlink\" title=\"@SafeVarargs\"></a>@SafeVarargs</h3><p>标注在 static 或 final 方法上，表示被该注解修饰的方法取消显示指定的编译器警告。</p>\n<p><strong>注解版本：1.7+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SafeVarargsClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有 @SafeVarargs 会有编译警告</span></span><br><span class=\"line\">    display(<span class=\"string\">&quot;10&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@SafeVarargs</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(T... array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T arg : array) &#123;</span><br><span class=\"line\">      System.out.println(arg.getClass().getName() + <span class=\"string\">&quot;：&quot;</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SuppressWarnings\"><a href=\"#SuppressWarnings\" class=\"headerlink\" title=\"@SuppressWarnings\"></a>@SuppressWarnings</h3><p>标注在类或方法上，表示被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告，且会一直作用于该程序元素的所有子元素。</p>\n<p>注解的使用有以下三种：</p>\n<ul>\n<li><p>抑制单类型的警告：@SuppressWarnings(“unchecked”)</p>\n</li>\n<li><p>抑制多类型的警告：@SuppressWarnings(“unchecked”,”rawtypes”)</p>\n</li>\n<li><p>抑制所有类型的警告：@SuppressWarnings(“unchecked”)</p>\n</li>\n</ul>\n<p>全部关键字请参考附录：[@SuppressWarnings 关键字](#@SuppressWarnings 关键字) </p>\n<p><strong>注解版本：1.5+</strong> </p>\n<p><strong>场景举例：</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;,&quot;rawtypes&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuppressWarningsClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;unchecked&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"ElementType\"><a href=\"#ElementType\" class=\"headerlink\" title=\"ElementType\"></a>ElementType</h3><blockquote>\n<p>The constants of this enumerated type provide a simple classification of the syntactic locations where annotations may appear in a Java program. These constants are used in {@link Target java.lang.annotation.Target} meta-annotations to specify where it is legal to write annotations of a given type.</p>\n</blockquote>\n<p><strong>版本：1.5+</strong> </p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TYPE</td>\n<td>用于描述类、接口（包括注解类型）、枚举</td>\n</tr>\n<tr>\n<td>FIELD</td>\n<td>用于描述字段（包括枚举、常量）</td>\n</tr>\n<tr>\n<td>METHOD</td>\n<td>用于描述方法</td>\n</tr>\n<tr>\n<td>PARAMETER</td>\n<td>用于描述形参</td>\n</tr>\n<tr>\n<td>CONSTRUCTOR</td>\n<td>用于描述构造器</td>\n</tr>\n<tr>\n<td>LOCAL_VARIABLE</td>\n<td>用于描述局部变量</td>\n</tr>\n<tr>\n<td>ANNOTATION_TYPE</td>\n<td>用于描述注解类型</td>\n</tr>\n<tr>\n<td>PACKAGE</td>\n<td>用于描述包</td>\n</tr>\n<tr>\n<td>TYPE_PARAMETER</td>\n<td>JAVA 8 新增，作用在泛型上</td>\n</tr>\n<tr>\n<td>TYPE_USE</td>\n<td>JAVA 8 新增，用于描述任何类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"RetentionPolicy\"><a href=\"#RetentionPolicy\" class=\"headerlink\" title=\"RetentionPolicy\"></a>RetentionPolicy</h3><blockquote>\n<p>Annotation retention policy.  The constants of this enumerated type describe the various policies for retaining annotations.  They are used in conjunction with the {@link Retention} meta-annotation type to specify how long annotations are to be retained.</p>\n</blockquote>\n<p><strong>版本：1.5+</strong> </p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>释义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SOURCE</td>\n<td>注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；</td>\n</tr>\n<tr>\n<td>CLASS</td>\n<td>注解被保留到 class文件，但jvm加载class文件时候被遗弃，默认为该级别；</td>\n</tr>\n<tr>\n<td>RUNTIME</td>\n<td>注解不仅被保存到 class文件中，jvm加载class文件之后，仍然存在；</td>\n</tr>\n</tbody></table>\n<h3 id=\"SuppressWarnings-关键字\"><a href=\"#SuppressWarnings-关键字\" class=\"headerlink\" title=\"@SuppressWarnings 关键字\"></a>@SuppressWarnings 关键字</h3><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>抑制所有警告</td>\n</tr>\n<tr>\n<td>boxing</td>\n<td>抑制装箱、拆箱操作时候的警告</td>\n</tr>\n<tr>\n<td>cast</td>\n<td>抑制映射相关的警告</td>\n</tr>\n<tr>\n<td>dep-ann</td>\n<td>抑制启用注释的警告</td>\n</tr>\n<tr>\n<td>deprecation</td>\n<td>抑制过期方法警告</td>\n</tr>\n<tr>\n<td>fallthrough</td>\n<td>抑制在 switch 中缺失 breaks 的警告</td>\n</tr>\n<tr>\n<td>finally</td>\n<td>抑制 finally 模块没有返回的警告</td>\n</tr>\n<tr>\n<td>hiding</td>\n<td>抑制相对于隐藏变量的局部变量的警告</td>\n</tr>\n<tr>\n<td>incomplete-switch</td>\n<td>忽略不完整的 switch 语句</td>\n</tr>\n<tr>\n<td>nls</td>\n<td>忽略非 nls 格式的字符</td>\n</tr>\n<tr>\n<td>null</td>\n<td>忽略对 null 的操作</td>\n</tr>\n<tr>\n<td>rawtypes</td>\n<td>使用 generics 时忽略没有指定相应的类型</td>\n</tr>\n<tr>\n<td>restriction</td>\n<td>抑制禁止使用劝阻或禁止引用的警告</td>\n</tr>\n<tr>\n<td>serial</td>\n<td>忽略在 serializable 类中没有声明 serialVersionUID 变量</td>\n</tr>\n<tr>\n<td>static-access</td>\n<td>抑制不正确的静态访问方式警告</td>\n</tr>\n<tr>\n<td>synthetic-access</td>\n<td>抑制子类没有按最优方法访问内部类的警告</td>\n</tr>\n<tr>\n<td>unchecked</td>\n<td>抑制没有进行类型检查操作的警告</td>\n</tr>\n<tr>\n<td>unqualified-field-access</td>\n<td>抑制没有权限访问的域的警告</td>\n</tr>\n<tr>\n<td>unused</td>\n<td>抑制没被使用过的代码的警告</td>\n</tr>\n</tbody></table>"},{"title":"记一次 RocketMQ broker 因内存不足导致的启动失败","date":"2021-01-11T16:00:00.000Z","updated":"2021-01-11T16:00:00.000Z","_content":"\n## 背景\n\n**该小节交代问题发生的背景，急需解决问题的小伙伴，可以跳过本节，直接看下一小节**。\n\n因为项目提测，需要搭建一套测试环境。所以呢，是时候展示真正的技术啦！在搞定了容器、中间件、项目镜像后，小西登录系统对各大模块的功能进行测试。事情到了这里，小西本来应该会就这样愉快地完成了部署任务，可是生活总是会给你带来意想不到的“惊喜”。\n\n- 在测试一类预警事件消息时，忽然发现压根没有消息，就去 RocketMQ 的控制台界面查看，发现控制台原本应该乖乖被监控的 broker 一个都不在了。\n\n- 在不考虑 broker 不会自己罢工跑掉的情况下，登录服务器查看 broker 服务，发现服务没有启动成功。\n\n- 再查看 broker 的启动日志，发现启动报错了。\n\n于是，就有了这篇分享。\n\n---\n\n<!--more-->\n\n---\n\n## 部署环境\n\n操作系统：centos7 linux 系统\n\n部署方式：docker 容器 + docker-compose 容器编排\n\n部署版本：RocketMQ 4.4.0\n\n## 问题描述\n\n开发环境访问 RocketMQ 控制台，发现 broker 服务宕机。登录服务器查看日志发现以下报错：\n\n```\nJava HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 7163871232, 0) failed; error=\n ...\n#\n# There is insufficient memory for the Java Runtime Environment to continue.\n# Native memory allocation (mmap) failed to map 7163871232 bytes for Failed to commit area from 0x00000000c0000000 to\n ...\n```\n\n提示内存分配无法满足 7163871232 字节的需求。那为什么会出现这个问题呢？\n\n## 问题定位\n\n### 重启broker\n\n刚开始没有排查日志时，以为环境被人停掉了，所以对 broker 进行了重启。\n\n```shell\n[root@172-30-1-135 nginx]# docker-compose restart\n```\n\n发现 broker 启动依旧失败，而 namesrv 和 console 启动正常。\n\n### 分析启动脚本\n\n登录 RocketMQ 的 docker 容器。\n\n注意：**因为 broker 无法启动，使用 docker exec 是无法进入容器的，需要使用 docker run 命令进入容器**。\n\n```shell\n[root@37-128-28-177 nginx]# docker run -it rocketmqinc/rocketmq:4.4.0 bash\n```\n\n查看启动脚本 broker.sh\n\n```shell\n[rocketmq@38bc66dd72c3 bin]$ vi runbroker.sh\n```\n\n发现 runbroker.sh 启动脚本中有最大允许堆内存的配置项 `MAX_POSSIBLE_HEAP` 。\n\n```shell\n...\n# Get the max heap used by a jvm, which used all the ram available to the container.\nif [ -z \"$MAX_POSSIBLE_HEAP\" ]\nthen\n        MAX_POSSIBLE_RAM_STR=$(java -XX:+UnlockExperimentalVMOptions -XX:MaxRAMFraction=1 -XshowSettings:vm -version |& awk '/Max\\. Heap Size \\(Estimated\\): [0-9KMG]+/{ print $5}')\n        MAX_POSSIBLE_RAM=$MAX_POSSIBLE_RAM_STR\n        CAL_UNIT=${MAX_POSSIBLE_RAM_STR: -1}\n        if [ \"$CAL_UNIT\" == \"G\" -o \"$CAL_UNIT\" == \"g\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024 \\* 1024 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        elif [ \"$CAL_UNIT\" == \"M\" -o \"$CAL_UNIT\" == \"m\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        elif [ \"$CAL_UNIT\" == \"K\" -o \"$CAL_UNIT\" == \"k\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        fi\n        MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]\nfi\n\n# Dynamically calculate parameters, for reference.\nXms=$MAX_POSSIBLE_HEAP\nXmx=$MAX_POSSIBLE_HEAP\nXmn=$[MAX_POSSIBLE_HEAP/2]\n...\n```\n\n从脚本中可以看出，在 runborker.sh 脚本中， `MAX_POSSIBLE_HEAP` 参数值会通过参数进行设置，而如果没有任何设置就会走下面这个判断：\n\n```shell\nMAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]\n```\n\n也就是说 `MAX_POSSIBLE_HEAP` 参数如果没有指定，它会使用四分之一的最大可用内存 `MAX_POSSIBLE_RAM` ，这一机制可以保护服务器的操作系统不会因为被服务占据全部内存而无法正常运行。但当服务器的可用内存较小时，这个四分之一对于 RocketMQ 来说就有些“捉襟见肘”了。所以，也就导致了 RocketMQ 因内存不足而无法启动。\n\n分析出原因以后，就可以考虑通过**显式指定参数**的方式解决这个问题。\n\n## 解决方案\n\n### 方案一：修改最大堆内存\n\n退出 docker 容器，修改 RocketMQ 服务 `docker-compose.yml` 文件，给 broker 指定 `MAX_POSSIBLE_HEAP` 参数，指定为 `1024m`\n\n```shell\nbroker:\n    image: rocketmqinc/rocketmq:4.4.0\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    volumes:\n      - /data/admin/app/yunying/mq/logs/broker:/home/rocketmq/logs\n      - /data/admin/app/yunying/mq/broker:/home/rocketmq/store\n      - /data/admin/app/yunying/mq/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf\n    command: sh  mqbroker -n 172.30.1.135:9876 -c /opt/rocketmq-4.4.0/conf/broker.conf\n    depends_on:\n      - namesrv\n    environment:\n      - \"autoCreateTopicEnable=true\"\n      - \"JAVA_HOME=/usr/lib/jvm/jre\"\n      # 指定堆内存大小\n      - \"MAX_POSSIBLE_HEAP=1024m\"\n      - TZ=Asia/Shanghai\n```\n\n重启 broker。查看日志，发现以下报错。\n\n```\n/opt/rocketmq-4.4.0/bin/runbroker.sh: line 58: 1024m: value too great for base (error token is \"1024m\")\n1\n```\n\n由于原始问题报错信息中的单位是 bytes，考虑到参数单位可能与 JVM 内存设置参数不同，再次修改堆内存配置。\n\n重启 broker，启动成功。\n\n```shell\n[admin@zw-yunying-172.30.1.135 mq]$ docker logs -f --tail 10 rmqbroker\nThe broker[broker-a, 172.30.1.135:10911] boot success. serializeType=JSON and name server is 172.30.1.135:9876\n```\n\n至此，问题解决。\n\n### 方案二：修改JVM元空间大小\n\n本方案是网上查找资料发现的解决方案，报错问题类似但不完全一致。该方案没有做验证，不确定是否能够解决该问题。\n\n感兴趣的小伙伴可以验证一下，下面是问题描述和解决方案。\n\n问题描述为：\n\n```\nJRE version: (8.0_172-b11) (build )\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode linux-amd64 compressed oops)\nJava运行时环境的内存不足，无法继续，本机内存分配（mmap）未能映射8589934592字节，用于提交保留内存\n```\n\n解决方案如下：\n\n找到 runserver.sh 和 runbroker.sh，编辑\n\n```shell\nJAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx1024m -Xmn125m -XX:MetaspaceSize=1024m -XX:MaxMetaspaceSize=1024m”\n1\n```\n\n\n\n## 参考资料\n\n- [搭建RocketMQ踩的坑-内存不足](https://blog.csdn.net/u014362882/article/details/80422136) ","source":"_posts/记一次 RocketMQ-broker因内存不足导致的启动失败 (copy).md","raw":"---\ntitle: 记一次 RocketMQ broker 因内存不足导致的启动失败\ndate: 2021-01-12\nupdated: 2021-01-12\ncategories:\n- RocketMQ\ntags:\n- 消息中间件\n- RocketMQ\n---\n\n## 背景\n\n**该小节交代问题发生的背景，急需解决问题的小伙伴，可以跳过本节，直接看下一小节**。\n\n因为项目提测，需要搭建一套测试环境。所以呢，是时候展示真正的技术啦！在搞定了容器、中间件、项目镜像后，小西登录系统对各大模块的功能进行测试。事情到了这里，小西本来应该会就这样愉快地完成了部署任务，可是生活总是会给你带来意想不到的“惊喜”。\n\n- 在测试一类预警事件消息时，忽然发现压根没有消息，就去 RocketMQ 的控制台界面查看，发现控制台原本应该乖乖被监控的 broker 一个都不在了。\n\n- 在不考虑 broker 不会自己罢工跑掉的情况下，登录服务器查看 broker 服务，发现服务没有启动成功。\n\n- 再查看 broker 的启动日志，发现启动报错了。\n\n于是，就有了这篇分享。\n\n---\n\n<!--more-->\n\n---\n\n## 部署环境\n\n操作系统：centos7 linux 系统\n\n部署方式：docker 容器 + docker-compose 容器编排\n\n部署版本：RocketMQ 4.4.0\n\n## 问题描述\n\n开发环境访问 RocketMQ 控制台，发现 broker 服务宕机。登录服务器查看日志发现以下报错：\n\n```\nJava HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 7163871232, 0) failed; error=\n ...\n#\n# There is insufficient memory for the Java Runtime Environment to continue.\n# Native memory allocation (mmap) failed to map 7163871232 bytes for Failed to commit area from 0x00000000c0000000 to\n ...\n```\n\n提示内存分配无法满足 7163871232 字节的需求。那为什么会出现这个问题呢？\n\n## 问题定位\n\n### 重启broker\n\n刚开始没有排查日志时，以为环境被人停掉了，所以对 broker 进行了重启。\n\n```shell\n[root@172-30-1-135 nginx]# docker-compose restart\n```\n\n发现 broker 启动依旧失败，而 namesrv 和 console 启动正常。\n\n### 分析启动脚本\n\n登录 RocketMQ 的 docker 容器。\n\n注意：**因为 broker 无法启动，使用 docker exec 是无法进入容器的，需要使用 docker run 命令进入容器**。\n\n```shell\n[root@37-128-28-177 nginx]# docker run -it rocketmqinc/rocketmq:4.4.0 bash\n```\n\n查看启动脚本 broker.sh\n\n```shell\n[rocketmq@38bc66dd72c3 bin]$ vi runbroker.sh\n```\n\n发现 runbroker.sh 启动脚本中有最大允许堆内存的配置项 `MAX_POSSIBLE_HEAP` 。\n\n```shell\n...\n# Get the max heap used by a jvm, which used all the ram available to the container.\nif [ -z \"$MAX_POSSIBLE_HEAP\" ]\nthen\n        MAX_POSSIBLE_RAM_STR=$(java -XX:+UnlockExperimentalVMOptions -XX:MaxRAMFraction=1 -XshowSettings:vm -version |& awk '/Max\\. Heap Size \\(Estimated\\): [0-9KMG]+/{ print $5}')\n        MAX_POSSIBLE_RAM=$MAX_POSSIBLE_RAM_STR\n        CAL_UNIT=${MAX_POSSIBLE_RAM_STR: -1}\n        if [ \"$CAL_UNIT\" == \"G\" -o \"$CAL_UNIT\" == \"g\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024 \\* 1024 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        elif [ \"$CAL_UNIT\" == \"M\" -o \"$CAL_UNIT\" == \"m\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        elif [ \"$CAL_UNIT\" == \"K\" -o \"$CAL_UNIT\" == \"k\" ]; then\n                MAX_POSSIBLE_RAM=$(echo ${MAX_POSSIBLE_RAM_STR:0:${#MAX_POSSIBLE_RAM_STR}-1} `expr 1 \\* 1024` | awk '{printf \"%d\",$1*$2}')\n        fi\n        MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]\nfi\n\n# Dynamically calculate parameters, for reference.\nXms=$MAX_POSSIBLE_HEAP\nXmx=$MAX_POSSIBLE_HEAP\nXmn=$[MAX_POSSIBLE_HEAP/2]\n...\n```\n\n从脚本中可以看出，在 runborker.sh 脚本中， `MAX_POSSIBLE_HEAP` 参数值会通过参数进行设置，而如果没有任何设置就会走下面这个判断：\n\n```shell\nMAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]\n```\n\n也就是说 `MAX_POSSIBLE_HEAP` 参数如果没有指定，它会使用四分之一的最大可用内存 `MAX_POSSIBLE_RAM` ，这一机制可以保护服务器的操作系统不会因为被服务占据全部内存而无法正常运行。但当服务器的可用内存较小时，这个四分之一对于 RocketMQ 来说就有些“捉襟见肘”了。所以，也就导致了 RocketMQ 因内存不足而无法启动。\n\n分析出原因以后，就可以考虑通过**显式指定参数**的方式解决这个问题。\n\n## 解决方案\n\n### 方案一：修改最大堆内存\n\n退出 docker 容器，修改 RocketMQ 服务 `docker-compose.yml` 文件，给 broker 指定 `MAX_POSSIBLE_HEAP` 参数，指定为 `1024m`\n\n```shell\nbroker:\n    image: rocketmqinc/rocketmq:4.4.0\n    container_name: rmqbroker\n    ports:\n      - 10909:10909\n      - 10911:10911\n      - 10912:10912\n    volumes:\n      - /data/admin/app/yunying/mq/logs/broker:/home/rocketmq/logs\n      - /data/admin/app/yunying/mq/broker:/home/rocketmq/store\n      - /data/admin/app/yunying/mq/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf\n    command: sh  mqbroker -n 172.30.1.135:9876 -c /opt/rocketmq-4.4.0/conf/broker.conf\n    depends_on:\n      - namesrv\n    environment:\n      - \"autoCreateTopicEnable=true\"\n      - \"JAVA_HOME=/usr/lib/jvm/jre\"\n      # 指定堆内存大小\n      - \"MAX_POSSIBLE_HEAP=1024m\"\n      - TZ=Asia/Shanghai\n```\n\n重启 broker。查看日志，发现以下报错。\n\n```\n/opt/rocketmq-4.4.0/bin/runbroker.sh: line 58: 1024m: value too great for base (error token is \"1024m\")\n1\n```\n\n由于原始问题报错信息中的单位是 bytes，考虑到参数单位可能与 JVM 内存设置参数不同，再次修改堆内存配置。\n\n重启 broker，启动成功。\n\n```shell\n[admin@zw-yunying-172.30.1.135 mq]$ docker logs -f --tail 10 rmqbroker\nThe broker[broker-a, 172.30.1.135:10911] boot success. serializeType=JSON and name server is 172.30.1.135:9876\n```\n\n至此，问题解决。\n\n### 方案二：修改JVM元空间大小\n\n本方案是网上查找资料发现的解决方案，报错问题类似但不完全一致。该方案没有做验证，不确定是否能够解决该问题。\n\n感兴趣的小伙伴可以验证一下，下面是问题描述和解决方案。\n\n问题描述为：\n\n```\nJRE version: (8.0_172-b11) (build )\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode linux-amd64 compressed oops)\nJava运行时环境的内存不足，无法继续，本机内存分配（mmap）未能映射8589934592字节，用于提交保留内存\n```\n\n解决方案如下：\n\n找到 runserver.sh 和 runbroker.sh，编辑\n\n```shell\nJAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx1024m -Xmn125m -XX:MetaspaceSize=1024m -XX:MaxMetaspaceSize=1024m”\n1\n```\n\n\n\n## 参考资料\n\n- [搭建RocketMQ踩的坑-内存不足](https://blog.csdn.net/u014362882/article/details/80422136) ","slug":"记一次 RocketMQ-broker因内存不足导致的启动失败 (copy)","published":1,"_id":"ckluyhtqh001s546a1orrd63c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><strong>该小节交代问题发生的背景，急需解决问题的小伙伴，可以跳过本节，直接看下一小节</strong>。</p>\n<p>因为项目提测，需要搭建一套测试环境。所以呢，是时候展示真正的技术啦！在搞定了容器、中间件、项目镜像后，小西登录系统对各大模块的功能进行测试。事情到了这里，小西本来应该会就这样愉快地完成了部署任务，可是生活总是会给你带来意想不到的“惊喜”。</p>\n<ul>\n<li><p>在测试一类预警事件消息时，忽然发现压根没有消息，就去 RocketMQ 的控制台界面查看，发现控制台原本应该乖乖被监控的 broker 一个都不在了。</p>\n</li>\n<li><p>在不考虑 broker 不会自己罢工跑掉的情况下，登录服务器查看 broker 服务，发现服务没有启动成功。</p>\n</li>\n<li><p>再查看 broker 的启动日志，发现启动报错了。</p>\n</li>\n</ul>\n<p>于是，就有了这篇分享。</p>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h2><p>操作系统：centos7 linux 系统</p>\n<p>部署方式：docker 容器 + docker-compose 容器编排</p>\n<p>部署版本：RocketMQ 4.4.0</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>开发环境访问 RocketMQ 控制台，发现 broker 服务宕机。登录服务器查看日志发现以下报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 7163871232, 0) failed; error&#x3D;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">#</span><br><span class=\"line\"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\"># Native memory allocation (mmap) failed to map 7163871232 bytes for Failed to commit area from 0x00000000c0000000 to</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>提示内存分配无法满足 7163871232 字节的需求。那为什么会出现这个问题呢？</p>\n<h2 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h2><h3 id=\"重启broker\"><a href=\"#重启broker\" class=\"headerlink\" title=\"重启broker\"></a>重启broker</h3><p>刚开始没有排查日志时，以为环境被人停掉了，所以对 broker 进行了重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-30-1-135 nginx]# docker-compose restart</span><br></pre></td></tr></table></figure>\n\n<p>发现 broker 启动依旧失败，而 namesrv 和 console 启动正常。</p>\n<h3 id=\"分析启动脚本\"><a href=\"#分析启动脚本\" class=\"headerlink\" title=\"分析启动脚本\"></a>分析启动脚本</h3><p>登录 RocketMQ 的 docker 容器。</p>\n<p>注意：<strong>因为 broker 无法启动，使用 docker exec 是无法进入容器的，需要使用 docker run 命令进入容器</strong>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@37-128-28-177 nginx]# docker run -it rocketmqinc/rocketmq:4.4.0 bash</span><br></pre></td></tr></table></figure>\n\n<p>查看启动脚本 broker.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rocketmq@38bc66dd72c3 bin]$ vi runbroker.sh</span><br></pre></td></tr></table></figure>\n\n<p>发现 runbroker.sh 启动脚本中有最大允许堆内存的配置项 <code>MAX_POSSIBLE_HEAP</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Get the max heap used by a jvm, <span class=\"built_in\">which</span> used all the ram available to the container.</span></span><br><span class=\"line\">if [ -z &quot;$MAX_POSSIBLE_HEAP&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        MAX_POSSIBLE_RAM_STR=$(java -XX:+UnlockExperimentalVMOptions -XX:MaxRAMFraction=1 -XshowSettings:vm -version |&amp; awk &#x27;/Max\\. Heap Size \\(Estimated\\): [0-9KMG]+/&#123; print $5&#125;&#x27;)</span><br><span class=\"line\">        MAX_POSSIBLE_RAM=$MAX_POSSIBLE_RAM_STR</span><br><span class=\"line\">        CAL_UNIT=$&#123;MAX_POSSIBLE_RAM_STR: -1&#125;</span><br><span class=\"line\">        if [ &quot;$CAL_UNIT&quot; == &quot;G&quot; -o &quot;$CAL_UNIT&quot; == &quot;g&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024 \\* 1024 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        elif [ &quot;$CAL_UNIT&quot; == &quot;M&quot; -o &quot;$CAL_UNIT&quot; == &quot;m&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        elif [ &quot;$CAL_UNIT&quot; == &quot;K&quot; -o &quot;$CAL_UNIT&quot; == &quot;k&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Dynamically calculate parameters, <span class=\"keyword\">for</span> reference.</span></span><br><span class=\"line\">Xms=$MAX_POSSIBLE_HEAP</span><br><span class=\"line\">Xmx=$MAX_POSSIBLE_HEAP</span><br><span class=\"line\">Xmn=$[MAX_POSSIBLE_HEAP/2]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>从脚本中可以看出，在 runborker.sh 脚本中， <code>MAX_POSSIBLE_HEAP</code> 参数值会通过参数进行设置，而如果没有任何设置就会走下面这个判断：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]</span><br></pre></td></tr></table></figure>\n\n<p>也就是说 <code>MAX_POSSIBLE_HEAP</code> 参数如果没有指定，它会使用四分之一的最大可用内存 <code>MAX_POSSIBLE_RAM</code> ，这一机制可以保护服务器的操作系统不会因为被服务占据全部内存而无法正常运行。但当服务器的可用内存较小时，这个四分之一对于 RocketMQ 来说就有些“捉襟见肘”了。所以，也就导致了 RocketMQ 因内存不足而无法启动。</p>\n<p>分析出原因以后，就可以考虑通过<strong>显式指定参数</strong>的方式解决这个问题。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一：修改最大堆内存\"><a href=\"#方案一：修改最大堆内存\" class=\"headerlink\" title=\"方案一：修改最大堆内存\"></a>方案一：修改最大堆内存</h3><p>退出 docker 容器，修改 RocketMQ 服务 <code>docker-compose.yml</code> 文件，给 broker 指定 <code>MAX_POSSIBLE_HEAP</code> 参数，指定为 <code>1024m</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broker:</span><br><span class=\"line\">    image: rocketmqinc/rocketmq:4.4.0</span><br><span class=\"line\">    container_name: rmqbroker</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10909:10909</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">      - 10912:10912</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/logs/broker:/home/rocketmq/logs</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/broker:/home/rocketmq/store</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf</span><br><span class=\"line\">    command: sh  mqbroker -n 172.30.1.135:9876 -c /opt/rocketmq-4.4.0/conf/broker.conf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - namesrv</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;autoCreateTopicEnable=true&quot;</span><br><span class=\"line\">      - &quot;JAVA_HOME=/usr/lib/jvm/jre&quot;</span><br><span class=\"line\">      # 指定堆内存大小</span><br><span class=\"line\">      - &quot;MAX_POSSIBLE_HEAP=1024m&quot;</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br></pre></td></tr></table></figure>\n\n<p>重启 broker。查看日志，发现以下报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;opt&#x2F;rocketmq-4.4.0&#x2F;bin&#x2F;runbroker.sh: line 58: 1024m: value too great for base (error token is &quot;1024m&quot;)</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>由于原始问题报错信息中的单位是 bytes，考虑到参数单位可能与 JVM 内存设置参数不同，再次修改堆内存配置。</p>\n<p>重启 broker，启动成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[admin@zw-yunying-172.30.1.135 mq]$ docker logs -f --tail 10 rmqbroker</span><br><span class=\"line\">The broker[broker-a, 172.30.1.135:10911] boot success. serializeType=JSON and name server is 172.30.1.135:9876</span><br></pre></td></tr></table></figure>\n\n<p>至此，问题解决。</p>\n<h3 id=\"方案二：修改JVM元空间大小\"><a href=\"#方案二：修改JVM元空间大小\" class=\"headerlink\" title=\"方案二：修改JVM元空间大小\"></a>方案二：修改JVM元空间大小</h3><p>本方案是网上查找资料发现的解决方案，报错问题类似但不完全一致。该方案没有做验证，不确定是否能够解决该问题。</p>\n<p>感兴趣的小伙伴可以验证一下，下面是问题描述和解决方案。</p>\n<p>问题描述为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JRE version: (8.0_172-b11) (build )</span><br><span class=\"line\">Java VM: Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode linux-amd64 compressed oops)</span><br><span class=\"line\">Java运行时环境的内存不足，无法继续，本机内存分配（mmap）未能映射8589934592字节，用于提交保留内存</span><br></pre></td></tr></table></figure>\n\n<p>解决方案如下：</p>\n<p>找到 runserver.sh 和 runbroker.sh，编辑</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPT=”$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx1024m -Xmn125m -XX:MetaspaceSize=1024m -XX:MaxMetaspaceSize=1024m”</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/u014362882/article/details/80422136\">搭建RocketMQ踩的坑-内存不足</a> </li>\n</ul>\n","site":{"data":{}},"length":4310,"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><strong>该小节交代问题发生的背景，急需解决问题的小伙伴，可以跳过本节，直接看下一小节</strong>。</p>\n<p>因为项目提测，需要搭建一套测试环境。所以呢，是时候展示真正的技术啦！在搞定了容器、中间件、项目镜像后，小西登录系统对各大模块的功能进行测试。事情到了这里，小西本来应该会就这样愉快地完成了部署任务，可是生活总是会给你带来意想不到的“惊喜”。</p>\n<ul>\n<li><p>在测试一类预警事件消息时，忽然发现压根没有消息，就去 RocketMQ 的控制台界面查看，发现控制台原本应该乖乖被监控的 broker 一个都不在了。</p>\n</li>\n<li><p>在不考虑 broker 不会自己罢工跑掉的情况下，登录服务器查看 broker 服务，发现服务没有启动成功。</p>\n</li>\n<li><p>再查看 broker 的启动日志，发现启动报错了。</p>\n</li>\n</ul>\n<p>于是，就有了这篇分享。</p>\n<hr>","more":"<hr>\n<h2 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h2><p>操作系统：centos7 linux 系统</p>\n<p>部署方式：docker 容器 + docker-compose 容器编排</p>\n<p>部署版本：RocketMQ 4.4.0</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>开发环境访问 RocketMQ 控制台，发现 broker 服务宕机。登录服务器查看日志发现以下报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 7163871232, 0) failed; error&#x3D;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">#</span><br><span class=\"line\"># There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class=\"line\"># Native memory allocation (mmap) failed to map 7163871232 bytes for Failed to commit area from 0x00000000c0000000 to</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n<p>提示内存分配无法满足 7163871232 字节的需求。那为什么会出现这个问题呢？</p>\n<h2 id=\"问题定位\"><a href=\"#问题定位\" class=\"headerlink\" title=\"问题定位\"></a>问题定位</h2><h3 id=\"重启broker\"><a href=\"#重启broker\" class=\"headerlink\" title=\"重启broker\"></a>重启broker</h3><p>刚开始没有排查日志时，以为环境被人停掉了，所以对 broker 进行了重启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@172-30-1-135 nginx]# docker-compose restart</span><br></pre></td></tr></table></figure>\n\n<p>发现 broker 启动依旧失败，而 namesrv 和 console 启动正常。</p>\n<h3 id=\"分析启动脚本\"><a href=\"#分析启动脚本\" class=\"headerlink\" title=\"分析启动脚本\"></a>分析启动脚本</h3><p>登录 RocketMQ 的 docker 容器。</p>\n<p>注意：<strong>因为 broker 无法启动，使用 docker exec 是无法进入容器的，需要使用 docker run 命令进入容器</strong>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@37-128-28-177 nginx]# docker run -it rocketmqinc/rocketmq:4.4.0 bash</span><br></pre></td></tr></table></figure>\n\n<p>查看启动脚本 broker.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[rocketmq@38bc66dd72c3 bin]$ vi runbroker.sh</span><br></pre></td></tr></table></figure>\n\n<p>发现 runbroker.sh 启动脚本中有最大允许堆内存的配置项 <code>MAX_POSSIBLE_HEAP</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Get the max heap used by a jvm, <span class=\"built_in\">which</span> used all the ram available to the container.</span></span><br><span class=\"line\">if [ -z &quot;$MAX_POSSIBLE_HEAP&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        MAX_POSSIBLE_RAM_STR=$(java -XX:+UnlockExperimentalVMOptions -XX:MaxRAMFraction=1 -XshowSettings:vm -version |&amp; awk &#x27;/Max\\. Heap Size \\(Estimated\\): [0-9KMG]+/&#123; print $5&#125;&#x27;)</span><br><span class=\"line\">        MAX_POSSIBLE_RAM=$MAX_POSSIBLE_RAM_STR</span><br><span class=\"line\">        CAL_UNIT=$&#123;MAX_POSSIBLE_RAM_STR: -1&#125;</span><br><span class=\"line\">        if [ &quot;$CAL_UNIT&quot; == &quot;G&quot; -o &quot;$CAL_UNIT&quot; == &quot;g&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024 \\* 1024 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        elif [ &quot;$CAL_UNIT&quot; == &quot;M&quot; -o &quot;$CAL_UNIT&quot; == &quot;m&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        elif [ &quot;$CAL_UNIT&quot; == &quot;K&quot; -o &quot;$CAL_UNIT&quot; == &quot;k&quot; ]; then</span><br><span class=\"line\">                MAX_POSSIBLE_RAM=$(echo $&#123;MAX_POSSIBLE_RAM_STR:0:$&#123;#MAX_POSSIBLE_RAM_STR&#125;-1&#125; `expr 1 \\* 1024` | awk &#x27;&#123;printf &quot;%d&quot;,$1*$2&#125;&#x27;)</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Dynamically calculate parameters, <span class=\"keyword\">for</span> reference.</span></span><br><span class=\"line\">Xms=$MAX_POSSIBLE_HEAP</span><br><span class=\"line\">Xmx=$MAX_POSSIBLE_HEAP</span><br><span class=\"line\">Xmn=$[MAX_POSSIBLE_HEAP/2]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>从脚本中可以看出，在 runborker.sh 脚本中， <code>MAX_POSSIBLE_HEAP</code> 参数值会通过参数进行设置，而如果没有任何设置就会走下面这个判断：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_POSSIBLE_HEAP=$[MAX_POSSIBLE_RAM/4]</span><br></pre></td></tr></table></figure>\n\n<p>也就是说 <code>MAX_POSSIBLE_HEAP</code> 参数如果没有指定，它会使用四分之一的最大可用内存 <code>MAX_POSSIBLE_RAM</code> ，这一机制可以保护服务器的操作系统不会因为被服务占据全部内存而无法正常运行。但当服务器的可用内存较小时，这个四分之一对于 RocketMQ 来说就有些“捉襟见肘”了。所以，也就导致了 RocketMQ 因内存不足而无法启动。</p>\n<p>分析出原因以后，就可以考虑通过<strong>显式指定参数</strong>的方式解决这个问题。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案一：修改最大堆内存\"><a href=\"#方案一：修改最大堆内存\" class=\"headerlink\" title=\"方案一：修改最大堆内存\"></a>方案一：修改最大堆内存</h3><p>退出 docker 容器，修改 RocketMQ 服务 <code>docker-compose.yml</code> 文件，给 broker 指定 <code>MAX_POSSIBLE_HEAP</code> 参数，指定为 <code>1024m</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broker:</span><br><span class=\"line\">    image: rocketmqinc/rocketmq:4.4.0</span><br><span class=\"line\">    container_name: rmqbroker</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10909:10909</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">      - 10912:10912</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/logs/broker:/home/rocketmq/logs</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/broker:/home/rocketmq/store</span><br><span class=\"line\">      - /data/admin/app/yunying/mq/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf</span><br><span class=\"line\">    command: sh  mqbroker -n 172.30.1.135:9876 -c /opt/rocketmq-4.4.0/conf/broker.conf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - namesrv</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;autoCreateTopicEnable=true&quot;</span><br><span class=\"line\">      - &quot;JAVA_HOME=/usr/lib/jvm/jre&quot;</span><br><span class=\"line\">      # 指定堆内存大小</span><br><span class=\"line\">      - &quot;MAX_POSSIBLE_HEAP=1024m&quot;</span><br><span class=\"line\">      - TZ=Asia/Shanghai</span><br></pre></td></tr></table></figure>\n\n<p>重启 broker。查看日志，发现以下报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;opt&#x2F;rocketmq-4.4.0&#x2F;bin&#x2F;runbroker.sh: line 58: 1024m: value too great for base (error token is &quot;1024m&quot;)</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>由于原始问题报错信息中的单位是 bytes，考虑到参数单位可能与 JVM 内存设置参数不同，再次修改堆内存配置。</p>\n<p>重启 broker，启动成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[admin@zw-yunying-172.30.1.135 mq]$ docker logs -f --tail 10 rmqbroker</span><br><span class=\"line\">The broker[broker-a, 172.30.1.135:10911] boot success. serializeType=JSON and name server is 172.30.1.135:9876</span><br></pre></td></tr></table></figure>\n\n<p>至此，问题解决。</p>\n<h3 id=\"方案二：修改JVM元空间大小\"><a href=\"#方案二：修改JVM元空间大小\" class=\"headerlink\" title=\"方案二：修改JVM元空间大小\"></a>方案二：修改JVM元空间大小</h3><p>本方案是网上查找资料发现的解决方案，报错问题类似但不完全一致。该方案没有做验证，不确定是否能够解决该问题。</p>\n<p>感兴趣的小伙伴可以验证一下，下面是问题描述和解决方案。</p>\n<p>问题描述为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JRE version: (8.0_172-b11) (build )</span><br><span class=\"line\">Java VM: Java HotSpot(TM) 64-Bit Server VM (25.172-b11 mixed mode linux-amd64 compressed oops)</span><br><span class=\"line\">Java运行时环境的内存不足，无法继续，本机内存分配（mmap）未能映射8589934592字节，用于提交保留内存</span><br></pre></td></tr></table></figure>\n\n<p>解决方案如下：</p>\n<p>找到 runserver.sh 和 runbroker.sh，编辑</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPT=”$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx1024m -Xmn125m -XX:MetaspaceSize=1024m -XX:MaxMetaspaceSize=1024m”</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://blog.csdn.net/u014362882/article/details/80422136\">搭建RocketMQ踩的坑-内存不足</a> </li>\n</ul>"},{"title":"必知必会面试题之 Java 基础","date":"2021-01-23T16:00:00.000Z","updated":"2021-01-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [数据计量单位](#数据计量单位) \n- [面向对象三大特性](#面向对象三大特性) \n- [基础数据类型](#基础数据类型) \n- [注释格式](#注释格式) \n\n---\n\n<!--more-->\n\n---\n\n- [访问修饰符](#访问修饰符) \n- [运算符](#运算符) \n  - [算数运算符](#算数运算符) \n  - [关系运算符](#关系运算符) \n  - [位运算符](#位运算符) \n  - [逻辑运算符](#逻辑运算符) \n  - [赋值运算符](#赋值运算符) \n  - [三目表达式](#三目表达式) \n  - [运算符优先级](#运算符优先级) \n- [拷贝](拷贝) \n  - [什么是浅拷贝？](#什么是浅拷贝？) \n  - [什么是浅拷贝？](#什么是浅拷贝？) \n- [重写与重载](#重写与重载) \n  - [什么是重写？](#什么是重写？) \n  - [什么是重载？](#什么是重载？) \n  - [重写与重载的区别](#重写与重载的区别) \n- [引用传递与值传递](#引用传递与值传递) \n- [类加载机制](#类加载机制) \n  - [什么是双亲委派？](#什么是双亲委派？) \n  - [如何打破双亲委派？](#如何打破双亲委派？) \n- [Java 内存模型](#Java内存模型) \n  - [缓存一致性协议](#缓存一致性协议) \n  - [缓存行](#缓存行) \n  - [缓存行对齐](#缓存行对齐) \n  - [合并写](#合并写) \n  - [Java 内存模型包括哪些东西？](#Java内存模型包括哪些东西？) \n  - [Java 内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？](#Java内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？) \n  - [Java 八大原子操作](#Java八大原子操作) \n\n### 数据计量单位\n\n8bit(位)=1Byte(字节) \n\n1024Byte(字节)=1KB\n\n1024KB=1MB\n\n1024MB=1GB\n\n1024GB=1TB\n\n1024TB=PB\n\n1024PB=1EB\n\n1024EB=1ZB\n\n1024ZB=1YB\n\n1024YB=1BB\n\n### 面向对象三大特性\n\n封装：**隐藏不想对外暴露的信息**，提高安全性；**抽取公共代码**，提高可复用性。\n\n继承：**继承为类的扩展提供了一种方式**。有利于修改公共属性或方法，父类修改，所有子类无需重复修改。\n\n多态：类的**多态体现在重写和重载**，重写通过继承来实现，重载通过相同方法的不同参数来实现。\n\n### 基础数据类型\n\n| 数据类型 | 位数 | 取值范围                                                     | 可转类型                 |\n| -------- | ---- | ------------------------------------------------------------ | ------------------------ |\n| byte     | 8    | -128 ~ 127（-2^7 ~ 2^7-1）                                   |                          |\n| short    | 16   | -32,768 ~ 32,767（-2^15 ~ 2^15-1）                           | int、long、float、double |\n| int      | 32   | -2,147,483,648 ~ 2,147,483,647（-2^31 ~ 2^31-1）             | long、float、double      |\n| long     | 64   | -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807（-2^63 ~ 2^63-1） | int、long、float、double |\n| float    | 32   |                                                              | double                   |\n| double   | 64   |                                                              |                          |\n| char     | 16   | \\u0000 ~ \\uffff（65 ~ 535）                                  | int、long、float、double |\n| boolean  | 1    | true、false                                                  |                          |\n\n### 注释格式\n\n- 单行注释：\n\n  ```java\n  // this is a comment\n  ```\n\n- 多行注释：\n\n  ```java\n  /* this is a comment */\n  ```\n\n- 文档注释：\n\n  ```java\n  /**\n   * this is a comment\n   */\n  ```\n\n### 访问修饰符\n\n| 修饰符    | 当前类 | 同包 | 子类 | 其他包 |\n| --------- | ------ | ---- | ---- | ------ |\n| private   | √      | ×    | ×    | ×      |\n| default   | √      | √    | ×    | ×      |\n| protected | √      | √    | √    | ×      |\n| public    | √      | √    | √    | √      |\n\n### 运算符\n\n#### 算数运算符\n\n| 操作符 | 描述                              | 例子                   |\n| :----- | :-------------------------------- | :--------------------- |\n| +      | 加法 - 相加运算符两侧的值         | A + B = 30             |\n| -      | 减法 - 左操作数减去右操作数       | A – B = -10            |\n| *      | 乘法 - 相乘操作符两侧的值         | A * B = 200            |\n| /      | 除法 - 左操作数除以右操作数       | B / A = 2              |\n| ％     | 取余 - 左操作数除以右操作数的余数 | B % A = 0              |\n| ++     | 自增: 操作数的值增加1             | B++ = 21 或 ++B = 21   |\n| --     | 自减: 操作数的值减少1             | B-- == 19 或 --B == 19 |\n\n#### 关系运算符\n\n| 运算符 | 描述                                                         | 例子            |\n| :----- | :----------------------------------------------------------- | :-------------- |\n| ==     | 检查如果两个操作数的值是否相等，如果相等则条件为真。         | (A == B) 为假。 |\n| !=     | 检查如果两个操作数的值是否相等，如果值不相等则条件为真。     | (A != B) 为真。 |\n| >      | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。   | (A > B) 为假。  |\n| <      | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。   | (A < B) 为真。  |\n| >=     | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 | (A >= B) 为假。 |\n| <=     | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 | (A <= B) 为真。 |\n\n#### 位运算符\n\n| 操作符 | 描述                                                         | 例子                           |\n| :----- | :----------------------------------------------------------- | :----------------------------- |\n| &      | 与。如果相对应位都是 1，则结果为 1，否则为 0                 | (A & B) 得到12，即 0000 1100   |\n| \\|     | 或。如果相对应位都是 0，则结果为 0，否则为 1                 | (A \\| B) 得到 61，即 0011 1101 |\n| ^      | 异或。如果相对应位值相同，则结果为 0，否则为1                | (A ^ B) 得到 49，即 0011 0001  |\n| ~      | 取反。翻转操作数的每一位，即 0 变成 1，1 变成 0。            | (~A) 得到 -61，即 1100 0011    |\n| <<     | 左移。左操作数按位左移右操作数指定的位数。                   | A << 2 得到 240，即 1111 0000  |\n| >>     | 右移。左操作数按位右移右操作数指定的位数。                   | A >> 2 得到 15，即 1111        |\n| >>>    | 无符号右移。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 | A>>>2 得到 15，即 0000 1111    |\n\n#### 逻辑运算符\n\n| 操作符 | 描述                                                         | 例子              |\n| :----- | :----------------------------------------------------------- | :---------------- |\n| &&     | 逻辑与，也称短路与。当且仅当两个操作数都为真，条件才为真。若第一个操作数为假，则第二个操作数不再判断。 | (A && B) 为假。   |\n| \\|\\|   | 逻辑或，也称短路或。如果任何两个操作数任何一个为真，条件为真。若第一个操作数为假，则第二个操作数不再判断。 | (A \\|\\| B) 为真。 |\n| !      | 逻辑非。用来反转操作数的逻辑状态。如果条件为 true，则使用逻辑非运算符将得到 false。 | !(A && B) 为真。  |\n\n#### 赋值运算符\n\n| 操作符 | 描述                                                         | 例子                                    |\n| :----- | :----------------------------------------------------------- | :-------------------------------------- |\n| =      | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B 将把 A + B 得到的值赋给 C     |\n| +=     | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C += A 等价于 C = C + A                 |\n| -=     | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C -= A 等价于 C = C - A                 |\n| *=     | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C *= A 等价于 C = C * A                 |\n| /=     | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C /= A，C 与 A 同类型时等价于 C = C / A |\n| ％=    | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C ％= A 等价于 C = C ％ A               |\n| <<=    | 左移位赋值运算符                                             | C <<= 2 等价于 C = C << 2               |\n| >>=    | 右移位赋值运算符                                             | C >>= 2 等价于 C = C >> 2               |\n| &=     | 按位与赋值运算符                                             | C &= 2 等价于 C = C & 2                 |\n| ^=     | 按位异或赋值操作符                                           | C ^ = 2 等价于 C = C ^ 2                |\n| \\|=    | 按位或赋值操作符                                             | C \\| = 2 等价于 C = C \\| 2              |\n\n#### 三目表达式\n\n```java\n// 若 a == b 成立，返回 true，否则返回 false\nboolean flag = (a == b) ? true : false\n```\n\n#### 运算符优先级\n\n>  所谓“好记性不如烂笔头”。实际开发中，尽量使用括号来明确优先级，提高代码可读性，而非使用复杂的运算符复合运算。\n>\n>  如：((x++) && (y + 1) || z == 0)\n\n| 优先级 | 运算符                                           | 结合性   |\n| ------ | ------------------------------------------------ | -------- |\n| 1      | ()、[]、{}                                       | 从左向右 |\n| 2      | !、+、-、~、++、--                               | 从右向左 |\n| 3      | *、/、%                                          | 从左向右 |\n| 4      | +、-                                             | 从左向右 |\n| 5      | «、»、>>>                                        | 从左向右 |\n| 6      | <、<=、>、>=、instanceof                         | 从左向右 |\n| 7      | ==、!=                                           | 从左向右 |\n| 8      | &                                                | 从左向右 |\n| 9      | ^                                                | 从左向右 |\n| 10     | \\|                                               | 从左向右 |\n| 11     | &&                                               | 从左向右 |\n| 12     | \\|\\|                                             | 从左向右 |\n| 13     | ?:                                               | 从右向左 |\n| 14     | =、+=、-=、*=、/=、&=、\\|=、^=、~=、«=、»=、>>>= | 从右向左 |\n\n### 拷贝\n\n#### 什么是浅拷贝？\n\n被复制对象的所有变量值与原对象相同，但引用变量仍然指向原来的对象。即浅拷贝只复制对象本身，而不复制对象中引用的对象。\n\n示例：\n\n```java\nTeacher teacher = new Teacher();\nteacher.setName(\"赵大\");\nteacher.setAge(42);\n\nStudent student1 = new Student();\nstudent1.setName(\"张三\");\nstudent1.setAge(21);\nstudent1.setTeacher(teacher);\n\nStudent student2 = (Student) student1.clone();\nSystem.out.println(\"李四\");\nSystem.out.println(student2.getName());\nSystem.out.println(student2.getAge());\nSystem.out.println(student2.getTeacher().getName());\nSystem.out.println(student2.getTeacher().getAge());\n\nSystem.out.println(\"修改老师的信息后-------------\");\n// 修改老师名称\nteacher.setName(\"John\");\n// 两个学生的老师均发生变化\nSystem.out.println(student1.getTeacher().getName());\nSystem.out.println(student2.getTeacher().getName());\n```\n\n#### 什么是深拷贝？\n\n深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。\n\n深拷贝的方法包括：\n\n1. 重写 clone() 方法\n\n   ```java\n   public class Student implements Cloneable {\n   \n     private String  name;\n     private Integer age;\n     private Teacher teacher;\n     \n     // 省略 get/set 方法\n   \n     @Override\n     protected Object clone() throws CloneNotSupportedException {\n       Student3 student = (Student3) super.clone();\n       // 复制一个新的 Teacher 对象实例，并设置到新的 student 对象实例中\n       student.setTeacher((Teacher2) student.getTeacher().clone());\n       return student;\n     }\n   }\n   ```\n\n2. 使用序列化实现\n\n   ```java\n   public class Teacher implements Serializable {\n     private String name;\n     private int age;\n     \n     // 省略 get/set 方法\n   }\n   \n   class Student implements Serializable {\n       private String name;\n       private int age;\n       private Teacher3 teacher;\n   \n       // 省略 get/set 方法\n   \n       public Object deepClone() throws Exception {\n           // 序列化\n           ByteArrayOutputStream bos = new ByteArrayOutputStream();\n           ObjectOutputStream oos = new ObjectOutputStream(bos);\n           oos.writeObject(this);\n   \n           // 反序列化\n           ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n           ObjectInputStream ois = new ObjectInputStream(bis);\n   \n           return ois.readObject();\n       }\n   }\n   ```\n\n### 重写与重载\n\n#### 什么是重写？\n\n重写是指子类对父类允许访问的方法进行重新编写，返回值和形参都不能改变。**即方法入参出参不变，实现逻辑重写**。\n\n示例：\n\n```java\npublic class OverrideParent {\n\n  public void m1(String var) {\n    System.out.println(var);\n  }\n}\n\npublic class OverrideChild extends OverrideParent {\n\n  /**\n   * 重写父类的 m1() 方法\n   */\n  @Override\n  public void m1(String var) {\n    System.out.println(var);\n  }\n\n  /**\n   * 子类的 m1() 方法：与父类 m1() 方法的形参不同\n   */\n  public void m1(int var) {\n    System.out.println(var);\n  }\n\n  /**\n   * 子类的 m1() 方法：与父类 m1() 方法的形参、返回值不同\n   */\n  public String m1() {\n    System.out.println(\"var\");\n    return \"var\";\n  }\n}\n```\n\n#### 什么是重载？\n\n重载是指一个类中存在多个同名方法，且方法的形参不同。**即方法名称相同、形参不同**。\n\n示例：\n\n```java\npublic class OverloadClass {\n\n  public void m1() {\n    System.out.println(\"key\");\n  }\n\n  public void m1(String key) {\n    System.out.println(key);\n  }\n\n  public void m1(String key, Integer value) {\n    System.out.println(key);\n  }\n}\n```\n\n#### 重写与重载的区别\n\n1. 重写要求方法名、入参、返回值相同，重载只同名方法的入参不同（类型、个数、顺序至少有一个不同）。\n2. 重写要求子类不能缩小父类方法的访问权限，重载与访问权限无关。\n3. 重写要求子类方法不能抛出比父类方法更多的异常（但子类方法可以不抛出异常），重载与异常范围无关。\n4. 重写是子类对父类方法的覆盖行为，重载是一个类的多态性。\n5. 重写方法不能被定义为 final，重载方法可以被定义为 final。\n\n### 类加载机制\n\n#### 什么是双亲委派？\n\n在类加载过程中，子类会先去父类查找，如果找到，则从父类缓存加载。如果没找到，再由父类指派子类进行加载。\n\n双亲委派机制主要出于安全来考虑。比如自定义 java.lang.String，如果不先去父类查找，相当于 Bootstrap 加载器的 java.lang.String 被篡改了。\n\n#### 如何打破双亲委派？\n\n1. 重写 loadClass() 方法\n\n   > JDK 1.2 之前，自定义 ClassLoader 都必须重写 loadClass()\n\n2. ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定\n\n3. 热启动，热部署\n\n   > OSGI、Tomcat 都有自己的模块指定 Classloader（可以加载同一类库的不同版本）\n\n### Java 内存模型\n\n#### 缓存一致性协议\n\n现代 CPU 的数据一致性实现 = 缓存锁(MESI 等) + 总线锁。缓存一致性协议一般是指缓存锁层面的协议，目前缓存一致性协议的实现有很多种，比较常见的就是 Intel 所使用 **MESI** 协议。\n\nMESI 协议定义了四种状态，分别是 Modified、Exclusive、Shared 和 Invalid。\n\n- Modified 状态：该Cache line有效，数据被修改且未同步到内存，数据和内存数据不一致，数据只存在于本 Cache 中。\n- Exclusive 状态：该Cache line有效，数据由单 CPU 独占，数据和内存数据一致，数据只存在于本 Cache 中。\n- Shared 状态：该Cache line有效，数据由所有 CPU 共享，数据和内存数据一致，数据存在于所有 Cache 中。\n- Invalid 状态：该Cache line无效。\n\n#### 缓存行\n\n读取缓存以 Cache Line 为基本单位，目前 64 bytes。\n\n位于同一缓存行的两个不同数据，被两个不同 CPU 锁定，产生互相影响的伪共享问题，使用缓存行的对齐能够有效解决伪共享问题，提高处理效率。\n\n#### 缓存行的对齐\n\n```java\n//一个缓存行64个字节，设置56个的占位符，令要插入的数据单独占用一行缓存行\npublic static class Padding {\n\tpublic volatile long p1,p2,p3,p4,p5,p6,p7;\n}\npublic static class T extends Padding {\n  public volatile long x = 0L;\n}\npublic static T[] arr = new T[2];\nstatic {\n  arr[0] = new T();\n  arr[1] = new T();\n}\npublic static void main(String[] args) throws Exception {\n  Thread t1 = new Thread(() -> {\n    for (long i = 0; i < 1000_0000L; i++) {\n      arr[0].x = i;\n    }\n  });\n  Thread t2 = new Thread(() -> {\n    for (long i = 0; i < 1000_0000L; i++) {\n      arr[0].x = i;\n    }\n  });\n  t1.start();\n  t2.start();\n  t1.join();\n  t1.join();\n  \n}\n```\n\n- 使用缓存行对齐的开源软件：Disruptor（号称单机效率最高的队列）\n\n#### 合并写\n\n如果 CPU 需要访问的地址 hash 之后并不在缓存行（cache line）中，那么缓存中对应位置的缓存行（cache line）会失效，以便让新的值可以取代该位置的现有值。例如，如果我们有两个地址，通过 hash 算法 hash 到同一缓存行，那么新的值会覆盖老的值。\n\n当 CPU 执行存储指令（store）时，它会尝试将数据写到离 CPU 最近的 L1 缓存。如果这时出现缓存失效，CPU 会访问下一级缓存。这时无论是英特尔还是许多其他厂商的 CPU 都会使用被称为“合并写（write combining）”的技术。\n\n当请求 L2 缓存行的所有权的时候，最典型的是将处理器的 store buffers 中某一项写入内存的期间， 在缓存子系统（cache sub-system）准备好接收、处理的数据的期间，CPU 可以继续处理其他指令。当数据不在任何缓存层中缓存时，将获得最大的优势。\n\n当连串的写操作需要修改相同的缓存行时，会变得非常有趣。在修改提交到 L2 缓存之前，这连串的写操作会首先合并到缓冲区（buffer）。 这些 64 字节的缓冲（buffers ）维护在一个 64 位的区域中，每一个字节（byte）对应一个位（bit），当缓冲区被传输到外缓存后，标志缓存是否有效。随后，硬件在读取缓存之前会先读取缓冲区。\n\n如果我们可以在缓冲区被传输到外缓存之前能够填补这些缓冲区（buffers ），那么我们将大大提高传输总线的效率。由于这些缓冲区的数量是有限的，并且它们根据 CPU 的型号有所不同。例如在 Intel CPU，你只能保证在同一时间拿到 4 个。这意味着，在一个循环中，你不应该同时写超过 4 个截然不同的内存位置，否则你讲不能从合并写（write combining）的中受益。\n\n#### Java 内存模型包括哪些东西？\n\n程序计数器、方法区、本地方法栈、虚拟机方法栈、堆。\n\n#### Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\n\n程序计数器、本地方法栈、虚拟机方法栈是线程私有的，方法区、堆是线程公有的。\n\n#### 如何保证特定情况下不乱序\n\n**硬件层面：使用内存屏障**\n\n- **sfence**:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。\n- **lfence**：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。\n- **mfence**：mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。\n\n> 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序\n\n**JVM层面：使用 JSR133 规范**\n\n- LoadLoad屏障：\n\n  对于这样的语句 Load1; LoadLoad; Load2， 在 Load2 及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。\n\n- StoreStore屏障：\n\n  对于这样的语句 Store1; StoreStore; Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其它处理器可见。\n\n- LoadStore屏障：\n\n  对于这样的语句 Load1; LoadStore; Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据被读取完毕。\n\n- StoreLoad屏障：\n\n  对于这样的语句 Store1; StoreLoad; Load2，在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。\n\n#### java 八大原子操作\n\n> 最新的 JSR-133 已经放弃了这种描述，但 JMM 没有变化。\n\n**lock**：主内存，标识变量为线程独占\n\n**unlock**：主内存，解锁线程独占变量\n\n**read**：主内存，读取内容到工作内存\n\n**write**：主内存，写变量值\n\n**load**：工作内存，read 后的值放入线程本地变量副本\n\n**use**：工作内存，传值给执行引擎\n\n**assign**：工作内存，执行引擎结果赋值给线程本地变量\n\n**store**：工作内存，存值到主内存给 write 备用\n\n","source":"_posts/必知必会面试题之Java基础.md","raw":"---\ntitle: 必知必会面试题之 Java 基础\ndate: 2021-01-24\nupdated: 2021-01-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [数据计量单位](#数据计量单位) \n- [面向对象三大特性](#面向对象三大特性) \n- [基础数据类型](#基础数据类型) \n- [注释格式](#注释格式) \n\n---\n\n<!--more-->\n\n---\n\n- [访问修饰符](#访问修饰符) \n- [运算符](#运算符) \n  - [算数运算符](#算数运算符) \n  - [关系运算符](#关系运算符) \n  - [位运算符](#位运算符) \n  - [逻辑运算符](#逻辑运算符) \n  - [赋值运算符](#赋值运算符) \n  - [三目表达式](#三目表达式) \n  - [运算符优先级](#运算符优先级) \n- [拷贝](拷贝) \n  - [什么是浅拷贝？](#什么是浅拷贝？) \n  - [什么是浅拷贝？](#什么是浅拷贝？) \n- [重写与重载](#重写与重载) \n  - [什么是重写？](#什么是重写？) \n  - [什么是重载？](#什么是重载？) \n  - [重写与重载的区别](#重写与重载的区别) \n- [引用传递与值传递](#引用传递与值传递) \n- [类加载机制](#类加载机制) \n  - [什么是双亲委派？](#什么是双亲委派？) \n  - [如何打破双亲委派？](#如何打破双亲委派？) \n- [Java 内存模型](#Java内存模型) \n  - [缓存一致性协议](#缓存一致性协议) \n  - [缓存行](#缓存行) \n  - [缓存行对齐](#缓存行对齐) \n  - [合并写](#合并写) \n  - [Java 内存模型包括哪些东西？](#Java内存模型包括哪些东西？) \n  - [Java 内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？](#Java内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？) \n  - [Java 八大原子操作](#Java八大原子操作) \n\n### 数据计量单位\n\n8bit(位)=1Byte(字节) \n\n1024Byte(字节)=1KB\n\n1024KB=1MB\n\n1024MB=1GB\n\n1024GB=1TB\n\n1024TB=PB\n\n1024PB=1EB\n\n1024EB=1ZB\n\n1024ZB=1YB\n\n1024YB=1BB\n\n### 面向对象三大特性\n\n封装：**隐藏不想对外暴露的信息**，提高安全性；**抽取公共代码**，提高可复用性。\n\n继承：**继承为类的扩展提供了一种方式**。有利于修改公共属性或方法，父类修改，所有子类无需重复修改。\n\n多态：类的**多态体现在重写和重载**，重写通过继承来实现，重载通过相同方法的不同参数来实现。\n\n### 基础数据类型\n\n| 数据类型 | 位数 | 取值范围                                                     | 可转类型                 |\n| -------- | ---- | ------------------------------------------------------------ | ------------------------ |\n| byte     | 8    | -128 ~ 127（-2^7 ~ 2^7-1）                                   |                          |\n| short    | 16   | -32,768 ~ 32,767（-2^15 ~ 2^15-1）                           | int、long、float、double |\n| int      | 32   | -2,147,483,648 ~ 2,147,483,647（-2^31 ~ 2^31-1）             | long、float、double      |\n| long     | 64   | -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807（-2^63 ~ 2^63-1） | int、long、float、double |\n| float    | 32   |                                                              | double                   |\n| double   | 64   |                                                              |                          |\n| char     | 16   | \\u0000 ~ \\uffff（65 ~ 535）                                  | int、long、float、double |\n| boolean  | 1    | true、false                                                  |                          |\n\n### 注释格式\n\n- 单行注释：\n\n  ```java\n  // this is a comment\n  ```\n\n- 多行注释：\n\n  ```java\n  /* this is a comment */\n  ```\n\n- 文档注释：\n\n  ```java\n  /**\n   * this is a comment\n   */\n  ```\n\n### 访问修饰符\n\n| 修饰符    | 当前类 | 同包 | 子类 | 其他包 |\n| --------- | ------ | ---- | ---- | ------ |\n| private   | √      | ×    | ×    | ×      |\n| default   | √      | √    | ×    | ×      |\n| protected | √      | √    | √    | ×      |\n| public    | √      | √    | √    | √      |\n\n### 运算符\n\n#### 算数运算符\n\n| 操作符 | 描述                              | 例子                   |\n| :----- | :-------------------------------- | :--------------------- |\n| +      | 加法 - 相加运算符两侧的值         | A + B = 30             |\n| -      | 减法 - 左操作数减去右操作数       | A – B = -10            |\n| *      | 乘法 - 相乘操作符两侧的值         | A * B = 200            |\n| /      | 除法 - 左操作数除以右操作数       | B / A = 2              |\n| ％     | 取余 - 左操作数除以右操作数的余数 | B % A = 0              |\n| ++     | 自增: 操作数的值增加1             | B++ = 21 或 ++B = 21   |\n| --     | 自减: 操作数的值减少1             | B-- == 19 或 --B == 19 |\n\n#### 关系运算符\n\n| 运算符 | 描述                                                         | 例子            |\n| :----- | :----------------------------------------------------------- | :-------------- |\n| ==     | 检查如果两个操作数的值是否相等，如果相等则条件为真。         | (A == B) 为假。 |\n| !=     | 检查如果两个操作数的值是否相等，如果值不相等则条件为真。     | (A != B) 为真。 |\n| >      | 检查左操作数的值是否大于右操作数的值，如果是那么条件为真。   | (A > B) 为假。  |\n| <      | 检查左操作数的值是否小于右操作数的值，如果是那么条件为真。   | (A < B) 为真。  |\n| >=     | 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 | (A >= B) 为假。 |\n| <=     | 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 | (A <= B) 为真。 |\n\n#### 位运算符\n\n| 操作符 | 描述                                                         | 例子                           |\n| :----- | :----------------------------------------------------------- | :----------------------------- |\n| &      | 与。如果相对应位都是 1，则结果为 1，否则为 0                 | (A & B) 得到12，即 0000 1100   |\n| \\|     | 或。如果相对应位都是 0，则结果为 0，否则为 1                 | (A \\| B) 得到 61，即 0011 1101 |\n| ^      | 异或。如果相对应位值相同，则结果为 0，否则为1                | (A ^ B) 得到 49，即 0011 0001  |\n| ~      | 取反。翻转操作数的每一位，即 0 变成 1，1 变成 0。            | (~A) 得到 -61，即 1100 0011    |\n| <<     | 左移。左操作数按位左移右操作数指定的位数。                   | A << 2 得到 240，即 1111 0000  |\n| >>     | 右移。左操作数按位右移右操作数指定的位数。                   | A >> 2 得到 15，即 1111        |\n| >>>    | 无符号右移。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 | A>>>2 得到 15，即 0000 1111    |\n\n#### 逻辑运算符\n\n| 操作符 | 描述                                                         | 例子              |\n| :----- | :----------------------------------------------------------- | :---------------- |\n| &&     | 逻辑与，也称短路与。当且仅当两个操作数都为真，条件才为真。若第一个操作数为假，则第二个操作数不再判断。 | (A && B) 为假。   |\n| \\|\\|   | 逻辑或，也称短路或。如果任何两个操作数任何一个为真，条件为真。若第一个操作数为假，则第二个操作数不再判断。 | (A \\|\\| B) 为真。 |\n| !      | 逻辑非。用来反转操作数的逻辑状态。如果条件为 true，则使用逻辑非运算符将得到 false。 | !(A && B) 为真。  |\n\n#### 赋值运算符\n\n| 操作符 | 描述                                                         | 例子                                    |\n| :----- | :----------------------------------------------------------- | :-------------------------------------- |\n| =      | 简单的赋值运算符，将右操作数的值赋给左侧操作数               | C = A + B 将把 A + B 得到的值赋给 C     |\n| +=     | 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数     | C += A 等价于 C = C + A                 |\n| -=     | 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数     | C -= A 等价于 C = C - A                 |\n| *=     | 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数     | C *= A 等价于 C = C * A                 |\n| /=     | 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数     | C /= A，C 与 A 同类型时等价于 C = C / A |\n| ％=    | 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 | C ％= A 等价于 C = C ％ A               |\n| <<=    | 左移位赋值运算符                                             | C <<= 2 等价于 C = C << 2               |\n| >>=    | 右移位赋值运算符                                             | C >>= 2 等价于 C = C >> 2               |\n| &=     | 按位与赋值运算符                                             | C &= 2 等价于 C = C & 2                 |\n| ^=     | 按位异或赋值操作符                                           | C ^ = 2 等价于 C = C ^ 2                |\n| \\|=    | 按位或赋值操作符                                             | C \\| = 2 等价于 C = C \\| 2              |\n\n#### 三目表达式\n\n```java\n// 若 a == b 成立，返回 true，否则返回 false\nboolean flag = (a == b) ? true : false\n```\n\n#### 运算符优先级\n\n>  所谓“好记性不如烂笔头”。实际开发中，尽量使用括号来明确优先级，提高代码可读性，而非使用复杂的运算符复合运算。\n>\n>  如：((x++) && (y + 1) || z == 0)\n\n| 优先级 | 运算符                                           | 结合性   |\n| ------ | ------------------------------------------------ | -------- |\n| 1      | ()、[]、{}                                       | 从左向右 |\n| 2      | !、+、-、~、++、--                               | 从右向左 |\n| 3      | *、/、%                                          | 从左向右 |\n| 4      | +、-                                             | 从左向右 |\n| 5      | «、»、>>>                                        | 从左向右 |\n| 6      | <、<=、>、>=、instanceof                         | 从左向右 |\n| 7      | ==、!=                                           | 从左向右 |\n| 8      | &                                                | 从左向右 |\n| 9      | ^                                                | 从左向右 |\n| 10     | \\|                                               | 从左向右 |\n| 11     | &&                                               | 从左向右 |\n| 12     | \\|\\|                                             | 从左向右 |\n| 13     | ?:                                               | 从右向左 |\n| 14     | =、+=、-=、*=、/=、&=、\\|=、^=、~=、«=、»=、>>>= | 从右向左 |\n\n### 拷贝\n\n#### 什么是浅拷贝？\n\n被复制对象的所有变量值与原对象相同，但引用变量仍然指向原来的对象。即浅拷贝只复制对象本身，而不复制对象中引用的对象。\n\n示例：\n\n```java\nTeacher teacher = new Teacher();\nteacher.setName(\"赵大\");\nteacher.setAge(42);\n\nStudent student1 = new Student();\nstudent1.setName(\"张三\");\nstudent1.setAge(21);\nstudent1.setTeacher(teacher);\n\nStudent student2 = (Student) student1.clone();\nSystem.out.println(\"李四\");\nSystem.out.println(student2.getName());\nSystem.out.println(student2.getAge());\nSystem.out.println(student2.getTeacher().getName());\nSystem.out.println(student2.getTeacher().getAge());\n\nSystem.out.println(\"修改老师的信息后-------------\");\n// 修改老师名称\nteacher.setName(\"John\");\n// 两个学生的老师均发生变化\nSystem.out.println(student1.getTeacher().getName());\nSystem.out.println(student2.getTeacher().getName());\n```\n\n#### 什么是深拷贝？\n\n深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。\n\n深拷贝的方法包括：\n\n1. 重写 clone() 方法\n\n   ```java\n   public class Student implements Cloneable {\n   \n     private String  name;\n     private Integer age;\n     private Teacher teacher;\n     \n     // 省略 get/set 方法\n   \n     @Override\n     protected Object clone() throws CloneNotSupportedException {\n       Student3 student = (Student3) super.clone();\n       // 复制一个新的 Teacher 对象实例，并设置到新的 student 对象实例中\n       student.setTeacher((Teacher2) student.getTeacher().clone());\n       return student;\n     }\n   }\n   ```\n\n2. 使用序列化实现\n\n   ```java\n   public class Teacher implements Serializable {\n     private String name;\n     private int age;\n     \n     // 省略 get/set 方法\n   }\n   \n   class Student implements Serializable {\n       private String name;\n       private int age;\n       private Teacher3 teacher;\n   \n       // 省略 get/set 方法\n   \n       public Object deepClone() throws Exception {\n           // 序列化\n           ByteArrayOutputStream bos = new ByteArrayOutputStream();\n           ObjectOutputStream oos = new ObjectOutputStream(bos);\n           oos.writeObject(this);\n   \n           // 反序列化\n           ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n           ObjectInputStream ois = new ObjectInputStream(bis);\n   \n           return ois.readObject();\n       }\n   }\n   ```\n\n### 重写与重载\n\n#### 什么是重写？\n\n重写是指子类对父类允许访问的方法进行重新编写，返回值和形参都不能改变。**即方法入参出参不变，实现逻辑重写**。\n\n示例：\n\n```java\npublic class OverrideParent {\n\n  public void m1(String var) {\n    System.out.println(var);\n  }\n}\n\npublic class OverrideChild extends OverrideParent {\n\n  /**\n   * 重写父类的 m1() 方法\n   */\n  @Override\n  public void m1(String var) {\n    System.out.println(var);\n  }\n\n  /**\n   * 子类的 m1() 方法：与父类 m1() 方法的形参不同\n   */\n  public void m1(int var) {\n    System.out.println(var);\n  }\n\n  /**\n   * 子类的 m1() 方法：与父类 m1() 方法的形参、返回值不同\n   */\n  public String m1() {\n    System.out.println(\"var\");\n    return \"var\";\n  }\n}\n```\n\n#### 什么是重载？\n\n重载是指一个类中存在多个同名方法，且方法的形参不同。**即方法名称相同、形参不同**。\n\n示例：\n\n```java\npublic class OverloadClass {\n\n  public void m1() {\n    System.out.println(\"key\");\n  }\n\n  public void m1(String key) {\n    System.out.println(key);\n  }\n\n  public void m1(String key, Integer value) {\n    System.out.println(key);\n  }\n}\n```\n\n#### 重写与重载的区别\n\n1. 重写要求方法名、入参、返回值相同，重载只同名方法的入参不同（类型、个数、顺序至少有一个不同）。\n2. 重写要求子类不能缩小父类方法的访问权限，重载与访问权限无关。\n3. 重写要求子类方法不能抛出比父类方法更多的异常（但子类方法可以不抛出异常），重载与异常范围无关。\n4. 重写是子类对父类方法的覆盖行为，重载是一个类的多态性。\n5. 重写方法不能被定义为 final，重载方法可以被定义为 final。\n\n### 类加载机制\n\n#### 什么是双亲委派？\n\n在类加载过程中，子类会先去父类查找，如果找到，则从父类缓存加载。如果没找到，再由父类指派子类进行加载。\n\n双亲委派机制主要出于安全来考虑。比如自定义 java.lang.String，如果不先去父类查找，相当于 Bootstrap 加载器的 java.lang.String 被篡改了。\n\n#### 如何打破双亲委派？\n\n1. 重写 loadClass() 方法\n\n   > JDK 1.2 之前，自定义 ClassLoader 都必须重写 loadClass()\n\n2. ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定\n\n3. 热启动，热部署\n\n   > OSGI、Tomcat 都有自己的模块指定 Classloader（可以加载同一类库的不同版本）\n\n### Java 内存模型\n\n#### 缓存一致性协议\n\n现代 CPU 的数据一致性实现 = 缓存锁(MESI 等) + 总线锁。缓存一致性协议一般是指缓存锁层面的协议，目前缓存一致性协议的实现有很多种，比较常见的就是 Intel 所使用 **MESI** 协议。\n\nMESI 协议定义了四种状态，分别是 Modified、Exclusive、Shared 和 Invalid。\n\n- Modified 状态：该Cache line有效，数据被修改且未同步到内存，数据和内存数据不一致，数据只存在于本 Cache 中。\n- Exclusive 状态：该Cache line有效，数据由单 CPU 独占，数据和内存数据一致，数据只存在于本 Cache 中。\n- Shared 状态：该Cache line有效，数据由所有 CPU 共享，数据和内存数据一致，数据存在于所有 Cache 中。\n- Invalid 状态：该Cache line无效。\n\n#### 缓存行\n\n读取缓存以 Cache Line 为基本单位，目前 64 bytes。\n\n位于同一缓存行的两个不同数据，被两个不同 CPU 锁定，产生互相影响的伪共享问题，使用缓存行的对齐能够有效解决伪共享问题，提高处理效率。\n\n#### 缓存行的对齐\n\n```java\n//一个缓存行64个字节，设置56个的占位符，令要插入的数据单独占用一行缓存行\npublic static class Padding {\n\tpublic volatile long p1,p2,p3,p4,p5,p6,p7;\n}\npublic static class T extends Padding {\n  public volatile long x = 0L;\n}\npublic static T[] arr = new T[2];\nstatic {\n  arr[0] = new T();\n  arr[1] = new T();\n}\npublic static void main(String[] args) throws Exception {\n  Thread t1 = new Thread(() -> {\n    for (long i = 0; i < 1000_0000L; i++) {\n      arr[0].x = i;\n    }\n  });\n  Thread t2 = new Thread(() -> {\n    for (long i = 0; i < 1000_0000L; i++) {\n      arr[0].x = i;\n    }\n  });\n  t1.start();\n  t2.start();\n  t1.join();\n  t1.join();\n  \n}\n```\n\n- 使用缓存行对齐的开源软件：Disruptor（号称单机效率最高的队列）\n\n#### 合并写\n\n如果 CPU 需要访问的地址 hash 之后并不在缓存行（cache line）中，那么缓存中对应位置的缓存行（cache line）会失效，以便让新的值可以取代该位置的现有值。例如，如果我们有两个地址，通过 hash 算法 hash 到同一缓存行，那么新的值会覆盖老的值。\n\n当 CPU 执行存储指令（store）时，它会尝试将数据写到离 CPU 最近的 L1 缓存。如果这时出现缓存失效，CPU 会访问下一级缓存。这时无论是英特尔还是许多其他厂商的 CPU 都会使用被称为“合并写（write combining）”的技术。\n\n当请求 L2 缓存行的所有权的时候，最典型的是将处理器的 store buffers 中某一项写入内存的期间， 在缓存子系统（cache sub-system）准备好接收、处理的数据的期间，CPU 可以继续处理其他指令。当数据不在任何缓存层中缓存时，将获得最大的优势。\n\n当连串的写操作需要修改相同的缓存行时，会变得非常有趣。在修改提交到 L2 缓存之前，这连串的写操作会首先合并到缓冲区（buffer）。 这些 64 字节的缓冲（buffers ）维护在一个 64 位的区域中，每一个字节（byte）对应一个位（bit），当缓冲区被传输到外缓存后，标志缓存是否有效。随后，硬件在读取缓存之前会先读取缓冲区。\n\n如果我们可以在缓冲区被传输到外缓存之前能够填补这些缓冲区（buffers ），那么我们将大大提高传输总线的效率。由于这些缓冲区的数量是有限的，并且它们根据 CPU 的型号有所不同。例如在 Intel CPU，你只能保证在同一时间拿到 4 个。这意味着，在一个循环中，你不应该同时写超过 4 个截然不同的内存位置，否则你讲不能从合并写（write combining）的中受益。\n\n#### Java 内存模型包括哪些东西？\n\n程序计数器、方法区、本地方法栈、虚拟机方法栈、堆。\n\n#### Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\n\n程序计数器、本地方法栈、虚拟机方法栈是线程私有的，方法区、堆是线程公有的。\n\n#### 如何保证特定情况下不乱序\n\n**硬件层面：使用内存屏障**\n\n- **sfence**:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。\n- **lfence**：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。\n- **mfence**：mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。\n\n> 原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序\n\n**JVM层面：使用 JSR133 规范**\n\n- LoadLoad屏障：\n\n  对于这样的语句 Load1; LoadLoad; Load2， 在 Load2 及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。\n\n- StoreStore屏障：\n\n  对于这样的语句 Store1; StoreStore; Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其它处理器可见。\n\n- LoadStore屏障：\n\n  对于这样的语句 Load1; LoadStore; Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据被读取完毕。\n\n- StoreLoad屏障：\n\n  对于这样的语句 Store1; StoreLoad; Load2，在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。\n\n#### java 八大原子操作\n\n> 最新的 JSR-133 已经放弃了这种描述，但 JMM 没有变化。\n\n**lock**：主内存，标识变量为线程独占\n\n**unlock**：主内存，解锁线程独占变量\n\n**read**：主内存，读取内容到工作内存\n\n**write**：主内存，写变量值\n\n**load**：工作内存，read 后的值放入线程本地变量副本\n\n**use**：工作内存，传值给执行引擎\n\n**assign**：工作内存，执行引擎结果赋值给线程本地变量\n\n**store**：工作内存，存值到主内存给 write 备用\n\n","slug":"必知必会面试题之Java基础","published":1,"_id":"ckluypyl5000bpt6aa0hbci1y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D\">数据计量单位</a> </li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7\">面向对象三大特性</a> </li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基础数据类型</a> </li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A%E6%A0%BC%E5%BC%8F\">注释格式</a> </li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<ul>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\">访问修饰符</a> </li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a> <ul>\n<li><a href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符</a> </li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a> </li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a> </li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a> </li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a> </li>\n<li><a href=\"#%E4%B8%89%E7%9B%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F\">三目表达式</a> </li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\">运算符优先级</a> </li>\n</ul>\n</li>\n<li><a href=\"%E6%8B%B7%E8%B4%9D\">拷贝</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%9F\">什么是浅拷贝？</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%9F\">什么是浅拷贝？</a> </li>\n</ul>\n</li>\n<li><a href=\"#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD\">重写与重载</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%86%99%EF%BC%9F\">什么是重写？</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E8%BD%BD%EF%BC%9F\">什么是重载？</a> </li>\n<li><a href=\"#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB\">重写与重载的区别</a> </li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E4%B8%8E%E5%80%BC%E4%BC%A0%E9%80%92\">引用传递与值传递</a> </li>\n<li><a href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\">类加载机制</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%EF%BC%9F\">什么是双亲委派？</a> </li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%EF%BC%9F\">如何打破双亲委派？</a> </li>\n</ul>\n</li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\">Java 内存模型</a> <ul>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE\">缓存一致性协议</a> </li>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E8%A1%8C\">缓存行</a> </li>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E8%A1%8C%E5%AF%B9%E9%BD%90\">缓存行对齐</a> </li>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%86%99\">合并写</a> </li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B%E4%B8%9C%E8%A5%BF%EF%BC%9F\">Java 内存模型包括哪些东西？</a> </li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%AD%EF%BC%8C%E5%93%AA%E4%BA%9B%E5%AF%B9%E8%B1%A1%E6%98%AF%E7%8E%B0%E5%9C%BA%E7%A7%81%E6%9C%89%E7%9A%84%EF%BC%9F%E5%93%AA%E4%BA%9B%E5%AF%B9%E8%B1%A1%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%AC%E6%9C%89%E7%9A%84%EF%BC%9F\">Java 内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？</a> </li>\n<li><a href=\"#Java%E5%85%AB%E5%A4%A7%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C\">Java 八大原子操作</a> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据计量单位\"><a href=\"#数据计量单位\" class=\"headerlink\" title=\"数据计量单位\"></a>数据计量单位</h3><p>8bit(位)=1Byte(字节) </p>\n<p>1024Byte(字节)=1KB</p>\n<p>1024KB=1MB</p>\n<p>1024MB=1GB</p>\n<p>1024GB=1TB</p>\n<p>1024TB=PB</p>\n<p>1024PB=1EB</p>\n<p>1024EB=1ZB</p>\n<p>1024ZB=1YB</p>\n<p>1024YB=1BB</p>\n<h3 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h3><p>封装：<strong>隐藏不想对外暴露的信息</strong>，提高安全性；<strong>抽取公共代码</strong>，提高可复用性。</p>\n<p>继承：<strong>继承为类的扩展提供了一种方式</strong>。有利于修改公共属性或方法，父类修改，所有子类无需重复修改。</p>\n<p>多态：类的<strong>多态体现在重写和重载</strong>，重写通过继承来实现，重载通过相同方法的不同参数来实现。</p>\n<h3 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>位数</th>\n<th>取值范围</th>\n<th>可转类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>8</td>\n<td>-128 ~ 127（-2^7 ~ 2^7-1）</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td>16</td>\n<td>-32,768 ~ 32,767（-2^15 ~ 2^15-1）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32</td>\n<td>-2,147,483,648 ~ 2,147,483,647（-2^31 ~ 2^31-1）</td>\n<td>long、float、double</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807（-2^63 ~ 2^63-1）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32</td>\n<td></td>\n<td>double</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>char</td>\n<td>16</td>\n<td>\\u0000 ~ \\uffff（65 ~ 535）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>true、false</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"注释格式\"><a href=\"#注释格式\" class=\"headerlink\" title=\"注释格式\"></a>注释格式</h3><ul>\n<li><p>单行注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this is a comment</span></span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* this is a comment */</span></span><br></pre></td></tr></table></figure></li>\n<li><p>文档注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * this is a comment</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h3><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类</th>\n<th>同包</th>\n<th>子类</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>private</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>default</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>public</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><h4 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法 - 相加运算符两侧的值</td>\n<td align=\"left\">A + B = 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法 - 左操作数减去右操作数</td>\n<td align=\"left\">A – B = -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法 - 相乘操作符两侧的值</td>\n<td align=\"left\">A * B = 200</td>\n</tr>\n<tr>\n<td align=\"left\">/</td>\n<td align=\"left\">除法 - 左操作数除以右操作数</td>\n<td align=\"left\">B / A = 2</td>\n</tr>\n<tr>\n<td align=\"left\">％</td>\n<td align=\"left\">取余 - 左操作数除以右操作数的余数</td>\n<td align=\"left\">B % A = 0</td>\n</tr>\n<tr>\n<td align=\"left\">++</td>\n<td align=\"left\">自增: 操作数的值增加1</td>\n<td align=\"left\">B++ = 21 或 ++B = 21</td>\n</tr>\n<tr>\n<td align=\"left\">–</td>\n<td align=\"left\">自减: 操作数的值减少1</td>\n<td align=\"left\">B– == 19 或 –B == 19</td>\n</tr>\n</tbody></table>\n<h4 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td align=\"left\">(A == B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td align=\"left\">(A != B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &gt; B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &lt; B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &gt;= B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &lt;= B) 为真。</td>\n</tr>\n</tbody></table>\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">与。如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td align=\"left\">(A &amp; B) 得到12，即 0000 1100</td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\">或。如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td align=\"left\">(A | B) 得到 61，即 0011 1101</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">异或。如果相对应位值相同，则结果为 0，否则为1</td>\n<td align=\"left\">(A ^ B) 得到 49，即 0011 0001</td>\n</tr>\n<tr>\n<td align=\"left\">~</td>\n<td align=\"left\">取反。翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td align=\"left\">(~A) 得到 -61，即 1100 0011</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;</td>\n<td align=\"left\">左移。左操作数按位左移右操作数指定的位数。</td>\n<td align=\"left\">A &lt;&lt; 2 得到 240，即 1111 0000</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;</td>\n<td align=\"left\">右移。左操作数按位右移右操作数指定的位数。</td>\n<td align=\"left\">A &gt;&gt; 2 得到 15，即 1111</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;&gt;</td>\n<td align=\"left\">无符号右移。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td align=\"left\">A&gt;&gt;&gt;2 得到 15，即 0000 1111</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与，也称短路与。当且仅当两个操作数都为真，条件才为真。若第一个操作数为假，则第二个操作数不再判断。</td>\n<td align=\"left\">(A &amp;&amp; B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑或，也称短路或。如果任何两个操作数任何一个为真，条件为真。若第一个操作数为假，则第二个操作数不再判断。</td>\n<td align=\"left\">(A || B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑非。用来反转操作数的逻辑状态。如果条件为 true，则使用逻辑非运算符将得到 false。</td>\n<td align=\"left\">!(A &amp;&amp; B) 为真。</td>\n</tr>\n</tbody></table>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td align=\"left\">C = A + B 将把 A + B 得到的值赋给 C</td>\n</tr>\n<tr>\n<td align=\"left\">+=</td>\n<td align=\"left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td align=\"left\">C += A 等价于 C = C + A</td>\n</tr>\n<tr>\n<td align=\"left\">-=</td>\n<td align=\"left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td align=\"left\">C -= A 等价于 C = C - A</td>\n</tr>\n<tr>\n<td align=\"left\">*=</td>\n<td align=\"left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td align=\"left\">C *= A 等价于 C = C * A</td>\n</tr>\n<tr>\n<td align=\"left\">/=</td>\n<td align=\"left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td align=\"left\">C /= A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td align=\"left\">％=</td>\n<td align=\"left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td align=\"left\">C ％= A 等价于 C = C ％ A</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;=</td>\n<td align=\"left\">左移位赋值运算符</td>\n<td align=\"left\">C &lt;&lt;= 2 等价于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;=</td>\n<td align=\"left\">右移位赋值运算符</td>\n<td align=\"left\">C &gt;&gt;= 2 等价于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;=</td>\n<td align=\"left\">按位与赋值运算符</td>\n<td align=\"left\">C &amp;= 2 等价于 C = C &amp; 2</td>\n</tr>\n<tr>\n<td align=\"left\">^=</td>\n<td align=\"left\">按位异或赋值操作符</td>\n<td align=\"left\">C ^ = 2 等价于 C = C ^ 2</td>\n</tr>\n<tr>\n<td align=\"left\">|=</td>\n<td align=\"left\">按位或赋值操作符</td>\n<td align=\"left\">C | = 2 等价于 C = C | 2</td>\n</tr>\n</tbody></table>\n<h4 id=\"三目表达式\"><a href=\"#三目表达式\" class=\"headerlink\" title=\"三目表达式\"></a>三目表达式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 若 a == b 成立，返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = (a == b) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><blockquote>\n<p> 所谓“好记性不如烂笔头”。实际开发中，尽量使用括号来明确优先级，提高代码可读性，而非使用复杂的运算符复合运算。</p>\n<p> 如：((x++) &amp;&amp; (y + 1) || z == 0)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>结合性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>()、[]、{}</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>2</td>\n<td>!、+、-、~、++、–</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td>3</td>\n<td>*、/、%</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+、-</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>5</td>\n<td>«、»、&gt;&gt;&gt;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>7</td>\n<td>==、!=</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>9</td>\n<td>^</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>10</td>\n<td>|</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>12</td>\n<td>||</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>13</td>\n<td>?:</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td>14</td>\n<td>=、+=、-=、*=、/=、&amp;=、|=、^=、~=、«=、»=、&gt;&gt;&gt;=</td>\n<td>从右向左</td>\n</tr>\n</tbody></table>\n<h3 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h3><h4 id=\"什么是浅拷贝？\"><a href=\"#什么是浅拷贝？\" class=\"headerlink\" title=\"什么是浅拷贝？\"></a>什么是浅拷贝？</h4><p>被复制对象的所有变量值与原对象相同，但引用变量仍然指向原来的对象。即浅拷贝只复制对象本身，而不复制对象中引用的对象。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher teacher = <span class=\"keyword\">new</span> Teacher();</span><br><span class=\"line\">teacher.setName(<span class=\"string\">&quot;赵大&quot;</span>);</span><br><span class=\"line\">teacher.setAge(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Student student1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">student1.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">student1.setAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">student1.setTeacher(teacher);</span><br><span class=\"line\"></span><br><span class=\"line\">Student student2 = (Student) student1.clone();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">System.out.println(student2.getName());</span><br><span class=\"line\">System.out.println(student2.getAge());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getName());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;修改老师的信息后-------------&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改老师名称</span></span><br><span class=\"line\">teacher.setName(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 两个学生的老师均发生变化</span></span><br><span class=\"line\">System.out.println(student1.getTeacher().getName());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getName());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是深拷贝？\"><a href=\"#什么是深拷贝？\" class=\"headerlink\" title=\"什么是深拷贝？\"></a>什么是深拷贝？</h4><p>深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。</p>\n<p>深拷贝的方法包括：</p>\n<ol>\n<li><p>重写 clone() 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    Student3 student = (Student3) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    <span class=\"comment\">// 复制一个新的 Teacher 对象实例，并设置到新的 student 对象实例中</span></span><br><span class=\"line\">    student.setTeacher((Teacher2) student.getTeacher().clone());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用序列化实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher3 teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"重写与重载\"><a href=\"#重写与重载\" class=\"headerlink\" title=\"重写与重载\"></a>重写与重载</h3><h4 id=\"什么是重写？\"><a href=\"#什么是重写？\" class=\"headerlink\" title=\"什么是重写？\"></a>什么是重写？</h4><p>重写是指子类对父类允许访问的方法进行重新编写，返回值和形参都不能改变。<strong>即方法入参出参不变，实现逻辑重写</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverrideParent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverrideChild</span> <span class=\"keyword\">extends</span> <span class=\"title\">OverrideParent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重写父类的 m1() 方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 子类的 m1() 方法：与父类 m1() 方法的形参不同</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 子类的 m1() 方法：与父类 m1() 方法的形参、返回值不同</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;var&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;var&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是重载？\"><a href=\"#什么是重载？\" class=\"headerlink\" title=\"什么是重载？\"></a>什么是重载？</h4><p>重载是指一个类中存在多个同名方法，且方法的形参不同。<strong>即方法名称相同、形参不同</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverloadClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String key, Integer value)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重写与重载的区别\"><a href=\"#重写与重载的区别\" class=\"headerlink\" title=\"重写与重载的区别\"></a>重写与重载的区别</h4><ol>\n<li>重写要求方法名、入参、返回值相同，重载只同名方法的入参不同（类型、个数、顺序至少有一个不同）。</li>\n<li>重写要求子类不能缩小父类方法的访问权限，重载与访问权限无关。</li>\n<li>重写要求子类方法不能抛出比父类方法更多的异常（但子类方法可以不抛出异常），重载与异常范围无关。</li>\n<li>重写是子类对父类方法的覆盖行为，重载是一个类的多态性。</li>\n<li>重写方法不能被定义为 final，重载方法可以被定义为 final。</li>\n</ol>\n<h3 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h3><h4 id=\"什么是双亲委派？\"><a href=\"#什么是双亲委派？\" class=\"headerlink\" title=\"什么是双亲委派？\"></a>什么是双亲委派？</h4><p>在类加载过程中，子类会先去父类查找，如果找到，则从父类缓存加载。如果没找到，再由父类指派子类进行加载。</p>\n<p>双亲委派机制主要出于安全来考虑。比如自定义 java.lang.String，如果不先去父类查找，相当于 Bootstrap 加载器的 java.lang.String 被篡改了。</p>\n<h4 id=\"如何打破双亲委派？\"><a href=\"#如何打破双亲委派？\" class=\"headerlink\" title=\"如何打破双亲委派？\"></a>如何打破双亲委派？</h4><ol>\n<li><p>重写 loadClass() 方法</p>\n<blockquote>\n<p>JDK 1.2 之前，自定义 ClassLoader 都必须重写 loadClass()</p>\n</blockquote>\n</li>\n<li><p>ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定</p>\n</li>\n<li><p>热启动，热部署</p>\n<blockquote>\n<p>OSGI、Tomcat 都有自己的模块指定 Classloader（可以加载同一类库的不同版本）</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Java-内存模型\"><a href=\"#Java-内存模型\" class=\"headerlink\" title=\"Java 内存模型\"></a>Java 内存模型</h3><h4 id=\"缓存一致性协议\"><a href=\"#缓存一致性协议\" class=\"headerlink\" title=\"缓存一致性协议\"></a>缓存一致性协议</h4><p>现代 CPU 的数据一致性实现 = 缓存锁(MESI 等) + 总线锁。缓存一致性协议一般是指缓存锁层面的协议，目前缓存一致性协议的实现有很多种，比较常见的就是 Intel 所使用 <strong>MESI</strong> 协议。</p>\n<p>MESI 协议定义了四种状态，分别是 Modified、Exclusive、Shared 和 Invalid。</p>\n<ul>\n<li>Modified 状态：该Cache line有效，数据被修改且未同步到内存，数据和内存数据不一致，数据只存在于本 Cache 中。</li>\n<li>Exclusive 状态：该Cache line有效，数据由单 CPU 独占，数据和内存数据一致，数据只存在于本 Cache 中。</li>\n<li>Shared 状态：该Cache line有效，数据由所有 CPU 共享，数据和内存数据一致，数据存在于所有 Cache 中。</li>\n<li>Invalid 状态：该Cache line无效。</li>\n</ul>\n<h4 id=\"缓存行\"><a href=\"#缓存行\" class=\"headerlink\" title=\"缓存行\"></a>缓存行</h4><p>读取缓存以 Cache Line 为基本单位，目前 64 bytes。</p>\n<p>位于同一缓存行的两个不同数据，被两个不同 CPU 锁定，产生互相影响的伪共享问题，使用缓存行的对齐能够有效解决伪共享问题，提高处理效率。</p>\n<h4 id=\"缓存行的对齐\"><a href=\"#缓存行的对齐\" class=\"headerlink\" title=\"缓存行的对齐\"></a>缓存行的对齐</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个缓存行64个字节，设置56个的占位符，令要插入的数据单独占用一行缓存行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Padding</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> p1,p2,p3,p4,p5,p6,p7;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Padding</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0L</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T[] arr = <span class=\"keyword\">new</span> T[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">  arr[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">  arr[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_0000L</span>; i++) &#123;</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>].x = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_0000L</span>; i++) &#123;</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>].x = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  t1.start();</span><br><span class=\"line\">  t2.start();</span><br><span class=\"line\">  t1.join();</span><br><span class=\"line\">  t1.join();</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用缓存行对齐的开源软件：Disruptor（号称单机效率最高的队列）</li>\n</ul>\n<h4 id=\"合并写\"><a href=\"#合并写\" class=\"headerlink\" title=\"合并写\"></a>合并写</h4><p>如果 CPU 需要访问的地址 hash 之后并不在缓存行（cache line）中，那么缓存中对应位置的缓存行（cache line）会失效，以便让新的值可以取代该位置的现有值。例如，如果我们有两个地址，通过 hash 算法 hash 到同一缓存行，那么新的值会覆盖老的值。</p>\n<p>当 CPU 执行存储指令（store）时，它会尝试将数据写到离 CPU 最近的 L1 缓存。如果这时出现缓存失效，CPU 会访问下一级缓存。这时无论是英特尔还是许多其他厂商的 CPU 都会使用被称为“合并写（write combining）”的技术。</p>\n<p>当请求 L2 缓存行的所有权的时候，最典型的是将处理器的 store buffers 中某一项写入内存的期间， 在缓存子系统（cache sub-system）准备好接收、处理的数据的期间，CPU 可以继续处理其他指令。当数据不在任何缓存层中缓存时，将获得最大的优势。</p>\n<p>当连串的写操作需要修改相同的缓存行时，会变得非常有趣。在修改提交到 L2 缓存之前，这连串的写操作会首先合并到缓冲区（buffer）。 这些 64 字节的缓冲（buffers ）维护在一个 64 位的区域中，每一个字节（byte）对应一个位（bit），当缓冲区被传输到外缓存后，标志缓存是否有效。随后，硬件在读取缓存之前会先读取缓冲区。</p>\n<p>如果我们可以在缓冲区被传输到外缓存之前能够填补这些缓冲区（buffers ），那么我们将大大提高传输总线的效率。由于这些缓冲区的数量是有限的，并且它们根据 CPU 的型号有所不同。例如在 Intel CPU，你只能保证在同一时间拿到 4 个。这意味着，在一个循环中，你不应该同时写超过 4 个截然不同的内存位置，否则你讲不能从合并写（write combining）的中受益。</p>\n<h4 id=\"Java-内存模型包括哪些东西？\"><a href=\"#Java-内存模型包括哪些东西？\" class=\"headerlink\" title=\"Java 内存模型包括哪些东西？\"></a>Java 内存模型包括哪些东西？</h4><p>程序计数器、方法区、本地方法栈、虚拟机方法栈、堆。</p>\n<h4 id=\"Java-内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\"><a href=\"#Java-内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\" class=\"headerlink\" title=\"Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\"></a>Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？</h4><p>程序计数器、本地方法栈、虚拟机方法栈是线程私有的，方法区、堆是线程公有的。</p>\n<h4 id=\"如何保证特定情况下不乱序\"><a href=\"#如何保证特定情况下不乱序\" class=\"headerlink\" title=\"如何保证特定情况下不乱序\"></a>如何保证特定情况下不乱序</h4><p><strong>硬件层面：使用内存屏障</strong></p>\n<ul>\n<li><strong>sfence</strong>:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。</li>\n<li><strong>lfence</strong>：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。</li>\n<li><strong>mfence</strong>：mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</li>\n</ul>\n<blockquote>\n<p>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</p>\n</blockquote>\n<p><strong>JVM层面：使用 JSR133 规范</strong></p>\n<ul>\n<li><p>LoadLoad屏障：</p>\n<p>对于这样的语句 Load1; LoadLoad; Load2， 在 Load2 及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreStore屏障：</p>\n<p>对于这样的语句 Store1; StoreStore; Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其它处理器可见。</p>\n</li>\n<li><p>LoadStore屏障：</p>\n<p>对于这样的语句 Load1; LoadStore; Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreLoad屏障：</p>\n<p>对于这样的语句 Store1; StoreLoad; Load2，在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。</p>\n</li>\n</ul>\n<h4 id=\"java-八大原子操作\"><a href=\"#java-八大原子操作\" class=\"headerlink\" title=\"java 八大原子操作\"></a>java 八大原子操作</h4><blockquote>\n<p>最新的 JSR-133 已经放弃了这种描述，但 JMM 没有变化。</p>\n</blockquote>\n<p><strong>lock</strong>：主内存，标识变量为线程独占</p>\n<p><strong>unlock</strong>：主内存，解锁线程独占变量</p>\n<p><strong>read</strong>：主内存，读取内容到工作内存</p>\n<p><strong>write</strong>：主内存，写变量值</p>\n<p><strong>load</strong>：工作内存，read 后的值放入线程本地变量副本</p>\n<p><strong>use</strong>：工作内存，传值给执行引擎</p>\n<p><strong>assign</strong>：工作内存，执行引擎结果赋值给线程本地变量</p>\n<p><strong>store</strong>：工作内存，存值到主内存给 write 备用</p>\n","site":{"data":{}},"length":8728,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D\">数据计量单位</a> </li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7\">面向对象三大特性</a> </li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基础数据类型</a> </li>\n<li><a href=\"#%E6%B3%A8%E9%87%8A%E6%A0%BC%E5%BC%8F\">注释格式</a> </li>\n</ul>\n<hr>","more":"<hr>\n<ul>\n<li><a href=\"#%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\">访问修饰符</a> </li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a> <ul>\n<li><a href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符</a> </li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a> </li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a> </li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a> </li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a> </li>\n<li><a href=\"#%E4%B8%89%E7%9B%AE%E8%A1%A8%E8%BE%BE%E5%BC%8F\">三目表达式</a> </li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\">运算符优先级</a> </li>\n</ul>\n</li>\n<li><a href=\"%E6%8B%B7%E8%B4%9D\">拷贝</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%9F\">什么是浅拷贝？</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%9F\">什么是浅拷贝？</a> </li>\n</ul>\n</li>\n<li><a href=\"#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD\">重写与重载</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%86%99%EF%BC%9F\">什么是重写？</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E8%BD%BD%EF%BC%9F\">什么是重载？</a> </li>\n<li><a href=\"#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB\">重写与重载的区别</a> </li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E4%B8%8E%E5%80%BC%E4%BC%A0%E9%80%92\">引用传递与值传递</a> </li>\n<li><a href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\">类加载机制</a> <ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%EF%BC%9F\">什么是双亲委派？</a> </li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%EF%BC%9F\">如何打破双亲委派？</a> </li>\n</ul>\n</li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\">Java 内存模型</a> <ul>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE\">缓存一致性协议</a> </li>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E8%A1%8C\">缓存行</a> </li>\n<li><a href=\"#%E7%BC%93%E5%AD%98%E8%A1%8C%E5%AF%B9%E9%BD%90\">缓存行对齐</a> </li>\n<li><a href=\"#%E5%90%88%E5%B9%B6%E5%86%99\">合并写</a> </li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B%E4%B8%9C%E8%A5%BF%EF%BC%9F\">Java 内存模型包括哪些东西？</a> </li>\n<li><a href=\"#Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%AD%EF%BC%8C%E5%93%AA%E4%BA%9B%E5%AF%B9%E8%B1%A1%E6%98%AF%E7%8E%B0%E5%9C%BA%E7%A7%81%E6%9C%89%E7%9A%84%EF%BC%9F%E5%93%AA%E4%BA%9B%E5%AF%B9%E8%B1%A1%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%85%AC%E6%9C%89%E7%9A%84%EF%BC%9F\">Java 内存模型中，哪些对象是现场私有的？哪些对象是线程公有的？</a> </li>\n<li><a href=\"#Java%E5%85%AB%E5%A4%A7%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C\">Java 八大原子操作</a> </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据计量单位\"><a href=\"#数据计量单位\" class=\"headerlink\" title=\"数据计量单位\"></a>数据计量单位</h3><p>8bit(位)=1Byte(字节) </p>\n<p>1024Byte(字节)=1KB</p>\n<p>1024KB=1MB</p>\n<p>1024MB=1GB</p>\n<p>1024GB=1TB</p>\n<p>1024TB=PB</p>\n<p>1024PB=1EB</p>\n<p>1024EB=1ZB</p>\n<p>1024ZB=1YB</p>\n<p>1024YB=1BB</p>\n<h3 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h3><p>封装：<strong>隐藏不想对外暴露的信息</strong>，提高安全性；<strong>抽取公共代码</strong>，提高可复用性。</p>\n<p>继承：<strong>继承为类的扩展提供了一种方式</strong>。有利于修改公共属性或方法，父类修改，所有子类无需重复修改。</p>\n<p>多态：类的<strong>多态体现在重写和重载</strong>，重写通过继承来实现，重载通过相同方法的不同参数来实现。</p>\n<h3 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>位数</th>\n<th>取值范围</th>\n<th>可转类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>8</td>\n<td>-128 ~ 127（-2^7 ~ 2^7-1）</td>\n<td></td>\n</tr>\n<tr>\n<td>short</td>\n<td>16</td>\n<td>-32,768 ~ 32,767（-2^15 ~ 2^15-1）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>int</td>\n<td>32</td>\n<td>-2,147,483,648 ~ 2,147,483,647（-2^31 ~ 2^31-1）</td>\n<td>long、float、double</td>\n</tr>\n<tr>\n<td>long</td>\n<td>64</td>\n<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807（-2^63 ~ 2^63-1）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>32</td>\n<td></td>\n<td>double</td>\n</tr>\n<tr>\n<td>double</td>\n<td>64</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>char</td>\n<td>16</td>\n<td>\\u0000 ~ \\uffff（65 ~ 535）</td>\n<td>int、long、float、double</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1</td>\n<td>true、false</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"注释格式\"><a href=\"#注释格式\" class=\"headerlink\" title=\"注释格式\"></a>注释格式</h3><ul>\n<li><p>单行注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this is a comment</span></span><br></pre></td></tr></table></figure></li>\n<li><p>多行注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* this is a comment */</span></span><br></pre></td></tr></table></figure></li>\n<li><p>文档注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * this is a comment</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h3><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>当前类</th>\n<th>同包</th>\n<th>子类</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>private</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>default</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>×</td>\n</tr>\n<tr>\n<td>public</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><h4 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法 - 相加运算符两侧的值</td>\n<td align=\"left\">A + B = 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法 - 左操作数减去右操作数</td>\n<td align=\"left\">A – B = -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法 - 相乘操作符两侧的值</td>\n<td align=\"left\">A * B = 200</td>\n</tr>\n<tr>\n<td align=\"left\">/</td>\n<td align=\"left\">除法 - 左操作数除以右操作数</td>\n<td align=\"left\">B / A = 2</td>\n</tr>\n<tr>\n<td align=\"left\">％</td>\n<td align=\"left\">取余 - 左操作数除以右操作数的余数</td>\n<td align=\"left\">B % A = 0</td>\n</tr>\n<tr>\n<td align=\"left\">++</td>\n<td align=\"left\">自增: 操作数的值增加1</td>\n<td align=\"left\">B++ = 21 或 ++B = 21</td>\n</tr>\n<tr>\n<td align=\"left\">–</td>\n<td align=\"left\">自减: 操作数的值减少1</td>\n<td align=\"left\">B– == 19 或 –B == 19</td>\n</tr>\n</tbody></table>\n<h4 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td align=\"left\">(A == B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td align=\"left\">(A != B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &gt; B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &lt; B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &gt;= B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td align=\"left\">(A &lt;= B) 为真。</td>\n</tr>\n</tbody></table>\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">与。如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td align=\"left\">(A &amp; B) 得到12，即 0000 1100</td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\">或。如果相对应位都是 0，则结果为 0，否则为 1</td>\n<td align=\"left\">(A | B) 得到 61，即 0011 1101</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">异或。如果相对应位值相同，则结果为 0，否则为1</td>\n<td align=\"left\">(A ^ B) 得到 49，即 0011 0001</td>\n</tr>\n<tr>\n<td align=\"left\">~</td>\n<td align=\"left\">取反。翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td align=\"left\">(~A) 得到 -61，即 1100 0011</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;</td>\n<td align=\"left\">左移。左操作数按位左移右操作数指定的位数。</td>\n<td align=\"left\">A &lt;&lt; 2 得到 240，即 1111 0000</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;</td>\n<td align=\"left\">右移。左操作数按位右移右操作数指定的位数。</td>\n<td align=\"left\">A &gt;&gt; 2 得到 15，即 1111</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;&gt;</td>\n<td align=\"left\">无符号右移。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td align=\"left\">A&gt;&gt;&gt;2 得到 15，即 0000 1111</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;&amp;</td>\n<td align=\"left\">逻辑与，也称短路与。当且仅当两个操作数都为真，条件才为真。若第一个操作数为假，则第二个操作数不再判断。</td>\n<td align=\"left\">(A &amp;&amp; B) 为假。</td>\n</tr>\n<tr>\n<td align=\"left\">||</td>\n<td align=\"left\">逻辑或，也称短路或。如果任何两个操作数任何一个为真，条件为真。若第一个操作数为假，则第二个操作数不再判断。</td>\n<td align=\"left\">(A || B) 为真。</td>\n</tr>\n<tr>\n<td align=\"left\">!</td>\n<td align=\"left\">逻辑非。用来反转操作数的逻辑状态。如果条件为 true，则使用逻辑非运算符将得到 false。</td>\n<td align=\"left\">!(A &amp;&amp; B) 为真。</td>\n</tr>\n</tbody></table>\n<h4 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td align=\"left\">C = A + B 将把 A + B 得到的值赋给 C</td>\n</tr>\n<tr>\n<td align=\"left\">+=</td>\n<td align=\"left\">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td align=\"left\">C += A 等价于 C = C + A</td>\n</tr>\n<tr>\n<td align=\"left\">-=</td>\n<td align=\"left\">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td align=\"left\">C -= A 等价于 C = C - A</td>\n</tr>\n<tr>\n<td align=\"left\">*=</td>\n<td align=\"left\">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td align=\"left\">C *= A 等价于 C = C * A</td>\n</tr>\n<tr>\n<td align=\"left\">/=</td>\n<td align=\"left\">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td align=\"left\">C /= A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td align=\"left\">％=</td>\n<td align=\"left\">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td align=\"left\">C ％= A 等价于 C = C ％ A</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;=</td>\n<td align=\"left\">左移位赋值运算符</td>\n<td align=\"left\">C &lt;&lt;= 2 等价于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;=</td>\n<td align=\"left\">右移位赋值运算符</td>\n<td align=\"left\">C &gt;&gt;= 2 等价于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;=</td>\n<td align=\"left\">按位与赋值运算符</td>\n<td align=\"left\">C &amp;= 2 等价于 C = C &amp; 2</td>\n</tr>\n<tr>\n<td align=\"left\">^=</td>\n<td align=\"left\">按位异或赋值操作符</td>\n<td align=\"left\">C ^ = 2 等价于 C = C ^ 2</td>\n</tr>\n<tr>\n<td align=\"left\">|=</td>\n<td align=\"left\">按位或赋值操作符</td>\n<td align=\"left\">C | = 2 等价于 C = C | 2</td>\n</tr>\n</tbody></table>\n<h4 id=\"三目表达式\"><a href=\"#三目表达式\" class=\"headerlink\" title=\"三目表达式\"></a>三目表达式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 若 a == b 成立，返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = (a == b) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h4><blockquote>\n<p> 所谓“好记性不如烂笔头”。实际开发中，尽量使用括号来明确优先级，提高代码可读性，而非使用复杂的运算符复合运算。</p>\n<p> 如：((x++) &amp;&amp; (y + 1) || z == 0)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>结合性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>()、[]、{}</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>2</td>\n<td>!、+、-、~、++、–</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td>3</td>\n<td>*、/、%</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+、-</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>5</td>\n<td>«、»、&gt;&gt;&gt;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&lt;、&lt;=、&gt;、&gt;=、instanceof</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>7</td>\n<td>==、!=</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>8</td>\n<td>&amp;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>9</td>\n<td>^</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>10</td>\n<td>|</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>11</td>\n<td>&amp;&amp;</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>12</td>\n<td>||</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td>13</td>\n<td>?:</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td>14</td>\n<td>=、+=、-=、*=、/=、&amp;=、|=、^=、~=、«=、»=、&gt;&gt;&gt;=</td>\n<td>从右向左</td>\n</tr>\n</tbody></table>\n<h3 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h3><h4 id=\"什么是浅拷贝？\"><a href=\"#什么是浅拷贝？\" class=\"headerlink\" title=\"什么是浅拷贝？\"></a>什么是浅拷贝？</h4><p>被复制对象的所有变量值与原对象相同，但引用变量仍然指向原来的对象。即浅拷贝只复制对象本身，而不复制对象中引用的对象。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher teacher = <span class=\"keyword\">new</span> Teacher();</span><br><span class=\"line\">teacher.setName(<span class=\"string\">&quot;赵大&quot;</span>);</span><br><span class=\"line\">teacher.setAge(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Student student1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">student1.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">student1.setAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">student1.setTeacher(teacher);</span><br><span class=\"line\"></span><br><span class=\"line\">Student student2 = (Student) student1.clone();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">System.out.println(student2.getName());</span><br><span class=\"line\">System.out.println(student2.getAge());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getName());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;修改老师的信息后-------------&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改老师名称</span></span><br><span class=\"line\">teacher.setName(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 两个学生的老师均发生变化</span></span><br><span class=\"line\">System.out.println(student1.getTeacher().getName());</span><br><span class=\"line\">System.out.println(student2.getTeacher().getName());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是深拷贝？\"><a href=\"#什么是深拷贝？\" class=\"headerlink\" title=\"什么是深拷贝？\"></a>什么是深拷贝？</h4><p>深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。</p>\n<p>深拷贝的方法包括：</p>\n<ol>\n<li><p>重写 clone() 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    Student3 student = (Student3) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    <span class=\"comment\">// 复制一个新的 Teacher 对象实例，并设置到新的 student 对象实例中</span></span><br><span class=\"line\">    student.setTeacher((Teacher2) student.getTeacher().clone());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>使用序列化实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher3 teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略 get/set 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">deepClone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 序列化</span></span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        oos.writeObject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 反序列化</span></span><br><span class=\"line\">        ByteArrayInputStream bis = <span class=\"keyword\">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bis);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"重写与重载\"><a href=\"#重写与重载\" class=\"headerlink\" title=\"重写与重载\"></a>重写与重载</h3><h4 id=\"什么是重写？\"><a href=\"#什么是重写？\" class=\"headerlink\" title=\"什么是重写？\"></a>什么是重写？</h4><p>重写是指子类对父类允许访问的方法进行重新编写，返回值和形参都不能改变。<strong>即方法入参出参不变，实现逻辑重写</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverrideParent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverrideChild</span> <span class=\"keyword\">extends</span> <span class=\"title\">OverrideParent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 重写父类的 m1() 方法</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 子类的 m1() 方法：与父类 m1() 方法的形参不同</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">var</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 子类的 m1() 方法：与父类 m1() 方法的形参、返回值不同</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;var&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;var&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是重载？\"><a href=\"#什么是重载？\" class=\"headerlink\" title=\"什么是重载？\"></a>什么是重载？</h4><p>重载是指一个类中存在多个同名方法，且方法的形参不同。<strong>即方法名称相同、形参不同</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OverloadClass</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">(String key, Integer value)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重写与重载的区别\"><a href=\"#重写与重载的区别\" class=\"headerlink\" title=\"重写与重载的区别\"></a>重写与重载的区别</h4><ol>\n<li>重写要求方法名、入参、返回值相同，重载只同名方法的入参不同（类型、个数、顺序至少有一个不同）。</li>\n<li>重写要求子类不能缩小父类方法的访问权限，重载与访问权限无关。</li>\n<li>重写要求子类方法不能抛出比父类方法更多的异常（但子类方法可以不抛出异常），重载与异常范围无关。</li>\n<li>重写是子类对父类方法的覆盖行为，重载是一个类的多态性。</li>\n<li>重写方法不能被定义为 final，重载方法可以被定义为 final。</li>\n</ol>\n<h3 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h3><h4 id=\"什么是双亲委派？\"><a href=\"#什么是双亲委派？\" class=\"headerlink\" title=\"什么是双亲委派？\"></a>什么是双亲委派？</h4><p>在类加载过程中，子类会先去父类查找，如果找到，则从父类缓存加载。如果没找到，再由父类指派子类进行加载。</p>\n<p>双亲委派机制主要出于安全来考虑。比如自定义 java.lang.String，如果不先去父类查找，相当于 Bootstrap 加载器的 java.lang.String 被篡改了。</p>\n<h4 id=\"如何打破双亲委派？\"><a href=\"#如何打破双亲委派？\" class=\"headerlink\" title=\"如何打破双亲委派？\"></a>如何打破双亲委派？</h4><ol>\n<li><p>重写 loadClass() 方法</p>\n<blockquote>\n<p>JDK 1.2 之前，自定义 ClassLoader 都必须重写 loadClass()</p>\n</blockquote>\n</li>\n<li><p>ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定</p>\n</li>\n<li><p>热启动，热部署</p>\n<blockquote>\n<p>OSGI、Tomcat 都有自己的模块指定 Classloader（可以加载同一类库的不同版本）</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Java-内存模型\"><a href=\"#Java-内存模型\" class=\"headerlink\" title=\"Java 内存模型\"></a>Java 内存模型</h3><h4 id=\"缓存一致性协议\"><a href=\"#缓存一致性协议\" class=\"headerlink\" title=\"缓存一致性协议\"></a>缓存一致性协议</h4><p>现代 CPU 的数据一致性实现 = 缓存锁(MESI 等) + 总线锁。缓存一致性协议一般是指缓存锁层面的协议，目前缓存一致性协议的实现有很多种，比较常见的就是 Intel 所使用 <strong>MESI</strong> 协议。</p>\n<p>MESI 协议定义了四种状态，分别是 Modified、Exclusive、Shared 和 Invalid。</p>\n<ul>\n<li>Modified 状态：该Cache line有效，数据被修改且未同步到内存，数据和内存数据不一致，数据只存在于本 Cache 中。</li>\n<li>Exclusive 状态：该Cache line有效，数据由单 CPU 独占，数据和内存数据一致，数据只存在于本 Cache 中。</li>\n<li>Shared 状态：该Cache line有效，数据由所有 CPU 共享，数据和内存数据一致，数据存在于所有 Cache 中。</li>\n<li>Invalid 状态：该Cache line无效。</li>\n</ul>\n<h4 id=\"缓存行\"><a href=\"#缓存行\" class=\"headerlink\" title=\"缓存行\"></a>缓存行</h4><p>读取缓存以 Cache Line 为基本单位，目前 64 bytes。</p>\n<p>位于同一缓存行的两个不同数据，被两个不同 CPU 锁定，产生互相影响的伪共享问题，使用缓存行的对齐能够有效解决伪共享问题，提高处理效率。</p>\n<h4 id=\"缓存行的对齐\"><a href=\"#缓存行的对齐\" class=\"headerlink\" title=\"缓存行的对齐\"></a>缓存行的对齐</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个缓存行64个字节，设置56个的占位符，令要插入的数据单独占用一行缓存行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Padding</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> p1,p2,p3,p4,p5,p6,p7;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Padding</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> x = <span class=\"number\">0L</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T[] arr = <span class=\"keyword\">new</span> T[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">  arr[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">  arr[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> T();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_0000L</span>; i++) &#123;</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>].x = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_0000L</span>; i++) &#123;</span><br><span class=\"line\">      arr[<span class=\"number\">0</span>].x = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  t1.start();</span><br><span class=\"line\">  t2.start();</span><br><span class=\"line\">  t1.join();</span><br><span class=\"line\">  t1.join();</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用缓存行对齐的开源软件：Disruptor（号称单机效率最高的队列）</li>\n</ul>\n<h4 id=\"合并写\"><a href=\"#合并写\" class=\"headerlink\" title=\"合并写\"></a>合并写</h4><p>如果 CPU 需要访问的地址 hash 之后并不在缓存行（cache line）中，那么缓存中对应位置的缓存行（cache line）会失效，以便让新的值可以取代该位置的现有值。例如，如果我们有两个地址，通过 hash 算法 hash 到同一缓存行，那么新的值会覆盖老的值。</p>\n<p>当 CPU 执行存储指令（store）时，它会尝试将数据写到离 CPU 最近的 L1 缓存。如果这时出现缓存失效，CPU 会访问下一级缓存。这时无论是英特尔还是许多其他厂商的 CPU 都会使用被称为“合并写（write combining）”的技术。</p>\n<p>当请求 L2 缓存行的所有权的时候，最典型的是将处理器的 store buffers 中某一项写入内存的期间， 在缓存子系统（cache sub-system）准备好接收、处理的数据的期间，CPU 可以继续处理其他指令。当数据不在任何缓存层中缓存时，将获得最大的优势。</p>\n<p>当连串的写操作需要修改相同的缓存行时，会变得非常有趣。在修改提交到 L2 缓存之前，这连串的写操作会首先合并到缓冲区（buffer）。 这些 64 字节的缓冲（buffers ）维护在一个 64 位的区域中，每一个字节（byte）对应一个位（bit），当缓冲区被传输到外缓存后，标志缓存是否有效。随后，硬件在读取缓存之前会先读取缓冲区。</p>\n<p>如果我们可以在缓冲区被传输到外缓存之前能够填补这些缓冲区（buffers ），那么我们将大大提高传输总线的效率。由于这些缓冲区的数量是有限的，并且它们根据 CPU 的型号有所不同。例如在 Intel CPU，你只能保证在同一时间拿到 4 个。这意味着，在一个循环中，你不应该同时写超过 4 个截然不同的内存位置，否则你讲不能从合并写（write combining）的中受益。</p>\n<h4 id=\"Java-内存模型包括哪些东西？\"><a href=\"#Java-内存模型包括哪些东西？\" class=\"headerlink\" title=\"Java 内存模型包括哪些东西？\"></a>Java 内存模型包括哪些东西？</h4><p>程序计数器、方法区、本地方法栈、虚拟机方法栈、堆。</p>\n<h4 id=\"Java-内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\"><a href=\"#Java-内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\" class=\"headerlink\" title=\"Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？\"></a>Java 内存模型中，哪些对象是线程私有的？哪些对象是线程公有的？</h4><p>程序计数器、本地方法栈、虚拟机方法栈是线程私有的，方法区、堆是线程公有的。</p>\n<h4 id=\"如何保证特定情况下不乱序\"><a href=\"#如何保证特定情况下不乱序\" class=\"headerlink\" title=\"如何保证特定情况下不乱序\"></a>如何保证特定情况下不乱序</h4><p><strong>硬件层面：使用内存屏障</strong></p>\n<ul>\n<li><strong>sfence</strong>:  store| 在sfence指令前的写操作当必须在sfence指令后的写操作前完成。</li>\n<li><strong>lfence</strong>：load | 在lfence指令前的读操作当必须在lfence指令后的读操作前完成。</li>\n<li><strong>mfence</strong>：mix | 在mfence指令前的读写操作当必须在mfence指令后的读写操作前完成。</li>\n</ul>\n<blockquote>\n<p>原子指令，如x86上的”lock …” 指令是一个Full Barrier，执行时会锁住内存子系统来确保执行顺序，甚至跨多个CPU。Software Locks通常使用了内存屏障或原子指令来实现变量可见性和保持程序顺序</p>\n</blockquote>\n<p><strong>JVM层面：使用 JSR133 规范</strong></p>\n<ul>\n<li><p>LoadLoad屏障：</p>\n<p>对于这样的语句 Load1; LoadLoad; Load2， 在 Load2 及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreStore屏障：</p>\n<p>对于这样的语句 Store1; StoreStore; Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其它处理器可见。</p>\n</li>\n<li><p>LoadStore屏障：</p>\n<p>对于这样的语句 Load1; LoadStore; Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据被读取完毕。</p>\n</li>\n<li><p>StoreLoad屏障：</p>\n<p>对于这样的语句 Store1; StoreLoad; Load2，在 Load2 及后续所有读取操作执行前，保证 Store1 的写入对所有处理器可见。</p>\n</li>\n</ul>\n<h4 id=\"java-八大原子操作\"><a href=\"#java-八大原子操作\" class=\"headerlink\" title=\"java 八大原子操作\"></a>java 八大原子操作</h4><blockquote>\n<p>最新的 JSR-133 已经放弃了这种描述，但 JMM 没有变化。</p>\n</blockquote>\n<p><strong>lock</strong>：主内存，标识变量为线程独占</p>\n<p><strong>unlock</strong>：主内存，解锁线程独占变量</p>\n<p><strong>read</strong>：主内存，读取内容到工作内存</p>\n<p><strong>write</strong>：主内存，写变量值</p>\n<p><strong>load</strong>：工作内存，read 后的值放入线程本地变量副本</p>\n<p><strong>use</strong>：工作内存，传值给执行引擎</p>\n<p><strong>assign</strong>：工作内存，执行引擎结果赋值给线程本地变量</p>\n<p><strong>store</strong>：工作内存，存值到主内存给 write 备用</p>"},{"title":"必知必会面试题之 Java 集合","date":"2021-01-23T16:00:00.000Z","updated":"2021-01-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [List](#List) \n  - [ArrayList 的底层实现](#ArrayList的底层实现) \n  - [ArrayList 如何扩容？](#ArrayList如何扩容？) \n- [Map](#Map) \n  - [HashMap 的底层实现](#HashMap的底层实现) \n  - [JDK 1.8 中 HashMap 为什么要引入红黑树？](#JDK1.8中HashMap为什么要引入红黑树？) \n  - [HashMap 什么情况使用链表？什么情况会使用红黑树？](#HashMap什么情况使用链表？什么情况会使用红黑树？) \n\n---\n\n<!--more-->\n\n---\n\n### List\n\n#### ArrayList 的底层实现\n\nArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于 C 语言中的动态申请内存，动态增长内存。\n\nArrayList 不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用 Collections.synchronizedList(List l) 函数返回一个线程安全的 ArrayList 类，也可以使用并发包下的 CopyOnWriteArrayList 类。\n\n#### ArrayList 如何扩容？\n\n数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。\n\n当我们可预知要保存的元素的多少时，要在构造 ArrayList 实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用 ensureCapacity 方法来手动增加 ArrayList 实例的容量。\n\n### Map\n\n#### HashMap 的底层实现\n\nJDK 1.8 之前使用**数组 + 单链表**实现，JDK 1.8 以后使用**数组 + 单链表/红黑树**实现。\n\n####  JDK 1.8 中 HashMap 为什么要引入红黑树？\n\n当 HashMap 中出现较多哈希冲突时，链表有可能会变得非常长，而链表是从链表的 head 或者 tail 查询的，效率会随着长度的增长而降低。引入红黑树就是为了解决链表过长带来的查询效率问题。红黑树的树形结构使原本查询链表的时间复杂度 O(n) 降到了 O(logn)。\n\n#### HashMap 什么情况使用链表？什么情况会使用红黑树？\n\n若桶中链表元素超过 8 时，会自动转化成红黑树；若桶中元素小于等于 6 时，树结构还原成链表形式。\n\n原因：\n\n- 红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要。\n- 链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。\n- 中间有个差值7可以防止链表和树之间频繁的转换。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。","source":"_posts/必知必会面试题之Java集合.md","raw":"---\ntitle: 必知必会面试题之 Java 集合\ndate: 2021-01-24\nupdated: 2021-01-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [List](#List) \n  - [ArrayList 的底层实现](#ArrayList的底层实现) \n  - [ArrayList 如何扩容？](#ArrayList如何扩容？) \n- [Map](#Map) \n  - [HashMap 的底层实现](#HashMap的底层实现) \n  - [JDK 1.8 中 HashMap 为什么要引入红黑树？](#JDK1.8中HashMap为什么要引入红黑树？) \n  - [HashMap 什么情况使用链表？什么情况会使用红黑树？](#HashMap什么情况使用链表？什么情况会使用红黑树？) \n\n---\n\n<!--more-->\n\n---\n\n### List\n\n#### ArrayList 的底层实现\n\nArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于 C 语言中的动态申请内存，动态增长内存。\n\nArrayList 不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用 Collections.synchronizedList(List l) 函数返回一个线程安全的 ArrayList 类，也可以使用并发包下的 CopyOnWriteArrayList 类。\n\n#### ArrayList 如何扩容？\n\n数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。\n\n当我们可预知要保存的元素的多少时，要在构造 ArrayList 实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用 ensureCapacity 方法来手动增加 ArrayList 实例的容量。\n\n### Map\n\n#### HashMap 的底层实现\n\nJDK 1.8 之前使用**数组 + 单链表**实现，JDK 1.8 以后使用**数组 + 单链表/红黑树**实现。\n\n####  JDK 1.8 中 HashMap 为什么要引入红黑树？\n\n当 HashMap 中出现较多哈希冲突时，链表有可能会变得非常长，而链表是从链表的 head 或者 tail 查询的，效率会随着长度的增长而降低。引入红黑树就是为了解决链表过长带来的查询效率问题。红黑树的树形结构使原本查询链表的时间复杂度 O(n) 降到了 O(logn)。\n\n#### HashMap 什么情况使用链表？什么情况会使用红黑树？\n\n若桶中链表元素超过 8 时，会自动转化成红黑树；若桶中元素小于等于 6 时，树结构还原成链表形式。\n\n原因：\n\n- 红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要。\n- 链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。\n- 中间有个差值7可以防止链表和树之间频繁的转换。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。","slug":"必知必会面试题之Java集合","published":1,"_id":"ckluyrrdq000jpt6agq738cyj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#List\">List</a> <ul>\n<li><a href=\"#ArrayList%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\">ArrayList 的底层实现</a> </li>\n<li><a href=\"#ArrayList%E5%A6%82%E4%BD%95%E6%89%A9%E5%AE%B9%EF%BC%9F\">ArrayList 如何扩容？</a> </li>\n</ul>\n</li>\n<li><a href=\"#Map\">Map</a> <ul>\n<li><a href=\"#HashMap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\">HashMap 的底层实现</a> </li>\n<li><a href=\"#JDK1.8%E4%B8%ADHashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%95%E5%85%A5%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F\">JDK 1.8 中 HashMap 为什么要引入红黑树？</a> </li>\n<li><a href=\"#HashMap%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8%EF%BC%9F%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%BC%9A%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F\">HashMap 什么情况使用链表？什么情况会使用红黑树？</a> </li>\n</ul>\n</li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><h4 id=\"ArrayList-的底层实现\"><a href=\"#ArrayList-的底层实现\" class=\"headerlink\" title=\"ArrayList 的底层实现\"></a>ArrayList 的底层实现</h4><p>ArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于 C 语言中的动态申请内存，动态增长内存。</p>\n<p>ArrayList 不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用 Collections.synchronizedList(List l) 函数返回一个线程安全的 ArrayList 类，也可以使用并发包下的 CopyOnWriteArrayList 类。</p>\n<h4 id=\"ArrayList-如何扩容？\"><a href=\"#ArrayList-如何扩容？\" class=\"headerlink\" title=\"ArrayList 如何扩容？\"></a>ArrayList 如何扩容？</h4><p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。</p>\n<p>当我们可预知要保存的元素的多少时，要在构造 ArrayList 实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用 ensureCapacity 方法来手动增加 ArrayList 实例的容量。</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><h4 id=\"HashMap-的底层实现\"><a href=\"#HashMap-的底层实现\" class=\"headerlink\" title=\"HashMap 的底层实现\"></a>HashMap 的底层实现</h4><p>JDK 1.8 之前使用<strong>数组 + 单链表</strong>实现，JDK 1.8 以后使用<strong>数组 + 单链表/红黑树</strong>实现。</p>\n<h4 id=\"JDK-1-8-中-HashMap-为什么要引入红黑树？\"><a href=\"#JDK-1-8-中-HashMap-为什么要引入红黑树？\" class=\"headerlink\" title=\"JDK 1.8 中 HashMap 为什么要引入红黑树？\"></a>JDK 1.8 中 HashMap 为什么要引入红黑树？</h4><p>当 HashMap 中出现较多哈希冲突时，链表有可能会变得非常长，而链表是从链表的 head 或者 tail 查询的，效率会随着长度的增长而降低。引入红黑树就是为了解决链表过长带来的查询效率问题。红黑树的树形结构使原本查询链表的时间复杂度 O(n) 降到了 O(logn)。</p>\n<h4 id=\"HashMap-什么情况使用链表？什么情况会使用红黑树？\"><a href=\"#HashMap-什么情况使用链表？什么情况会使用红黑树？\" class=\"headerlink\" title=\"HashMap 什么情况使用链表？什么情况会使用红黑树？\"></a>HashMap 什么情况使用链表？什么情况会使用红黑树？</h4><p>若桶中链表元素超过 8 时，会自动转化成红黑树；若桶中元素小于等于 6 时，树结构还原成链表形式。</p>\n<p>原因：</p>\n<ul>\n<li>红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要。</li>\n<li>链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</li>\n<li>中间有个差值7可以防止链表和树之间频繁的转换。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。</li>\n</ul>\n","site":{"data":{}},"length":1053,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#List\">List</a> <ul>\n<li><a href=\"#ArrayList%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\">ArrayList 的底层实现</a> </li>\n<li><a href=\"#ArrayList%E5%A6%82%E4%BD%95%E6%89%A9%E5%AE%B9%EF%BC%9F\">ArrayList 如何扩容？</a> </li>\n</ul>\n</li>\n<li><a href=\"#Map\">Map</a> <ul>\n<li><a href=\"#HashMap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0\">HashMap 的底层实现</a> </li>\n<li><a href=\"#JDK1.8%E4%B8%ADHashMap%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%95%E5%85%A5%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F\">JDK 1.8 中 HashMap 为什么要引入红黑树？</a> </li>\n<li><a href=\"#HashMap%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%BD%BF%E7%94%A8%E9%93%BE%E8%A1%A8%EF%BC%9F%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%BC%9A%E4%BD%BF%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F\">HashMap 什么情况使用链表？什么情况会使用红黑树？</a> </li>\n</ul>\n</li>\n</ul>\n<hr>","more":"<hr>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><h4 id=\"ArrayList-的底层实现\"><a href=\"#ArrayList-的底层实现\" class=\"headerlink\" title=\"ArrayList 的底层实现\"></a>ArrayList 的底层实现</h4><p>ArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于 C 语言中的动态申请内存，动态增长内存。</p>\n<p>ArrayList 不是线程安全的，只能用在单线程环境下，多线程环境下可以考虑用 Collections.synchronizedList(List l) 函数返回一个线程安全的 ArrayList 类，也可以使用并发包下的 CopyOnWriteArrayList 类。</p>\n<h4 id=\"ArrayList-如何扩容？\"><a href=\"#ArrayList-如何扩容？\" class=\"headerlink\" title=\"ArrayList 如何扩容？\"></a>ArrayList 如何扩容？</h4><p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。</p>\n<p>当我们可预知要保存的元素的多少时，要在构造 ArrayList 实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用 ensureCapacity 方法来手动增加 ArrayList 实例的容量。</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><h4 id=\"HashMap-的底层实现\"><a href=\"#HashMap-的底层实现\" class=\"headerlink\" title=\"HashMap 的底层实现\"></a>HashMap 的底层实现</h4><p>JDK 1.8 之前使用<strong>数组 + 单链表</strong>实现，JDK 1.8 以后使用<strong>数组 + 单链表/红黑树</strong>实现。</p>\n<h4 id=\"JDK-1-8-中-HashMap-为什么要引入红黑树？\"><a href=\"#JDK-1-8-中-HashMap-为什么要引入红黑树？\" class=\"headerlink\" title=\"JDK 1.8 中 HashMap 为什么要引入红黑树？\"></a>JDK 1.8 中 HashMap 为什么要引入红黑树？</h4><p>当 HashMap 中出现较多哈希冲突时，链表有可能会变得非常长，而链表是从链表的 head 或者 tail 查询的，效率会随着长度的增长而降低。引入红黑树就是为了解决链表过长带来的查询效率问题。红黑树的树形结构使原本查询链表的时间复杂度 O(n) 降到了 O(logn)。</p>\n<h4 id=\"HashMap-什么情况使用链表？什么情况会使用红黑树？\"><a href=\"#HashMap-什么情况使用链表？什么情况会使用红黑树？\" class=\"headerlink\" title=\"HashMap 什么情况使用链表？什么情况会使用红黑树？\"></a>HashMap 什么情况使用链表？什么情况会使用红黑树？</h4><p>若桶中链表元素超过 8 时，会自动转化成红黑树；若桶中元素小于等于 6 时，树结构还原成链表形式。</p>\n<p>原因：</p>\n<ul>\n<li>红黑树的平均查找长度是log(n)，长度为8，查找长度为log(8)=3，链表的平均查找长度为n/2，当长度为8时，平均查找长度为8/2=4，这才有转换成树的必要。</li>\n<li>链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</li>\n<li>中间有个差值7可以防止链表和树之间频繁的转换。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。</li>\n</ul>"},{"title":"必知必会面试题之Java IO 流","date":"2021-01-23T16:00:00.000Z","updated":"2021-03-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [IO 流的种类](#IO流的种类) \n- [常见的 IO 流](#常见的IO流) \n  - [字节流](#字节流) \n  - [字符流](#字符流) \n- [常见的 IO 类型](#常见的 IO 类型) \n  - [BIO](#BIO) \n  - [NIO](#NIO) \n  - [AIO](#AIO) \n- [NIO 的组成](#NIO的组成) \n- [什么是零拷贝](#什么是零拷贝) \n\n---\n\n<!--more-->\n\n---\n\n## IO 流的种类\n\n- 按照流的流向，可以分为**输入流**和**输出流**；\n- 按照操作单元，可以分为**字节流**和**字符流**；\n- 按照流的角色，可以分为**节点流**和**处理流**。\n\n## 常见的 IO 流\n\n### 字节流\n\n- FileInputStream\n- FileOutputStream\n- PipedInputStream\n- PipedOutputStream\n- ByteArrayInputStream\n- ByteArrayOutputStream\n- BufferedInputStream\n- BufferedOutputStream\n- DataInputStream\n- DataOutputStream\n- ObjectInputStream\n- ObjectOutputStream\n- SequenceInputStream\n- PrintOutputStream\n\n### 字符流\n\n- FileReader\n- FileWriter\n- PipedReader\n- PipedWriter\n- CharArrayReader\n- CharArrayWriter\n- BufferedReader\n- BufferedWriter\n- InputStreamReader\n\n- OutputStreamWriter\n- PrintWriter\n\n## 常见的 IO 类型\n\n### BIO\n\nBIO 是指**同步阻塞 IO（Blocking I/O）**。一次数据的读取或写入会阻塞当前线程，直到本次数据传输结束。操作简单，适合活动连接数较小的情况。\n\n### NIO\n\nNIO 是在 Java 1.4 中引入的新的 I/O 模型，因为被称为 New IO。但随着技术的快速发展，NIO 也不再“新”了，因此，我们现在更习惯以它的特性来称其为：**同步非阻塞 IO（Non-Blocking I/O）**。\n\nNIO 提供了 Channel、Selector、Buffer 等抽象，实现了多路复用。此外，NIO 还提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，分别对应 BIO 中的 Socket 和 ServerSocket。\n\n>  **NIO 并非只是非阻塞的**，NIO 同时支持阻塞、非阻塞两种模式，只是因为 NIO 主要就是为了提高 IO 性能而诞生的，所以强调了其核心特性：非阻塞。在日常使用中，我们也更为倾向于 NIO 的非阻塞模式，以获得更高的吞吐量和并发量。\n\n### AIO\n\nAIO 是在 Java 7 中引入的**异步非阻塞 IO（Asynchronous I/O）**。AIO 是基于事件和回调机制实现的，当操作发生后，会直接得到返回，释放 IO 资源，实际操作的执行则交给其他线程来处理，处理完成后通知相应的线程进行后续的操作。\n\n## NIO 的组成\n\n- 缓冲区（Buffer）：用来存储待传输的数据，通过 Channel 进行数据传输。\n\n- 直接缓冲区（DirectByteBuffer）：使用堆外内存创建的缓冲区，可以减少一次堆内内存到堆外内存的数据拷贝。\n\n  > 使用堆外内存创建和销毁缓冲区的成本更高且不可控，通常会使用内存池来提高性能。\n\n- 通道（Channel）：用来建立数据传输需要的连接，并传输 Buffer 中的数据。\n\n  > 数据虽然需要通过 Channel 进行传输，但 Channel 是不直接操作数据的，Channel 只负责建立连接并确认传输内容，实际数据的传输是通过\n\n- 选择器（Selector）：用来管理 Channel 和分配\n\n## 什么是零拷贝\n\n在 Java 程序中，使用 **read() 或 write() 方法拷贝**，需要在堆内开辟内存空间存储文件流，再从堆内拷贝到堆外，最后从堆外拷贝到操作系统内核，由 DMA 读写到磁盘。期间需要经过两次复制，且用户态和内核态的交互，因此传输效率较慢。\n\n而在操作系统中提供了 **mmap() 方法**，我们可以在程序中调用该方法，系统会直接在内核开辟内存空间，直接将文件流传输到内核开辟出的内存空间，由 DMA 读写到磁盘。该方法通过减少文件流的拷贝过程和用户态、内核态的交互，从而提高了文件传输的效率。我们把这种方法，称为“零拷贝”。\n\n当然，零拷贝虽然可以提高文件传输效率，但也并非没有缺点的。由于程序直接传入内核内存空间，在发生 IO 异常、宕机等异常情况下，使用零拷贝有可能会导致数据流的丢失。","source":"_posts/必知必会面试题之Java-IO流.md","raw":"---\ntitle: 必知必会面试题之Java IO 流\ndate: 2021-01-24\nupdated: 2021-03-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [IO 流的种类](#IO流的种类) \n- [常见的 IO 流](#常见的IO流) \n  - [字节流](#字节流) \n  - [字符流](#字符流) \n- [常见的 IO 类型](#常见的 IO 类型) \n  - [BIO](#BIO) \n  - [NIO](#NIO) \n  - [AIO](#AIO) \n- [NIO 的组成](#NIO的组成) \n- [什么是零拷贝](#什么是零拷贝) \n\n---\n\n<!--more-->\n\n---\n\n## IO 流的种类\n\n- 按照流的流向，可以分为**输入流**和**输出流**；\n- 按照操作单元，可以分为**字节流**和**字符流**；\n- 按照流的角色，可以分为**节点流**和**处理流**。\n\n## 常见的 IO 流\n\n### 字节流\n\n- FileInputStream\n- FileOutputStream\n- PipedInputStream\n- PipedOutputStream\n- ByteArrayInputStream\n- ByteArrayOutputStream\n- BufferedInputStream\n- BufferedOutputStream\n- DataInputStream\n- DataOutputStream\n- ObjectInputStream\n- ObjectOutputStream\n- SequenceInputStream\n- PrintOutputStream\n\n### 字符流\n\n- FileReader\n- FileWriter\n- PipedReader\n- PipedWriter\n- CharArrayReader\n- CharArrayWriter\n- BufferedReader\n- BufferedWriter\n- InputStreamReader\n\n- OutputStreamWriter\n- PrintWriter\n\n## 常见的 IO 类型\n\n### BIO\n\nBIO 是指**同步阻塞 IO（Blocking I/O）**。一次数据的读取或写入会阻塞当前线程，直到本次数据传输结束。操作简单，适合活动连接数较小的情况。\n\n### NIO\n\nNIO 是在 Java 1.4 中引入的新的 I/O 模型，因为被称为 New IO。但随着技术的快速发展，NIO 也不再“新”了，因此，我们现在更习惯以它的特性来称其为：**同步非阻塞 IO（Non-Blocking I/O）**。\n\nNIO 提供了 Channel、Selector、Buffer 等抽象，实现了多路复用。此外，NIO 还提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，分别对应 BIO 中的 Socket 和 ServerSocket。\n\n>  **NIO 并非只是非阻塞的**，NIO 同时支持阻塞、非阻塞两种模式，只是因为 NIO 主要就是为了提高 IO 性能而诞生的，所以强调了其核心特性：非阻塞。在日常使用中，我们也更为倾向于 NIO 的非阻塞模式，以获得更高的吞吐量和并发量。\n\n### AIO\n\nAIO 是在 Java 7 中引入的**异步非阻塞 IO（Asynchronous I/O）**。AIO 是基于事件和回调机制实现的，当操作发生后，会直接得到返回，释放 IO 资源，实际操作的执行则交给其他线程来处理，处理完成后通知相应的线程进行后续的操作。\n\n## NIO 的组成\n\n- 缓冲区（Buffer）：用来存储待传输的数据，通过 Channel 进行数据传输。\n\n- 直接缓冲区（DirectByteBuffer）：使用堆外内存创建的缓冲区，可以减少一次堆内内存到堆外内存的数据拷贝。\n\n  > 使用堆外内存创建和销毁缓冲区的成本更高且不可控，通常会使用内存池来提高性能。\n\n- 通道（Channel）：用来建立数据传输需要的连接，并传输 Buffer 中的数据。\n\n  > 数据虽然需要通过 Channel 进行传输，但 Channel 是不直接操作数据的，Channel 只负责建立连接并确认传输内容，实际数据的传输是通过\n\n- 选择器（Selector）：用来管理 Channel 和分配\n\n## 什么是零拷贝\n\n在 Java 程序中，使用 **read() 或 write() 方法拷贝**，需要在堆内开辟内存空间存储文件流，再从堆内拷贝到堆外，最后从堆外拷贝到操作系统内核，由 DMA 读写到磁盘。期间需要经过两次复制，且用户态和内核态的交互，因此传输效率较慢。\n\n而在操作系统中提供了 **mmap() 方法**，我们可以在程序中调用该方法，系统会直接在内核开辟内存空间，直接将文件流传输到内核开辟出的内存空间，由 DMA 读写到磁盘。该方法通过减少文件流的拷贝过程和用户态、内核态的交互，从而提高了文件传输的效率。我们把这种方法，称为“零拷贝”。\n\n当然，零拷贝虽然可以提高文件传输效率，但也并非没有缺点的。由于程序直接传入内核内存空间，在发生 IO 异常、宕机等异常情况下，使用零拷贝有可能会导致数据流的丢失。","slug":"必知必会面试题之Java-IO流","published":1,"_id":"ckluyw82s000vpt6a29r0gfln","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#IO%E6%B5%81%E7%9A%84%E7%A7%8D%E7%B1%BB\">IO 流的种类</a> </li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%B5%81\">常见的 IO 流</a> <ul>\n<li><a href=\"#%E5%AD%97%E8%8A%82%E6%B5%81\">字节流</a> </li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E6%B5%81\">字符流</a> </li>\n</ul>\n</li>\n<li>[常见的 IO 类型](#常见的 IO 类型) <ul>\n<li><a href=\"#BIO\">BIO</a> </li>\n<li><a href=\"#NIO\">NIO</a> </li>\n<li><a href=\"#AIO\">AIO</a> </li>\n</ul>\n</li>\n<li><a href=\"#NIO%E7%9A%84%E7%BB%84%E6%88%90\">NIO 的组成</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E6%8B%B7%E8%B4%9D\">什么是零拷贝</a> </li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"IO-流的种类\"><a href=\"#IO-流的种类\" class=\"headerlink\" title=\"IO 流的种类\"></a>IO 流的种类</h2><ul>\n<li>按照流的流向，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元，可以分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色，可以分为<strong>节点流</strong>和<strong>处理流</strong>。</li>\n</ul>\n<h2 id=\"常见的-IO-流\"><a href=\"#常见的-IO-流\" class=\"headerlink\" title=\"常见的 IO 流\"></a>常见的 IO 流</h2><h3 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h3><ul>\n<li>FileInputStream</li>\n<li>FileOutputStream</li>\n<li>PipedInputStream</li>\n<li>PipedOutputStream</li>\n<li>ByteArrayInputStream</li>\n<li>ByteArrayOutputStream</li>\n<li>BufferedInputStream</li>\n<li>BufferedOutputStream</li>\n<li>DataInputStream</li>\n<li>DataOutputStream</li>\n<li>ObjectInputStream</li>\n<li>ObjectOutputStream</li>\n<li>SequenceInputStream</li>\n<li>PrintOutputStream</li>\n</ul>\n<h3 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h3><ul>\n<li><p>FileReader</p>\n</li>\n<li><p>FileWriter</p>\n</li>\n<li><p>PipedReader</p>\n</li>\n<li><p>PipedWriter</p>\n</li>\n<li><p>CharArrayReader</p>\n</li>\n<li><p>CharArrayWriter</p>\n</li>\n<li><p>BufferedReader</p>\n</li>\n<li><p>BufferedWriter</p>\n</li>\n<li><p>InputStreamReader</p>\n</li>\n<li><p>OutputStreamWriter</p>\n</li>\n<li><p>PrintWriter</p>\n</li>\n</ul>\n<h2 id=\"常见的-IO-类型\"><a href=\"#常见的-IO-类型\" class=\"headerlink\" title=\"常见的 IO 类型\"></a>常见的 IO 类型</h2><h3 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h3><p>BIO 是指<strong>同步阻塞 IO（Blocking I/O）</strong>。一次数据的读取或写入会阻塞当前线程，直到本次数据传输结束。操作简单，适合活动连接数较小的情况。</p>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><p>NIO 是在 Java 1.4 中引入的新的 I/O 模型，因为被称为 New IO。但随着技术的快速发展，NIO 也不再“新”了，因此，我们现在更习惯以它的特性来称其为：<strong>同步非阻塞 IO（Non-Blocking I/O）</strong>。</p>\n<p>NIO 提供了 Channel、Selector、Buffer 等抽象，实现了多路复用。此外，NIO 还提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，分别对应 BIO 中的 Socket 和 ServerSocket。</p>\n<blockquote>\n<p> <strong>NIO 并非只是非阻塞的</strong>，NIO 同时支持阻塞、非阻塞两种模式，只是因为 NIO 主要就是为了提高 IO 性能而诞生的，所以强调了其核心特性：非阻塞。在日常使用中，我们也更为倾向于 NIO 的非阻塞模式，以获得更高的吞吐量和并发量。</p>\n</blockquote>\n<h3 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h3><p>AIO 是在 Java 7 中引入的<strong>异步非阻塞 IO（Asynchronous I/O）</strong>。AIO 是基于事件和回调机制实现的，当操作发生后，会直接得到返回，释放 IO 资源，实际操作的执行则交给其他线程来处理，处理完成后通知相应的线程进行后续的操作。</p>\n<h2 id=\"NIO-的组成\"><a href=\"#NIO-的组成\" class=\"headerlink\" title=\"NIO 的组成\"></a>NIO 的组成</h2><ul>\n<li><p>缓冲区（Buffer）：用来存储待传输的数据，通过 Channel 进行数据传输。</p>\n</li>\n<li><p>直接缓冲区（DirectByteBuffer）：使用堆外内存创建的缓冲区，可以减少一次堆内内存到堆外内存的数据拷贝。</p>\n<blockquote>\n<p>使用堆外内存创建和销毁缓冲区的成本更高且不可控，通常会使用内存池来提高性能。</p>\n</blockquote>\n</li>\n<li><p>通道（Channel）：用来建立数据传输需要的连接，并传输 Buffer 中的数据。</p>\n<blockquote>\n<p>数据虽然需要通过 Channel 进行传输，但 Channel 是不直接操作数据的，Channel 只负责建立连接并确认传输内容，实际数据的传输是通过</p>\n</blockquote>\n</li>\n<li><p>选择器（Selector）：用来管理 Channel 和分配</p>\n</li>\n</ul>\n<h2 id=\"什么是零拷贝\"><a href=\"#什么是零拷贝\" class=\"headerlink\" title=\"什么是零拷贝\"></a>什么是零拷贝</h2><p>在 Java 程序中，使用 <strong>read() 或 write() 方法拷贝</strong>，需要在堆内开辟内存空间存储文件流，再从堆内拷贝到堆外，最后从堆外拷贝到操作系统内核，由 DMA 读写到磁盘。期间需要经过两次复制，且用户态和内核态的交互，因此传输效率较慢。</p>\n<p>而在操作系统中提供了 <strong>mmap() 方法</strong>，我们可以在程序中调用该方法，系统会直接在内核开辟内存空间，直接将文件流传输到内核开辟出的内存空间，由 DMA 读写到磁盘。该方法通过减少文件流的拷贝过程和用户态、内核态的交互，从而提高了文件传输的效率。我们把这种方法，称为“零拷贝”。</p>\n<p>当然，零拷贝虽然可以提高文件传输效率，但也并非没有缺点的。由于程序直接传入内核内存空间，在发生 IO 异常、宕机等异常情况下，使用零拷贝有可能会导致数据流的丢失。</p>\n","site":{"data":{}},"length":1687,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#IO%E6%B5%81%E7%9A%84%E7%A7%8D%E7%B1%BB\">IO 流的种类</a> </li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84IO%E6%B5%81\">常见的 IO 流</a> <ul>\n<li><a href=\"#%E5%AD%97%E8%8A%82%E6%B5%81\">字节流</a> </li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E6%B5%81\">字符流</a> </li>\n</ul>\n</li>\n<li>[常见的 IO 类型](#常见的 IO 类型) <ul>\n<li><a href=\"#BIO\">BIO</a> </li>\n<li><a href=\"#NIO\">NIO</a> </li>\n<li><a href=\"#AIO\">AIO</a> </li>\n</ul>\n</li>\n<li><a href=\"#NIO%E7%9A%84%E7%BB%84%E6%88%90\">NIO 的组成</a> </li>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E6%8B%B7%E8%B4%9D\">什么是零拷贝</a> </li>\n</ul>\n<hr>","more":"<hr>\n<h2 id=\"IO-流的种类\"><a href=\"#IO-流的种类\" class=\"headerlink\" title=\"IO 流的种类\"></a>IO 流的种类</h2><ul>\n<li>按照流的流向，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li>\n<li>按照操作单元，可以分为<strong>字节流</strong>和<strong>字符流</strong>；</li>\n<li>按照流的角色，可以分为<strong>节点流</strong>和<strong>处理流</strong>。</li>\n</ul>\n<h2 id=\"常见的-IO-流\"><a href=\"#常见的-IO-流\" class=\"headerlink\" title=\"常见的 IO 流\"></a>常见的 IO 流</h2><h3 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h3><ul>\n<li>FileInputStream</li>\n<li>FileOutputStream</li>\n<li>PipedInputStream</li>\n<li>PipedOutputStream</li>\n<li>ByteArrayInputStream</li>\n<li>ByteArrayOutputStream</li>\n<li>BufferedInputStream</li>\n<li>BufferedOutputStream</li>\n<li>DataInputStream</li>\n<li>DataOutputStream</li>\n<li>ObjectInputStream</li>\n<li>ObjectOutputStream</li>\n<li>SequenceInputStream</li>\n<li>PrintOutputStream</li>\n</ul>\n<h3 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h3><ul>\n<li><p>FileReader</p>\n</li>\n<li><p>FileWriter</p>\n</li>\n<li><p>PipedReader</p>\n</li>\n<li><p>PipedWriter</p>\n</li>\n<li><p>CharArrayReader</p>\n</li>\n<li><p>CharArrayWriter</p>\n</li>\n<li><p>BufferedReader</p>\n</li>\n<li><p>BufferedWriter</p>\n</li>\n<li><p>InputStreamReader</p>\n</li>\n<li><p>OutputStreamWriter</p>\n</li>\n<li><p>PrintWriter</p>\n</li>\n</ul>\n<h2 id=\"常见的-IO-类型\"><a href=\"#常见的-IO-类型\" class=\"headerlink\" title=\"常见的 IO 类型\"></a>常见的 IO 类型</h2><h3 id=\"BIO\"><a href=\"#BIO\" class=\"headerlink\" title=\"BIO\"></a>BIO</h3><p>BIO 是指<strong>同步阻塞 IO（Blocking I/O）</strong>。一次数据的读取或写入会阻塞当前线程，直到本次数据传输结束。操作简单，适合活动连接数较小的情况。</p>\n<h3 id=\"NIO\"><a href=\"#NIO\" class=\"headerlink\" title=\"NIO\"></a>NIO</h3><p>NIO 是在 Java 1.4 中引入的新的 I/O 模型，因为被称为 New IO。但随着技术的快速发展，NIO 也不再“新”了，因此，我们现在更习惯以它的特性来称其为：<strong>同步非阻塞 IO（Non-Blocking I/O）</strong>。</p>\n<p>NIO 提供了 Channel、Selector、Buffer 等抽象，实现了多路复用。此外，NIO 还提供了 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现，分别对应 BIO 中的 Socket 和 ServerSocket。</p>\n<blockquote>\n<p> <strong>NIO 并非只是非阻塞的</strong>，NIO 同时支持阻塞、非阻塞两种模式，只是因为 NIO 主要就是为了提高 IO 性能而诞生的，所以强调了其核心特性：非阻塞。在日常使用中，我们也更为倾向于 NIO 的非阻塞模式，以获得更高的吞吐量和并发量。</p>\n</blockquote>\n<h3 id=\"AIO\"><a href=\"#AIO\" class=\"headerlink\" title=\"AIO\"></a>AIO</h3><p>AIO 是在 Java 7 中引入的<strong>异步非阻塞 IO（Asynchronous I/O）</strong>。AIO 是基于事件和回调机制实现的，当操作发生后，会直接得到返回，释放 IO 资源，实际操作的执行则交给其他线程来处理，处理完成后通知相应的线程进行后续的操作。</p>\n<h2 id=\"NIO-的组成\"><a href=\"#NIO-的组成\" class=\"headerlink\" title=\"NIO 的组成\"></a>NIO 的组成</h2><ul>\n<li><p>缓冲区（Buffer）：用来存储待传输的数据，通过 Channel 进行数据传输。</p>\n</li>\n<li><p>直接缓冲区（DirectByteBuffer）：使用堆外内存创建的缓冲区，可以减少一次堆内内存到堆外内存的数据拷贝。</p>\n<blockquote>\n<p>使用堆外内存创建和销毁缓冲区的成本更高且不可控，通常会使用内存池来提高性能。</p>\n</blockquote>\n</li>\n<li><p>通道（Channel）：用来建立数据传输需要的连接，并传输 Buffer 中的数据。</p>\n<blockquote>\n<p>数据虽然需要通过 Channel 进行传输，但 Channel 是不直接操作数据的，Channel 只负责建立连接并确认传输内容，实际数据的传输是通过</p>\n</blockquote>\n</li>\n<li><p>选择器（Selector）：用来管理 Channel 和分配</p>\n</li>\n</ul>\n<h2 id=\"什么是零拷贝\"><a href=\"#什么是零拷贝\" class=\"headerlink\" title=\"什么是零拷贝\"></a>什么是零拷贝</h2><p>在 Java 程序中，使用 <strong>read() 或 write() 方法拷贝</strong>，需要在堆内开辟内存空间存储文件流，再从堆内拷贝到堆外，最后从堆外拷贝到操作系统内核，由 DMA 读写到磁盘。期间需要经过两次复制，且用户态和内核态的交互，因此传输效率较慢。</p>\n<p>而在操作系统中提供了 <strong>mmap() 方法</strong>，我们可以在程序中调用该方法，系统会直接在内核开辟内存空间，直接将文件流传输到内核开辟出的内存空间，由 DMA 读写到磁盘。该方法通过减少文件流的拷贝过程和用户态、内核态的交互，从而提高了文件传输的效率。我们把这种方法，称为“零拷贝”。</p>\n<p>当然，零拷贝虽然可以提高文件传输效率，但也并非没有缺点的。由于程序直接传入内核内存空间，在发生 IO 异常、宕机等异常情况下，使用零拷贝有可能会导致数据流的丢失。</p>"},{"title":"必知必会面试题之 Java 泛型","date":"2021-01-23T16:00:00.000Z","updated":"2021-01-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [泛型的类型安全](#泛型的类型安全) \n- [泛型上限](#泛型上限) \n- [泛型下限](#泛型下限) \n\n---\n\n<!--more-->\n\n---\n\n### 泛型的类型安全\n\nJDK 1.5 以后引入了泛型的概念，通过泛型能够帮助我们在程序处理中将处理逻辑抽象出来，提高代码复用性。泛型的使用一般遵循类型约束，以此保证泛型类型的安全性。举个例子：\n\n```java\nclass Person<T> {\n  // ...\n  private T atrribute;\n  public void setAtrribute(T atrribute) {\n    this.atrribute = atrribute;\n  }\n  public T getAtrribute() {\n    retrun atrribute;\n  }\n}\nclass PersonAtrribute {\n  private height;\n  private vision;\n  // ...\n}\nclass DuckAtrribute {\n  private tail;\n  private wing;\n  // ...\n}\nclass DemoService() {\n  Person person = new Person();\n  PersonAtrribute personAtrribute = new PersonAtrribute();\n  DuckAtrribute duckAtrribute = new DuckAtrribute();\n  person.setAtrribute(personAtrribute);\n  person.setAtrribute(duckAtrribute);\n}\n```\n\n上述例子中，DemoService 中错误地将 DuckAtrribute 放入了 Person 的扩展属性中，这显然是不合理的，这也就是我们所关注的泛型安全性问题。\n\n如果没有类型约束，泛型中就可以存放任何类型的东西，那么当你创建这样的一个泛型时，你就无法预知泛型的使用者会拿它做什么。也许有一天，你会发现自己设计的泛型已经在系统里使用地十分混乱，这显然不是我们设计时想要看到的。因此，我们需要对泛型进行约束。\n\n泛型约束包括两种：extends 和 super。extends 决定了泛型的上限，super 决定了泛型的下限。\n\n### 泛型上限\n\n```java\n// 泛型可以接受E类型或者E的子类类型。\n? extends E\n```\n\nextends 规定了泛型的上限。当泛型使用 extends 时，使用泛型的类所实现的类型都受 extends 继承类的约束，如果继承了 Person，泛型传进来 Duck 就是不被允许的。\n\n### 泛型下限\n\n```java\n// 可以接受E类型，或者E的父类型。\n? super E\n```\n\nsuper 规定了泛型的下限，当泛型使用 super 时，使用泛型的类所实现的类型都受 super 父类的约束，如果 super 的是一个属性类，属性类里包括 age 和 sex，那么实现泛型的时候就必须要具备这两种属性。","source":"_posts/必知必会面试题之Java泛型.md","raw":"---\ntitle: 必知必会面试题之 Java 泛型\ndate: 2021-01-24\nupdated: 2021-01-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [泛型的类型安全](#泛型的类型安全) \n- [泛型上限](#泛型上限) \n- [泛型下限](#泛型下限) \n\n---\n\n<!--more-->\n\n---\n\n### 泛型的类型安全\n\nJDK 1.5 以后引入了泛型的概念，通过泛型能够帮助我们在程序处理中将处理逻辑抽象出来，提高代码复用性。泛型的使用一般遵循类型约束，以此保证泛型类型的安全性。举个例子：\n\n```java\nclass Person<T> {\n  // ...\n  private T atrribute;\n  public void setAtrribute(T atrribute) {\n    this.atrribute = atrribute;\n  }\n  public T getAtrribute() {\n    retrun atrribute;\n  }\n}\nclass PersonAtrribute {\n  private height;\n  private vision;\n  // ...\n}\nclass DuckAtrribute {\n  private tail;\n  private wing;\n  // ...\n}\nclass DemoService() {\n  Person person = new Person();\n  PersonAtrribute personAtrribute = new PersonAtrribute();\n  DuckAtrribute duckAtrribute = new DuckAtrribute();\n  person.setAtrribute(personAtrribute);\n  person.setAtrribute(duckAtrribute);\n}\n```\n\n上述例子中，DemoService 中错误地将 DuckAtrribute 放入了 Person 的扩展属性中，这显然是不合理的，这也就是我们所关注的泛型安全性问题。\n\n如果没有类型约束，泛型中就可以存放任何类型的东西，那么当你创建这样的一个泛型时，你就无法预知泛型的使用者会拿它做什么。也许有一天，你会发现自己设计的泛型已经在系统里使用地十分混乱，这显然不是我们设计时想要看到的。因此，我们需要对泛型进行约束。\n\n泛型约束包括两种：extends 和 super。extends 决定了泛型的上限，super 决定了泛型的下限。\n\n### 泛型上限\n\n```java\n// 泛型可以接受E类型或者E的子类类型。\n? extends E\n```\n\nextends 规定了泛型的上限。当泛型使用 extends 时，使用泛型的类所实现的类型都受 extends 继承类的约束，如果继承了 Person，泛型传进来 Duck 就是不被允许的。\n\n### 泛型下限\n\n```java\n// 可以接受E类型，或者E的父类型。\n? super E\n```\n\nsuper 规定了泛型的下限，当泛型使用 super 时，使用泛型的类所实现的类型都受 super 父类的约束，如果 super 的是一个属性类，属性类里包括 age 和 sex，那么实现泛型的时候就必须要具备这两种属性。","slug":"必知必会面试题之Java泛型","published":1,"_id":"ckluyxjbe0017pt6a1gse0on0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8\">泛型的类型安全</a> </li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E4%B8%8A%E9%99%90\">泛型上限</a> </li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E4%B8%8B%E9%99%90\">泛型下限</a> </li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"泛型的类型安全\"><a href=\"#泛型的类型安全\" class=\"headerlink\" title=\"泛型的类型安全\"></a>泛型的类型安全</h3><p>JDK 1.5 以后引入了泛型的概念，通过泛型能够帮助我们在程序处理中将处理逻辑抽象出来，提高代码复用性。泛型的使用一般遵循类型约束，以此保证泛型类型的安全性。举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> T atrribute;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAtrribute</span><span class=\"params\">(T atrribute)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.atrribute = atrribute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getAtrribute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    retrun atrribute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonAtrribute</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> height;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> vision;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DuckAtrribute</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> tail;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> wing;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoService</span>() </span>&#123;</span><br><span class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">  PersonAtrribute personAtrribute = <span class=\"keyword\">new</span> PersonAtrribute();</span><br><span class=\"line\">  DuckAtrribute duckAtrribute = <span class=\"keyword\">new</span> DuckAtrribute();</span><br><span class=\"line\">  person.setAtrribute(personAtrribute);</span><br><span class=\"line\">  person.setAtrribute(duckAtrribute);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，DemoService 中错误地将 DuckAtrribute 放入了 Person 的扩展属性中，这显然是不合理的，这也就是我们所关注的泛型安全性问题。</p>\n<p>如果没有类型约束，泛型中就可以存放任何类型的东西，那么当你创建这样的一个泛型时，你就无法预知泛型的使用者会拿它做什么。也许有一天，你会发现自己设计的泛型已经在系统里使用地十分混乱，这显然不是我们设计时想要看到的。因此，我们需要对泛型进行约束。</p>\n<p>泛型约束包括两种：extends 和 super。extends 决定了泛型的上限，super 决定了泛型的下限。</p>\n<h3 id=\"泛型上限\"><a href=\"#泛型上限\" class=\"headerlink\" title=\"泛型上限\"></a>泛型上限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型可以接受E类型或者E的子类类型。</span></span><br><span class=\"line\">? extends E</span><br></pre></td></tr></table></figure>\n\n<p>extends 规定了泛型的上限。当泛型使用 extends 时，使用泛型的类所实现的类型都受 extends 继承类的约束，如果继承了 Person，泛型传进来 Duck 就是不被允许的。</p>\n<h3 id=\"泛型下限\"><a href=\"#泛型下限\" class=\"headerlink\" title=\"泛型下限\"></a>泛型下限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以接受E类型，或者E的父类型。</span></span><br><span class=\"line\">? <span class=\"keyword\">super</span> E</span><br></pre></td></tr></table></figure>\n\n<p>super 规定了泛型的下限，当泛型使用 super 时，使用泛型的类所实现的类型都受 super 父类的约束，如果 super 的是一个属性类，属性类里包括 age 和 sex，那么实现泛型的时候就必须要具备这两种属性。</p>\n","site":{"data":{}},"length":1190,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8\">泛型的类型安全</a> </li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E4%B8%8A%E9%99%90\">泛型上限</a> </li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B%E4%B8%8B%E9%99%90\">泛型下限</a> </li>\n</ul>\n<hr>","more":"<hr>\n<h3 id=\"泛型的类型安全\"><a href=\"#泛型的类型安全\" class=\"headerlink\" title=\"泛型的类型安全\"></a>泛型的类型安全</h3><p>JDK 1.5 以后引入了泛型的概念，通过泛型能够帮助我们在程序处理中将处理逻辑抽象出来，提高代码复用性。泛型的使用一般遵循类型约束，以此保证泛型类型的安全性。举个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> T atrribute;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAtrribute</span><span class=\"params\">(T atrribute)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.atrribute = atrribute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getAtrribute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    retrun atrribute;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonAtrribute</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> height;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> vision;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DuckAtrribute</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> tail;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> wing;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoService</span>() </span>&#123;</span><br><span class=\"line\">  Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">  PersonAtrribute personAtrribute = <span class=\"keyword\">new</span> PersonAtrribute();</span><br><span class=\"line\">  DuckAtrribute duckAtrribute = <span class=\"keyword\">new</span> DuckAtrribute();</span><br><span class=\"line\">  person.setAtrribute(personAtrribute);</span><br><span class=\"line\">  person.setAtrribute(duckAtrribute);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，DemoService 中错误地将 DuckAtrribute 放入了 Person 的扩展属性中，这显然是不合理的，这也就是我们所关注的泛型安全性问题。</p>\n<p>如果没有类型约束，泛型中就可以存放任何类型的东西，那么当你创建这样的一个泛型时，你就无法预知泛型的使用者会拿它做什么。也许有一天，你会发现自己设计的泛型已经在系统里使用地十分混乱，这显然不是我们设计时想要看到的。因此，我们需要对泛型进行约束。</p>\n<p>泛型约束包括两种：extends 和 super。extends 决定了泛型的上限，super 决定了泛型的下限。</p>\n<h3 id=\"泛型上限\"><a href=\"#泛型上限\" class=\"headerlink\" title=\"泛型上限\"></a>泛型上限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型可以接受E类型或者E的子类类型。</span></span><br><span class=\"line\">? extends E</span><br></pre></td></tr></table></figure>\n\n<p>extends 规定了泛型的上限。当泛型使用 extends 时，使用泛型的类所实现的类型都受 extends 继承类的约束，如果继承了 Person，泛型传进来 Duck 就是不被允许的。</p>\n<h3 id=\"泛型下限\"><a href=\"#泛型下限\" class=\"headerlink\" title=\"泛型下限\"></a>泛型下限</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以接受E类型，或者E的父类型。</span></span><br><span class=\"line\">? <span class=\"keyword\">super</span> E</span><br></pre></td></tr></table></figure>\n\n<p>super 规定了泛型的下限，当泛型使用 super 时，使用泛型的类所实现的类型都受 super 父类的约束，如果 super 的是一个属性类，属性类里包括 age 和 sex，那么实现泛型的时候就必须要具备这两种属性。</p>"},{"title":"必知必会面试题之 Java 反射","date":"2021-01-23T16:00:00.000Z","updated":"2021-01-23T16:00:00.000Z","_content":"\n## 目录\n\n不定期更新中……\n\n- [反射的实现原理](#反射的实现原理) \n- [注解的实现原理](#注解的实现原理) \n- [反射是否可以调用私有方法、获取参数名、获取父类私有方法？](#反射是否可以调用私有方法、获取参数名、获取父类私有方法？)  \n\n---\n\n<!--more-->\n\n---\n\n### 反射的实现原理\n\n在 Java 中是通过 Class.forName(classname) 来获取类的信息，实现反射机制的。\n\n### 注解的实现原理\n\n注解是基于 Java 反射来实现的。\n\n### 反射是否可以调用私有方法、获取参数名、获取父类私有方法？\n\n可以。我们可以通过反射拿到对应的 class 对象，然后通过 class.getDeclaredConstructors() 拿到全部构造器，获取构造器的名称、参数、修饰符等信息；可以通过 class.getDeclaredMethods() 拿到全部方法，获取方法的名称、参数、修饰符等信息；可以通过 class.getSuperclass().getDeclaredMethod() 获取父类全部方法。","source":"_posts/必知必会面试题之Java反射.md","raw":"---\ntitle: 必知必会面试题之 Java 反射\ndate: 2021-01-24\nupdated: 2021-01-24\ncategories:\n- Java\ntags:\n- Java\n- 面试\n---\n\n## 目录\n\n不定期更新中……\n\n- [反射的实现原理](#反射的实现原理) \n- [注解的实现原理](#注解的实现原理) \n- [反射是否可以调用私有方法、获取参数名、获取父类私有方法？](#反射是否可以调用私有方法、获取参数名、获取父类私有方法？)  \n\n---\n\n<!--more-->\n\n---\n\n### 反射的实现原理\n\n在 Java 中是通过 Class.forName(classname) 来获取类的信息，实现反射机制的。\n\n### 注解的实现原理\n\n注解是基于 Java 反射来实现的。\n\n### 反射是否可以调用私有方法、获取参数名、获取父类私有方法？\n\n可以。我们可以通过反射拿到对应的 class 对象，然后通过 class.getDeclaredConstructors() 拿到全部构造器，获取构造器的名称、参数、修饰符等信息；可以通过 class.getDeclaredMethods() 拿到全部方法，获取方法的名称、参数、修饰符等信息；可以通过 class.getSuperclass().getDeclaredMethod() 获取父类全部方法。","slug":"必知必会面试题之Java反射","published":1,"_id":"ckluyxpba001bpt6acdm13wy5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">反射的实现原理</a> </li>\n<li><a href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">注解的实现原理</a> </li>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%E3%80%81%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%81%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%9F\">反射是否可以调用私有方法、获取参数名、获取父类私有方法？</a>  </li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"反射的实现原理\"><a href=\"#反射的实现原理\" class=\"headerlink\" title=\"反射的实现原理\"></a>反射的实现原理</h3><p>在 Java 中是通过 Class.forName(classname) 来获取类的信息，实现反射机制的。</p>\n<h3 id=\"注解的实现原理\"><a href=\"#注解的实现原理\" class=\"headerlink\" title=\"注解的实现原理\"></a>注解的实现原理</h3><p>注解是基于 Java 反射来实现的。</p>\n<h3 id=\"反射是否可以调用私有方法、获取参数名、获取父类私有方法？\"><a href=\"#反射是否可以调用私有方法、获取参数名、获取父类私有方法？\" class=\"headerlink\" title=\"反射是否可以调用私有方法、获取参数名、获取父类私有方法？\"></a>反射是否可以调用私有方法、获取参数名、获取父类私有方法？</h3><p>可以。我们可以通过反射拿到对应的 class 对象，然后通过 class.getDeclaredConstructors() 拿到全部构造器，获取构造器的名称、参数、修饰符等信息；可以通过 class.getDeclaredMethods() 拿到全部方法，获取方法的名称、参数、修饰符等信息；可以通过 class.getSuperclass().getDeclaredMethod() 获取父类全部方法。</p>\n","site":{"data":{}},"length":354,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<ul>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">反射的实现原理</a> </li>\n<li><a href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">注解的实现原理</a> </li>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%B0%83%E7%94%A8%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%E3%80%81%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%81%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%9F\">反射是否可以调用私有方法、获取参数名、获取父类私有方法？</a>  </li>\n</ul>\n<hr>","more":"<hr>\n<h3 id=\"反射的实现原理\"><a href=\"#反射的实现原理\" class=\"headerlink\" title=\"反射的实现原理\"></a>反射的实现原理</h3><p>在 Java 中是通过 Class.forName(classname) 来获取类的信息，实现反射机制的。</p>\n<h3 id=\"注解的实现原理\"><a href=\"#注解的实现原理\" class=\"headerlink\" title=\"注解的实现原理\"></a>注解的实现原理</h3><p>注解是基于 Java 反射来实现的。</p>\n<h3 id=\"反射是否可以调用私有方法、获取参数名、获取父类私有方法？\"><a href=\"#反射是否可以调用私有方法、获取参数名、获取父类私有方法？\" class=\"headerlink\" title=\"反射是否可以调用私有方法、获取参数名、获取父类私有方法？\"></a>反射是否可以调用私有方法、获取参数名、获取父类私有方法？</h3><p>可以。我们可以通过反射拿到对应的 class 对象，然后通过 class.getDeclaredConstructors() 拿到全部构造器，获取构造器的名称、参数、修饰符等信息；可以通过 class.getDeclaredMethods() 拿到全部方法，获取方法的名称、参数、修饰符等信息；可以通过 class.getSuperclass().getDeclaredMethod() 获取父类全部方法。</p>"},{"title":"开源世界里的重要理念：上游优先（UpStream First）","date":"2021-02-27T16:00:00.000Z","updated":"2021-02-27T16:00:00.000Z","_content":"\n## 引子\n\n2016 年，Thomas Cameron 在一次五分钟闪电演讲中提到了“Upstream first”的概念，也就是我们所说的“上游优先”：\n\n> Part of Red Hat's commitment to open source, Cameron explains, is committing code to upstream projects. The company is a top contributor to the Linux kernel, glibc/GCC, OpenStack/RDO, KVM, JBoss.org projects, GNOME, and more.\n>\n> \"We recognize that we are beholden to open source communities for our success,\" Cameron said. \"And we owe a debt of gratitude to those open source communities and we are responsible for contributing as much code as we can back to those communities because everyone gets better when we do that.\"\n\n---\n\n<!--more-->\n\n---\n\n将这次演讲单独说明，是因为这是目前找到的关于“Upstream first”的最早资料，但这并不代表就是它的出处，上游优先这一概念的出处尚需考究。\n\n2017 年，Dave Neary 在 TM 会场上阐述了“Upstream first”对开源世界的重要性：\n\n> “Upstream first” development is the idea that any changes (features, bug fixes) which you want to include in a product based on an open source project should be submitted to the project first, before being included in the product. This ensures that you minimize your long-term maintenance burden.\n>\n> ……\n>\n> By engaging upstream first, you can get quick course corrections when your initial approach does not match community expectations, and you maintain patches against the very latest development tree. By building relationships with the upstream community, you will have an easier time getting changes accepted. And you maintain the possibility to ship features or patches in earlier versions by “backporting” features to the stable branch on which you have based your product.\n\n在读完上面的案例，相信你一定对上游优先有了一定的好奇：上游优先究竟是什么呢？它对开源社区有什么影响呢？\n\n下面，让我们带着疑问一起来了解一下。\n\n## 什么是上游优先？\n\n直接与开源社区互动并在源头上解决问题的办法，被称为上游优先（Upstream first）。\n\n所谓上游，是一个相对的概念，意为“靠近源头的一方”。在开源社区中，主要指的是开源社区维护的主干版本。而所谓下游，是指基于上游开源项目衍生出的项目或产品。在 Github、Gitee 等代码管理平台中对开源项目的 fork 操作，就是一种对上游代码的拓展。\n\n那么，上游优先就很好理解了：基于开源项目的任何修改都应该提交优先提交给项目本身，然后再包含在自己的产品中。与之相反的处理方式是只基于自己产品进行维护，对上游不做反馈。\n\n## 为什么要使用“上游优先”？\n\n上游优先是开源社区提出的优秀的开源理念，那么它优秀在哪里呢？\n\n**举个简单的例子：** \n\n葵花派长老将葵花点穴手传授给了白展堂和祝无双，在每次施展葵花点穴手时，都需要大喊一声：“葵花点穴手！”\n\n这一天，长老对两人说：堂堂、双双，你们修炼已经圆满，为师已经没有什么能够传授给你们的了，各自下山游历吧！说罢便闭关修炼去了。\n\n白展堂来到了同福客栈，因为葵花点穴手需要念五个字，被郭芙蓉四个字的排山倒海打得鼻青脸肿。\n\n正所谓人总是在被虐中成长，白展堂发现使用一种手法只需要喊“葵花点”就可以施展武功，终于打败郭芙蓉。\n\n随后，白展堂回到葵花派，将这种手法汇报给了长老，长老飞鸽传书，告知了所有门派弟子。\n\n葵花派从此发扬光大，双双成为了衙门的捕快，各大弟子也都成为了惩恶扬善的侠客！\n\n**那么问题来了：如果白展堂没有将这种手法告知长老，会怎么样呢？** \n\n有两种可能。\n\n其一，白展堂此生未收徒，葵花派因“葵花点穴手”需要念五个字，逐渐式微，从此江湖再也没有葵花派的威名。\n\n其二，白展堂广收门徒，每日传授和教导子弟，将“葵花点”手法发扬光大，但每日忙忙碌碌，不仅要教导弟子学习“葵花点”手法，还要回葵花派学习长老闭关研习出来的新武功。\n\n**说到这里，我想大家已经明白了我所要表达的意思了。** \n\n白展堂研究出“葵花点”的手法后，回门派告知长老，这种行为就是“上游优先”。\n\n为什么要使用“上游优先”？相信从这则小故事不难看出：\n\n- **利于上游合并**：随着时间的推移，下游的修改越晚反馈给上游，上游变越难合并下游的修改。\n  - 假如白展堂在临死前再将“葵花点”手法告知门派，门派的葵花点穴手早就出到 9527 版了，手法可能很难和 9527 版葵花点穴手融合。\n- **减轻维护负担**：下游自己维护的成本太高，提高给上游维护，会降低下游维护成本。\n  - 葵花派除了长老授课以外，要求白展堂单独授课讲解“葵花点”手法，白展堂打王者荣耀的时间都没有了，更别说研习新武功。白展堂整理出手法秘籍交给长老，由长老统一传授，白展堂又可以快意江湖了。\n- **便于合作共赢**：通过和上游合作，可以更为顺畅地与上游达成一致，得到上游的认可，也更容易将上游的修改合并进来。\n  - 白展堂因贡献了“葵花点”手法被尊称为首席大弟子，长老在“葵花点”的基础上研习出提高葵花点穴手定身时长的法门，白展堂第一时间得到秘籍修炼，如鱼得水。\n  - 反之，白展堂没有贡献“葵花点”手法自己自行修炼，长老研习出提高葵花点穴手定身时长的法门，白展堂发现和“葵花点”手法运功路线不一致，难以习得新版葵花点穴手，无法提升威力。\n\n## 使用“上游优先”需要做什么？\n\n首先，需要**与上游达成合作**。达成合作是反馈给上游的捷径，越密切的合作者提出的想法，越容易被上游所接受。\n\n其次，需要**保持与上游的沟通**。达成合作不是一蹴而就的事情，需要与上游加强沟通，及时了解上游动态，否则，无法确保你的想法与上游的想法是否一致。\n\n最后，需要**将修改及时反馈给上游**。上游的修改需要成本，及时的反馈可以节省成本，这也是上游收费接收下游修改的一个重要标准。及时的反馈，能够让合作变得更加通畅。\n\n## 哪些开源组织或公司使用“上游优先”？\n\n在开源世界中，开源项目对“上游优先”的宣传并不多，但实际上大部分开源项目对“上游优先”都是非常认可的。\n\n“上游优先”的理念更加像是一种约定俗成，除了一些知名开源项目可能有提到或宣讲过该理念以外，更多的是默默践行这一理念。有很多开源项目没有对“上游优先”做过多的解释，但在开源过程中对开源项目的必要修改都会反馈到上游。\n\n下面列举一些明确采用“上游优先”的部分开源组织或公司：\n\n- RedHat：红帽组织对“上游优先”可谓是彻底贯彻，网站上能够搜到的关于“上游优先”的文章和演讲，红帽可谓是不遗余力。\n- OpenEuler：OpenEuler 是华为的一个开源项目，用 OpenEuler 自己的话来说：OpenEuler 来自于社区，回馈到社区。\n- Google Chromium：Google Chromium 官方的 Design Documents 中，将 Upstream First 放在了 General 一栏中。\n- The Linux Foundation：LF 官网在“Best Practices to Contribute Code Upstream”中，可以找到 Upstream First 的介绍。\n- ……（更多案例，欢迎补充）\n\n## 特别感谢\n\n之所以编写本文，在此要特别感谢开源路上认识的杰克老师（码云ID：@jack960330 ）对我的指点和支持！\n\n## 参考资料\n\n- [Why Red Hat takes an 'upstream first' approach](https://opensource.com/article/16/12/why-red-hat-takes-upstream-first-approach) By  [Opensource.com (Red Hat)](https://opensource.com/users/admin) [Dec 05, 2016]\n- [Upstream first: Building products from open source software](https://inform.tmforum.org/features-and-analysis/2017/05/upstream-first-building-products-open-source-software/) By [Dave Neary, SDN and NFV with Open Source at Red Hat](https://inform.tmforum.org/author/296076-dave-neary/) [May, 2017]\n- [开源软件项目的“上游优先”解惑](http://opensourceway.community/posts/opensource_culture/what_is_upstream_and_its_benefits/) By [opensourceway](http://opensourceway.community/posts/the_way_of_open_source/open_source_way/) [Nov 13, 2017]\n- [上游优先地开发](https://willemjiang.github.io/opensource/2019/10/29/UpStream-first.html) By [Willem Jiang‘s Blog](https://willemjiang.github.io/) [Oct 29, 2019]\n- [开源社区对开发者的价值到底有多大？](https://www.infoq.cn/article/zP9erqJmIK6IAWfUHBoW) By [Eileen](https://www.infoq.cn/profile/11D1D4FAE98CEA/publish) [Apr 29, 2020]","source":"_posts/开源世界里的重要理念：上游优先（UpStream-First）.md","raw":"---\ntitle: 开源世界里的重要理念：上游优先（UpStream First）\ndate: 2021-02-28\nupdated: 2021-02-28\ncategories:\n- 开源\ntags:\n- 开源\n---\n\n## 引子\n\n2016 年，Thomas Cameron 在一次五分钟闪电演讲中提到了“Upstream first”的概念，也就是我们所说的“上游优先”：\n\n> Part of Red Hat's commitment to open source, Cameron explains, is committing code to upstream projects. The company is a top contributor to the Linux kernel, glibc/GCC, OpenStack/RDO, KVM, JBoss.org projects, GNOME, and more.\n>\n> \"We recognize that we are beholden to open source communities for our success,\" Cameron said. \"And we owe a debt of gratitude to those open source communities and we are responsible for contributing as much code as we can back to those communities because everyone gets better when we do that.\"\n\n---\n\n<!--more-->\n\n---\n\n将这次演讲单独说明，是因为这是目前找到的关于“Upstream first”的最早资料，但这并不代表就是它的出处，上游优先这一概念的出处尚需考究。\n\n2017 年，Dave Neary 在 TM 会场上阐述了“Upstream first”对开源世界的重要性：\n\n> “Upstream first” development is the idea that any changes (features, bug fixes) which you want to include in a product based on an open source project should be submitted to the project first, before being included in the product. This ensures that you minimize your long-term maintenance burden.\n>\n> ……\n>\n> By engaging upstream first, you can get quick course corrections when your initial approach does not match community expectations, and you maintain patches against the very latest development tree. By building relationships with the upstream community, you will have an easier time getting changes accepted. And you maintain the possibility to ship features or patches in earlier versions by “backporting” features to the stable branch on which you have based your product.\n\n在读完上面的案例，相信你一定对上游优先有了一定的好奇：上游优先究竟是什么呢？它对开源社区有什么影响呢？\n\n下面，让我们带着疑问一起来了解一下。\n\n## 什么是上游优先？\n\n直接与开源社区互动并在源头上解决问题的办法，被称为上游优先（Upstream first）。\n\n所谓上游，是一个相对的概念，意为“靠近源头的一方”。在开源社区中，主要指的是开源社区维护的主干版本。而所谓下游，是指基于上游开源项目衍生出的项目或产品。在 Github、Gitee 等代码管理平台中对开源项目的 fork 操作，就是一种对上游代码的拓展。\n\n那么，上游优先就很好理解了：基于开源项目的任何修改都应该提交优先提交给项目本身，然后再包含在自己的产品中。与之相反的处理方式是只基于自己产品进行维护，对上游不做反馈。\n\n## 为什么要使用“上游优先”？\n\n上游优先是开源社区提出的优秀的开源理念，那么它优秀在哪里呢？\n\n**举个简单的例子：** \n\n葵花派长老将葵花点穴手传授给了白展堂和祝无双，在每次施展葵花点穴手时，都需要大喊一声：“葵花点穴手！”\n\n这一天，长老对两人说：堂堂、双双，你们修炼已经圆满，为师已经没有什么能够传授给你们的了，各自下山游历吧！说罢便闭关修炼去了。\n\n白展堂来到了同福客栈，因为葵花点穴手需要念五个字，被郭芙蓉四个字的排山倒海打得鼻青脸肿。\n\n正所谓人总是在被虐中成长，白展堂发现使用一种手法只需要喊“葵花点”就可以施展武功，终于打败郭芙蓉。\n\n随后，白展堂回到葵花派，将这种手法汇报给了长老，长老飞鸽传书，告知了所有门派弟子。\n\n葵花派从此发扬光大，双双成为了衙门的捕快，各大弟子也都成为了惩恶扬善的侠客！\n\n**那么问题来了：如果白展堂没有将这种手法告知长老，会怎么样呢？** \n\n有两种可能。\n\n其一，白展堂此生未收徒，葵花派因“葵花点穴手”需要念五个字，逐渐式微，从此江湖再也没有葵花派的威名。\n\n其二，白展堂广收门徒，每日传授和教导子弟，将“葵花点”手法发扬光大，但每日忙忙碌碌，不仅要教导弟子学习“葵花点”手法，还要回葵花派学习长老闭关研习出来的新武功。\n\n**说到这里，我想大家已经明白了我所要表达的意思了。** \n\n白展堂研究出“葵花点”的手法后，回门派告知长老，这种行为就是“上游优先”。\n\n为什么要使用“上游优先”？相信从这则小故事不难看出：\n\n- **利于上游合并**：随着时间的推移，下游的修改越晚反馈给上游，上游变越难合并下游的修改。\n  - 假如白展堂在临死前再将“葵花点”手法告知门派，门派的葵花点穴手早就出到 9527 版了，手法可能很难和 9527 版葵花点穴手融合。\n- **减轻维护负担**：下游自己维护的成本太高，提高给上游维护，会降低下游维护成本。\n  - 葵花派除了长老授课以外，要求白展堂单独授课讲解“葵花点”手法，白展堂打王者荣耀的时间都没有了，更别说研习新武功。白展堂整理出手法秘籍交给长老，由长老统一传授，白展堂又可以快意江湖了。\n- **便于合作共赢**：通过和上游合作，可以更为顺畅地与上游达成一致，得到上游的认可，也更容易将上游的修改合并进来。\n  - 白展堂因贡献了“葵花点”手法被尊称为首席大弟子，长老在“葵花点”的基础上研习出提高葵花点穴手定身时长的法门，白展堂第一时间得到秘籍修炼，如鱼得水。\n  - 反之，白展堂没有贡献“葵花点”手法自己自行修炼，长老研习出提高葵花点穴手定身时长的法门，白展堂发现和“葵花点”手法运功路线不一致，难以习得新版葵花点穴手，无法提升威力。\n\n## 使用“上游优先”需要做什么？\n\n首先，需要**与上游达成合作**。达成合作是反馈给上游的捷径，越密切的合作者提出的想法，越容易被上游所接受。\n\n其次，需要**保持与上游的沟通**。达成合作不是一蹴而就的事情，需要与上游加强沟通，及时了解上游动态，否则，无法确保你的想法与上游的想法是否一致。\n\n最后，需要**将修改及时反馈给上游**。上游的修改需要成本，及时的反馈可以节省成本，这也是上游收费接收下游修改的一个重要标准。及时的反馈，能够让合作变得更加通畅。\n\n## 哪些开源组织或公司使用“上游优先”？\n\n在开源世界中，开源项目对“上游优先”的宣传并不多，但实际上大部分开源项目对“上游优先”都是非常认可的。\n\n“上游优先”的理念更加像是一种约定俗成，除了一些知名开源项目可能有提到或宣讲过该理念以外，更多的是默默践行这一理念。有很多开源项目没有对“上游优先”做过多的解释，但在开源过程中对开源项目的必要修改都会反馈到上游。\n\n下面列举一些明确采用“上游优先”的部分开源组织或公司：\n\n- RedHat：红帽组织对“上游优先”可谓是彻底贯彻，网站上能够搜到的关于“上游优先”的文章和演讲，红帽可谓是不遗余力。\n- OpenEuler：OpenEuler 是华为的一个开源项目，用 OpenEuler 自己的话来说：OpenEuler 来自于社区，回馈到社区。\n- Google Chromium：Google Chromium 官方的 Design Documents 中，将 Upstream First 放在了 General 一栏中。\n- The Linux Foundation：LF 官网在“Best Practices to Contribute Code Upstream”中，可以找到 Upstream First 的介绍。\n- ……（更多案例，欢迎补充）\n\n## 特别感谢\n\n之所以编写本文，在此要特别感谢开源路上认识的杰克老师（码云ID：@jack960330 ）对我的指点和支持！\n\n## 参考资料\n\n- [Why Red Hat takes an 'upstream first' approach](https://opensource.com/article/16/12/why-red-hat-takes-upstream-first-approach) By  [Opensource.com (Red Hat)](https://opensource.com/users/admin) [Dec 05, 2016]\n- [Upstream first: Building products from open source software](https://inform.tmforum.org/features-and-analysis/2017/05/upstream-first-building-products-open-source-software/) By [Dave Neary, SDN and NFV with Open Source at Red Hat](https://inform.tmforum.org/author/296076-dave-neary/) [May, 2017]\n- [开源软件项目的“上游优先”解惑](http://opensourceway.community/posts/opensource_culture/what_is_upstream_and_its_benefits/) By [opensourceway](http://opensourceway.community/posts/the_way_of_open_source/open_source_way/) [Nov 13, 2017]\n- [上游优先地开发](https://willemjiang.github.io/opensource/2019/10/29/UpStream-first.html) By [Willem Jiang‘s Blog](https://willemjiang.github.io/) [Oct 29, 2019]\n- [开源社区对开发者的价值到底有多大？](https://www.infoq.cn/article/zP9erqJmIK6IAWfUHBoW) By [Eileen](https://www.infoq.cn/profile/11D1D4FAE98CEA/publish) [Apr 29, 2020]","slug":"开源世界里的重要理念：上游优先（UpStream-First）","published":1,"_id":"ckluz3bas001tpt6a81pedcis","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>2016 年，Thomas Cameron 在一次五分钟闪电演讲中提到了“Upstream first”的概念，也就是我们所说的“上游优先”：</p>\n<blockquote>\n<p>Part of Red Hat’s commitment to open source, Cameron explains, is committing code to upstream projects. The company is a top contributor to the Linux kernel, glibc/GCC, OpenStack/RDO, KVM, JBoss.org projects, GNOME, and more.</p>\n<p>“We recognize that we are beholden to open source communities for our success,” Cameron said. “And we owe a debt of gratitude to those open source communities and we are responsible for contributing as much code as we can back to those communities because everyone gets better when we do that.”</p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<p>将这次演讲单独说明，是因为这是目前找到的关于“Upstream first”的最早资料，但这并不代表就是它的出处，上游优先这一概念的出处尚需考究。</p>\n<p>2017 年，Dave Neary 在 TM 会场上阐述了“Upstream first”对开源世界的重要性：</p>\n<blockquote>\n<p>“Upstream first” development is the idea that any changes (features, bug fixes) which you want to include in a product based on an open source project should be submitted to the project first, before being included in the product. This ensures that you minimize your long-term maintenance burden.</p>\n<p>……</p>\n<p>By engaging upstream first, you can get quick course corrections when your initial approach does not match community expectations, and you maintain patches against the very latest development tree. By building relationships with the upstream community, you will have an easier time getting changes accepted. And you maintain the possibility to ship features or patches in earlier versions by “backporting” features to the stable branch on which you have based your product.</p>\n</blockquote>\n<p>在读完上面的案例，相信你一定对上游优先有了一定的好奇：上游优先究竟是什么呢？它对开源社区有什么影响呢？</p>\n<p>下面，让我们带着疑问一起来了解一下。</p>\n<h2 id=\"什么是上游优先？\"><a href=\"#什么是上游优先？\" class=\"headerlink\" title=\"什么是上游优先？\"></a>什么是上游优先？</h2><p>直接与开源社区互动并在源头上解决问题的办法，被称为上游优先（Upstream first）。</p>\n<p>所谓上游，是一个相对的概念，意为“靠近源头的一方”。在开源社区中，主要指的是开源社区维护的主干版本。而所谓下游，是指基于上游开源项目衍生出的项目或产品。在 Github、Gitee 等代码管理平台中对开源项目的 fork 操作，就是一种对上游代码的拓展。</p>\n<p>那么，上游优先就很好理解了：基于开源项目的任何修改都应该提交优先提交给项目本身，然后再包含在自己的产品中。与之相反的处理方式是只基于自己产品进行维护，对上游不做反馈。</p>\n<h2 id=\"为什么要使用“上游优先”？\"><a href=\"#为什么要使用“上游优先”？\" class=\"headerlink\" title=\"为什么要使用“上游优先”？\"></a>为什么要使用“上游优先”？</h2><p>上游优先是开源社区提出的优秀的开源理念，那么它优秀在哪里呢？</p>\n<p><strong>举个简单的例子：</strong> </p>\n<p>葵花派长老将葵花点穴手传授给了白展堂和祝无双，在每次施展葵花点穴手时，都需要大喊一声：“葵花点穴手！”</p>\n<p>这一天，长老对两人说：堂堂、双双，你们修炼已经圆满，为师已经没有什么能够传授给你们的了，各自下山游历吧！说罢便闭关修炼去了。</p>\n<p>白展堂来到了同福客栈，因为葵花点穴手需要念五个字，被郭芙蓉四个字的排山倒海打得鼻青脸肿。</p>\n<p>正所谓人总是在被虐中成长，白展堂发现使用一种手法只需要喊“葵花点”就可以施展武功，终于打败郭芙蓉。</p>\n<p>随后，白展堂回到葵花派，将这种手法汇报给了长老，长老飞鸽传书，告知了所有门派弟子。</p>\n<p>葵花派从此发扬光大，双双成为了衙门的捕快，各大弟子也都成为了惩恶扬善的侠客！</p>\n<p><strong>那么问题来了：如果白展堂没有将这种手法告知长老，会怎么样呢？</strong> </p>\n<p>有两种可能。</p>\n<p>其一，白展堂此生未收徒，葵花派因“葵花点穴手”需要念五个字，逐渐式微，从此江湖再也没有葵花派的威名。</p>\n<p>其二，白展堂广收门徒，每日传授和教导子弟，将“葵花点”手法发扬光大，但每日忙忙碌碌，不仅要教导弟子学习“葵花点”手法，还要回葵花派学习长老闭关研习出来的新武功。</p>\n<p><strong>说到这里，我想大家已经明白了我所要表达的意思了。</strong> </p>\n<p>白展堂研究出“葵花点”的手法后，回门派告知长老，这种行为就是“上游优先”。</p>\n<p>为什么要使用“上游优先”？相信从这则小故事不难看出：</p>\n<ul>\n<li><strong>利于上游合并</strong>：随着时间的推移，下游的修改越晚反馈给上游，上游变越难合并下游的修改。<ul>\n<li>假如白展堂在临死前再将“葵花点”手法告知门派，门派的葵花点穴手早就出到 9527 版了，手法可能很难和 9527 版葵花点穴手融合。</li>\n</ul>\n</li>\n<li><strong>减轻维护负担</strong>：下游自己维护的成本太高，提高给上游维护，会降低下游维护成本。<ul>\n<li>葵花派除了长老授课以外，要求白展堂单独授课讲解“葵花点”手法，白展堂打王者荣耀的时间都没有了，更别说研习新武功。白展堂整理出手法秘籍交给长老，由长老统一传授，白展堂又可以快意江湖了。</li>\n</ul>\n</li>\n<li><strong>便于合作共赢</strong>：通过和上游合作，可以更为顺畅地与上游达成一致，得到上游的认可，也更容易将上游的修改合并进来。<ul>\n<li>白展堂因贡献了“葵花点”手法被尊称为首席大弟子，长老在“葵花点”的基础上研习出提高葵花点穴手定身时长的法门，白展堂第一时间得到秘籍修炼，如鱼得水。</li>\n<li>反之，白展堂没有贡献“葵花点”手法自己自行修炼，长老研习出提高葵花点穴手定身时长的法门，白展堂发现和“葵花点”手法运功路线不一致，难以习得新版葵花点穴手，无法提升威力。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用“上游优先”需要做什么？\"><a href=\"#使用“上游优先”需要做什么？\" class=\"headerlink\" title=\"使用“上游优先”需要做什么？\"></a>使用“上游优先”需要做什么？</h2><p>首先，需要<strong>与上游达成合作</strong>。达成合作是反馈给上游的捷径，越密切的合作者提出的想法，越容易被上游所接受。</p>\n<p>其次，需要<strong>保持与上游的沟通</strong>。达成合作不是一蹴而就的事情，需要与上游加强沟通，及时了解上游动态，否则，无法确保你的想法与上游的想法是否一致。</p>\n<p>最后，需要<strong>将修改及时反馈给上游</strong>。上游的修改需要成本，及时的反馈可以节省成本，这也是上游收费接收下游修改的一个重要标准。及时的反馈，能够让合作变得更加通畅。</p>\n<h2 id=\"哪些开源组织或公司使用“上游优先”？\"><a href=\"#哪些开源组织或公司使用“上游优先”？\" class=\"headerlink\" title=\"哪些开源组织或公司使用“上游优先”？\"></a>哪些开源组织或公司使用“上游优先”？</h2><p>在开源世界中，开源项目对“上游优先”的宣传并不多，但实际上大部分开源项目对“上游优先”都是非常认可的。</p>\n<p>“上游优先”的理念更加像是一种约定俗成，除了一些知名开源项目可能有提到或宣讲过该理念以外，更多的是默默践行这一理念。有很多开源项目没有对“上游优先”做过多的解释，但在开源过程中对开源项目的必要修改都会反馈到上游。</p>\n<p>下面列举一些明确采用“上游优先”的部分开源组织或公司：</p>\n<ul>\n<li>RedHat：红帽组织对“上游优先”可谓是彻底贯彻，网站上能够搜到的关于“上游优先”的文章和演讲，红帽可谓是不遗余力。</li>\n<li>OpenEuler：OpenEuler 是华为的一个开源项目，用 OpenEuler 自己的话来说：OpenEuler 来自于社区，回馈到社区。</li>\n<li>Google Chromium：Google Chromium 官方的 Design Documents 中，将 Upstream First 放在了 General 一栏中。</li>\n<li>The Linux Foundation：LF 官网在“Best Practices to Contribute Code Upstream”中，可以找到 Upstream First 的介绍。</li>\n<li>……（更多案例，欢迎补充）</li>\n</ul>\n<h2 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h2><p>之所以编写本文，在此要特别感谢开源路上认识的杰克老师（码云ID：@jack960330 ）对我的指点和支持！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://opensource.com/article/16/12/why-red-hat-takes-upstream-first-approach\">Why Red Hat takes an ‘upstream first’ approach</a> By  <a href=\"https://opensource.com/users/admin\">Opensource.com (Red Hat)</a> [Dec 05, 2016]</li>\n<li><a href=\"https://inform.tmforum.org/features-and-analysis/2017/05/upstream-first-building-products-open-source-software/\">Upstream first: Building products from open source software</a> By <a href=\"https://inform.tmforum.org/author/296076-dave-neary/\">Dave Neary, SDN and NFV with Open Source at Red Hat</a> [May, 2017]</li>\n<li><a href=\"http://opensourceway.community/posts/opensource_culture/what_is_upstream_and_its_benefits/\">开源软件项目的“上游优先”解惑</a> By <a href=\"http://opensourceway.community/posts/the_way_of_open_source/open_source_way/\">opensourceway</a> [Nov 13, 2017]</li>\n<li><a href=\"https://willemjiang.github.io/opensource/2019/10/29/UpStream-first.html\">上游优先地开发</a> By <a href=\"https://willemjiang.github.io/\">Willem Jiang‘s Blog</a> [Oct 29, 2019]</li>\n<li><a href=\"https://www.infoq.cn/article/zP9erqJmIK6IAWfUHBoW\">开源社区对开发者的价值到底有多大？</a> By <a href=\"https://www.infoq.cn/profile/11D1D4FAE98CEA/publish\">Eileen</a> [Apr 29, 2020]</li>\n</ul>\n","site":{"data":{}},"length":3710,"excerpt":"<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>2016 年，Thomas Cameron 在一次五分钟闪电演讲中提到了“Upstream first”的概念，也就是我们所说的“上游优先”：</p>\n<blockquote>\n<p>Part of Red Hat’s commitment to open source, Cameron explains, is committing code to upstream projects. The company is a top contributor to the Linux kernel, glibc/GCC, OpenStack/RDO, KVM, JBoss.org projects, GNOME, and more.</p>\n<p>“We recognize that we are beholden to open source communities for our success,” Cameron said. “And we owe a debt of gratitude to those open source communities and we are responsible for contributing as much code as we can back to those communities because everyone gets better when we do that.”</p>\n</blockquote>\n<hr>","more":"<hr>\n<p>将这次演讲单独说明，是因为这是目前找到的关于“Upstream first”的最早资料，但这并不代表就是它的出处，上游优先这一概念的出处尚需考究。</p>\n<p>2017 年，Dave Neary 在 TM 会场上阐述了“Upstream first”对开源世界的重要性：</p>\n<blockquote>\n<p>“Upstream first” development is the idea that any changes (features, bug fixes) which you want to include in a product based on an open source project should be submitted to the project first, before being included in the product. This ensures that you minimize your long-term maintenance burden.</p>\n<p>……</p>\n<p>By engaging upstream first, you can get quick course corrections when your initial approach does not match community expectations, and you maintain patches against the very latest development tree. By building relationships with the upstream community, you will have an easier time getting changes accepted. And you maintain the possibility to ship features or patches in earlier versions by “backporting” features to the stable branch on which you have based your product.</p>\n</blockquote>\n<p>在读完上面的案例，相信你一定对上游优先有了一定的好奇：上游优先究竟是什么呢？它对开源社区有什么影响呢？</p>\n<p>下面，让我们带着疑问一起来了解一下。</p>\n<h2 id=\"什么是上游优先？\"><a href=\"#什么是上游优先？\" class=\"headerlink\" title=\"什么是上游优先？\"></a>什么是上游优先？</h2><p>直接与开源社区互动并在源头上解决问题的办法，被称为上游优先（Upstream first）。</p>\n<p>所谓上游，是一个相对的概念，意为“靠近源头的一方”。在开源社区中，主要指的是开源社区维护的主干版本。而所谓下游，是指基于上游开源项目衍生出的项目或产品。在 Github、Gitee 等代码管理平台中对开源项目的 fork 操作，就是一种对上游代码的拓展。</p>\n<p>那么，上游优先就很好理解了：基于开源项目的任何修改都应该提交优先提交给项目本身，然后再包含在自己的产品中。与之相反的处理方式是只基于自己产品进行维护，对上游不做反馈。</p>\n<h2 id=\"为什么要使用“上游优先”？\"><a href=\"#为什么要使用“上游优先”？\" class=\"headerlink\" title=\"为什么要使用“上游优先”？\"></a>为什么要使用“上游优先”？</h2><p>上游优先是开源社区提出的优秀的开源理念，那么它优秀在哪里呢？</p>\n<p><strong>举个简单的例子：</strong> </p>\n<p>葵花派长老将葵花点穴手传授给了白展堂和祝无双，在每次施展葵花点穴手时，都需要大喊一声：“葵花点穴手！”</p>\n<p>这一天，长老对两人说：堂堂、双双，你们修炼已经圆满，为师已经没有什么能够传授给你们的了，各自下山游历吧！说罢便闭关修炼去了。</p>\n<p>白展堂来到了同福客栈，因为葵花点穴手需要念五个字，被郭芙蓉四个字的排山倒海打得鼻青脸肿。</p>\n<p>正所谓人总是在被虐中成长，白展堂发现使用一种手法只需要喊“葵花点”就可以施展武功，终于打败郭芙蓉。</p>\n<p>随后，白展堂回到葵花派，将这种手法汇报给了长老，长老飞鸽传书，告知了所有门派弟子。</p>\n<p>葵花派从此发扬光大，双双成为了衙门的捕快，各大弟子也都成为了惩恶扬善的侠客！</p>\n<p><strong>那么问题来了：如果白展堂没有将这种手法告知长老，会怎么样呢？</strong> </p>\n<p>有两种可能。</p>\n<p>其一，白展堂此生未收徒，葵花派因“葵花点穴手”需要念五个字，逐渐式微，从此江湖再也没有葵花派的威名。</p>\n<p>其二，白展堂广收门徒，每日传授和教导子弟，将“葵花点”手法发扬光大，但每日忙忙碌碌，不仅要教导弟子学习“葵花点”手法，还要回葵花派学习长老闭关研习出来的新武功。</p>\n<p><strong>说到这里，我想大家已经明白了我所要表达的意思了。</strong> </p>\n<p>白展堂研究出“葵花点”的手法后，回门派告知长老，这种行为就是“上游优先”。</p>\n<p>为什么要使用“上游优先”？相信从这则小故事不难看出：</p>\n<ul>\n<li><strong>利于上游合并</strong>：随着时间的推移，下游的修改越晚反馈给上游，上游变越难合并下游的修改。<ul>\n<li>假如白展堂在临死前再将“葵花点”手法告知门派，门派的葵花点穴手早就出到 9527 版了，手法可能很难和 9527 版葵花点穴手融合。</li>\n</ul>\n</li>\n<li><strong>减轻维护负担</strong>：下游自己维护的成本太高，提高给上游维护，会降低下游维护成本。<ul>\n<li>葵花派除了长老授课以外，要求白展堂单独授课讲解“葵花点”手法，白展堂打王者荣耀的时间都没有了，更别说研习新武功。白展堂整理出手法秘籍交给长老，由长老统一传授，白展堂又可以快意江湖了。</li>\n</ul>\n</li>\n<li><strong>便于合作共赢</strong>：通过和上游合作，可以更为顺畅地与上游达成一致，得到上游的认可，也更容易将上游的修改合并进来。<ul>\n<li>白展堂因贡献了“葵花点”手法被尊称为首席大弟子，长老在“葵花点”的基础上研习出提高葵花点穴手定身时长的法门，白展堂第一时间得到秘籍修炼，如鱼得水。</li>\n<li>反之，白展堂没有贡献“葵花点”手法自己自行修炼，长老研习出提高葵花点穴手定身时长的法门，白展堂发现和“葵花点”手法运功路线不一致，难以习得新版葵花点穴手，无法提升威力。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用“上游优先”需要做什么？\"><a href=\"#使用“上游优先”需要做什么？\" class=\"headerlink\" title=\"使用“上游优先”需要做什么？\"></a>使用“上游优先”需要做什么？</h2><p>首先，需要<strong>与上游达成合作</strong>。达成合作是反馈给上游的捷径，越密切的合作者提出的想法，越容易被上游所接受。</p>\n<p>其次，需要<strong>保持与上游的沟通</strong>。达成合作不是一蹴而就的事情，需要与上游加强沟通，及时了解上游动态，否则，无法确保你的想法与上游的想法是否一致。</p>\n<p>最后，需要<strong>将修改及时反馈给上游</strong>。上游的修改需要成本，及时的反馈可以节省成本，这也是上游收费接收下游修改的一个重要标准。及时的反馈，能够让合作变得更加通畅。</p>\n<h2 id=\"哪些开源组织或公司使用“上游优先”？\"><a href=\"#哪些开源组织或公司使用“上游优先”？\" class=\"headerlink\" title=\"哪些开源组织或公司使用“上游优先”？\"></a>哪些开源组织或公司使用“上游优先”？</h2><p>在开源世界中，开源项目对“上游优先”的宣传并不多，但实际上大部分开源项目对“上游优先”都是非常认可的。</p>\n<p>“上游优先”的理念更加像是一种约定俗成，除了一些知名开源项目可能有提到或宣讲过该理念以外，更多的是默默践行这一理念。有很多开源项目没有对“上游优先”做过多的解释，但在开源过程中对开源项目的必要修改都会反馈到上游。</p>\n<p>下面列举一些明确采用“上游优先”的部分开源组织或公司：</p>\n<ul>\n<li>RedHat：红帽组织对“上游优先”可谓是彻底贯彻，网站上能够搜到的关于“上游优先”的文章和演讲，红帽可谓是不遗余力。</li>\n<li>OpenEuler：OpenEuler 是华为的一个开源项目，用 OpenEuler 自己的话来说：OpenEuler 来自于社区，回馈到社区。</li>\n<li>Google Chromium：Google Chromium 官方的 Design Documents 中，将 Upstream First 放在了 General 一栏中。</li>\n<li>The Linux Foundation：LF 官网在“Best Practices to Contribute Code Upstream”中，可以找到 Upstream First 的介绍。</li>\n<li>……（更多案例，欢迎补充）</li>\n</ul>\n<h2 id=\"特别感谢\"><a href=\"#特别感谢\" class=\"headerlink\" title=\"特别感谢\"></a>特别感谢</h2><p>之所以编写本文，在此要特别感谢开源路上认识的杰克老师（码云ID：@jack960330 ）对我的指点和支持！</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://opensource.com/article/16/12/why-red-hat-takes-upstream-first-approach\">Why Red Hat takes an ‘upstream first’ approach</a> By  <a href=\"https://opensource.com/users/admin\">Opensource.com (Red Hat)</a> [Dec 05, 2016]</li>\n<li><a href=\"https://inform.tmforum.org/features-and-analysis/2017/05/upstream-first-building-products-open-source-software/\">Upstream first: Building products from open source software</a> By <a href=\"https://inform.tmforum.org/author/296076-dave-neary/\">Dave Neary, SDN and NFV with Open Source at Red Hat</a> [May, 2017]</li>\n<li><a href=\"http://opensourceway.community/posts/opensource_culture/what_is_upstream_and_its_benefits/\">开源软件项目的“上游优先”解惑</a> By <a href=\"http://opensourceway.community/posts/the_way_of_open_source/open_source_way/\">opensourceway</a> [Nov 13, 2017]</li>\n<li><a href=\"https://willemjiang.github.io/opensource/2019/10/29/UpStream-first.html\">上游优先地开发</a> By <a href=\"https://willemjiang.github.io/\">Willem Jiang‘s Blog</a> [Oct 29, 2019]</li>\n<li><a href=\"https://www.infoq.cn/article/zP9erqJmIK6IAWfUHBoW\">开源社区对开发者的价值到底有多大？</a> By <a href=\"https://www.infoq.cn/profile/11D1D4FAE98CEA/publish\">Eileen</a> [Apr 29, 2020]</li>\n</ul>"},{"title":"MacOS11.0-brew 卡在 Updating Homebrew","date":"2021-02-27T16:00:00.000Z","updated":"2021-02-27T16:00:00.000Z","_content":"\n## 问题描述\n\n使用 MacOS11.0 brew 安装软件，一直卡在 Updating Homebrew 不动。\n\n```shell\nxs-Pro:~ xs$ brew install wget\nUpdating Homebrew...\n```\n\n---\n\n<!--more-->\n\n---\n\n## 解决方案\n\n### 方法一（推荐）\n\n直接关闭brew每次执行命令时的自动更新\n\n```bash\nvim ~/.bash_profile\n\n# 新增一行\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```\n\n\n\n### 方法二（未测试）\n\n替换brew源\n\n**该方法未测试** \n\n```bash\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n\n#替换homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\nbrew update\n\n\n# 备用地址-1\ncd \"$(brew --repo)\"\ngit remote set-url origin https://git.coding.net/homebrew/homebrew.git\nbrew update\n\n\n# 备用地址-2\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git\nbrew update\n```\n\n如果备用地址都不行，那就只能再换回官方地址了\n\n```bash\n#重置brew.git\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n\n#重置homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n\n\n## 参考资料\n\n- [Mac 解决brew一直卡在Updating Homebrew](https://www.jianshu.com/p/7cb05a2b39a5) 作者：Harveyhhw","source":"_posts/MacOS11.0-brew卡在Updating-Homebrew.md","raw":"---\ntitle: MacOS11.0-brew 卡在 Updating Homebrew\ndate: 2021-02-28\nupdated: 2021-02-28\ncategories:\n- MacOS\ntags:\n- MacOS\n---\n\n## 问题描述\n\n使用 MacOS11.0 brew 安装软件，一直卡在 Updating Homebrew 不动。\n\n```shell\nxs-Pro:~ xs$ brew install wget\nUpdating Homebrew...\n```\n\n---\n\n<!--more-->\n\n---\n\n## 解决方案\n\n### 方法一（推荐）\n\n直接关闭brew每次执行命令时的自动更新\n\n```bash\nvim ~/.bash_profile\n\n# 新增一行\nexport HOMEBREW_NO_AUTO_UPDATE=true\n```\n\n\n\n### 方法二（未测试）\n\n替换brew源\n\n**该方法未测试** \n\n```bash\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n\n#替换homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\nbrew update\n\n\n# 备用地址-1\ncd \"$(brew --repo)\"\ngit remote set-url origin https://git.coding.net/homebrew/homebrew.git\nbrew update\n\n\n# 备用地址-2\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git\nbrew update\n```\n\n如果备用地址都不行，那就只能再换回官方地址了\n\n```bash\n#重置brew.git\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n\n#重置homebrew-core.git\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n\n\n## 参考资料\n\n- [Mac 解决brew一直卡在Updating Homebrew](https://www.jianshu.com/p/7cb05a2b39a5) 作者：Harveyhhw","slug":"MacOS11.0-brew卡在Updating-Homebrew","published":1,"_id":"ckluz3vdx001wpt6a7htehboj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>使用 MacOS11.0 brew 安装软件，一直卡在 Updating Homebrew 不动。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xs-Pro:~ xs$ brew install wget</span><br><span class=\"line\">Updating Homebrew...</span><br></pre></td></tr></table></figure>\n\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方法一（推荐）\"><a href=\"#方法一（推荐）\" class=\"headerlink\" title=\"方法一（推荐）\"></a>方法一（推荐）</h3><p>直接关闭brew每次执行命令时的自动更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增一行</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法二（未测试）\"><a href=\"#方法二（未测试）\" class=\"headerlink\" title=\"方法二（未测试）\"></a>方法二（未测试）</h3><p>替换brew源</p>\n<p><strong>该方法未测试</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#替换homebrew-core.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用地址-1</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://git.coding.net/homebrew/homebrew.git</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用地址-2</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git</span><br><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n\n<p>如果备用地址都不行，那就只能再换回官方地址了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重置brew.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重置homebrew-core.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/7cb05a2b39a5\">Mac 解决brew一直卡在Updating Homebrew</a> 作者：Harveyhhw</li>\n</ul>\n","site":{"data":{}},"length":1173,"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>使用 MacOS11.0 brew 安装软件，一直卡在 Updating Homebrew 不动。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xs-Pro:~ xs$ brew install wget</span><br><span class=\"line\">Updating Homebrew...</span><br></pre></td></tr></table></figure>\n\n<hr>","more":"<hr>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方法一（推荐）\"><a href=\"#方法一（推荐）\" class=\"headerlink\" title=\"方法一（推荐）\"></a>方法一（推荐）</h3><p>直接关闭brew每次执行命令时的自动更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增一行</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOMEBREW_NO_AUTO_UPDATE=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法二（未测试）\"><a href=\"#方法二（未测试）\" class=\"headerlink\" title=\"方法二（未测试）\"></a>方法二（未测试）</h3><p>替换brew源</p>\n<p><strong>该方法未测试</strong> </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#替换homebrew-core.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用地址-1</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://git.coding.net/homebrew/homebrew.git</span><br><span class=\"line\">brew update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备用地址-2</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git</span><br><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n\n<p>如果备用地址都不行，那就只能再换回官方地址了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#重置brew.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span></span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重置homebrew-core.git</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class=\"line\">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/7cb05a2b39a5\">Mac 解决brew一直卡在Updating Homebrew</a> 作者：Harveyhhw</li>\n</ul>"},{"title":"必知必会面试题之 JVM","date":"2021-03-03T16:00:00.000Z","updated":"2021-03-03T16:00:00.000Z","_content":"## 目录\n\n不定期更新中……\n\n\n\n---\n\n<!--more-->\n\n---\n\n## 什么是 JVM\n\nJVM 全称 Java Virtual Machine，意为 Java 虚拟机。JVM 是软件层面的虚拟机器，需要运行在操作系统之上。JVM 包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、一个堆和一个存储方法域。\n\n## Java 文件从编译到执行的过程\n\nJava 文件通过 javac 编译为 class 文件，class 文件和相关 java 类库通过 ClassLoader 加载到内存中，使用字节码解释器和 JIT 及时编译器解析，交由执行引擎进行具体执行。\n\n![image-20210304233638640](必知必会面试题之JVM.assets/image-20210304233638640.png)\n\n## javac 的过程\n\n读取源码 >> 词法分析器 >> Token 流 >> 语法分析器 >> 抽象语法树 >> 语义分析器 >> 注解抽象语法树 >> 字节码生成器 >> ByteCode\n\n![image-20210304233813332](必知必会面试题之JVM.assets/image-20210304233813332.png)\n\n## JDK、JRE、JVM的关系\n\n- JDK = JRE + Development Kit\n- JRE = JVM + Core Lib\n- JVM\n\n","source":"_posts/必知必会面试题之JVM.md","raw":"---\ntitle: 必知必会面试题之 JVM\ndate: 2021-03-04\nupdated: 2021-03-04\ncategories:\n- JVM\ntags:\n- JVM\n- 面试\n---\n## 目录\n\n不定期更新中……\n\n\n\n---\n\n<!--more-->\n\n---\n\n## 什么是 JVM\n\nJVM 全称 Java Virtual Machine，意为 Java 虚拟机。JVM 是软件层面的虚拟机器，需要运行在操作系统之上。JVM 包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、一个堆和一个存储方法域。\n\n## Java 文件从编译到执行的过程\n\nJava 文件通过 javac 编译为 class 文件，class 文件和相关 java 类库通过 ClassLoader 加载到内存中，使用字节码解释器和 JIT 及时编译器解析，交由执行引擎进行具体执行。\n\n![image-20210304233638640](必知必会面试题之JVM.assets/image-20210304233638640.png)\n\n## javac 的过程\n\n读取源码 >> 词法分析器 >> Token 流 >> 语法分析器 >> 抽象语法树 >> 语义分析器 >> 注解抽象语法树 >> 字节码生成器 >> ByteCode\n\n![image-20210304233813332](必知必会面试题之JVM.assets/image-20210304233813332.png)\n\n## JDK、JRE、JVM的关系\n\n- JDK = JRE + Development Kit\n- JRE = JVM + Core Lib\n- JVM\n\n","slug":"必知必会面试题之JVM","published":1,"_id":"cklv0wm860009x56a37rt2tl6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<hr>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"什么是-JVM\"><a href=\"#什么是-JVM\" class=\"headerlink\" title=\"什么是 JVM\"></a>什么是 JVM</h2><p>JVM 全称 Java Virtual Machine，意为 Java 虚拟机。JVM 是软件层面的虚拟机器，需要运行在操作系统之上。JVM 包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、一个堆和一个存储方法域。</p>\n<h2 id=\"Java-文件从编译到执行的过程\"><a href=\"#Java-文件从编译到执行的过程\" class=\"headerlink\" title=\"Java 文件从编译到执行的过程\"></a>Java 文件从编译到执行的过程</h2><p>Java 文件通过 javac 编译为 class 文件，class 文件和相关 java 类库通过 ClassLoader 加载到内存中，使用字节码解释器和 JIT 及时编译器解析，交由执行引擎进行具体执行。</p>\n<p><img src=\"/.io//image-20210304233638640.png\" alt=\"image-20210304233638640\"></p>\n<h2 id=\"javac-的过程\"><a href=\"#javac-的过程\" class=\"headerlink\" title=\"javac 的过程\"></a>javac 的过程</h2><p>读取源码 &gt;&gt; 词法分析器 &gt;&gt; Token 流 &gt;&gt; 语法分析器 &gt;&gt; 抽象语法树 &gt;&gt; 语义分析器 &gt;&gt; 注解抽象语法树 &gt;&gt; 字节码生成器 &gt;&gt; ByteCode</p>\n<p><img src=\"/.io//image-20210304233813332.png\" alt=\"image-20210304233813332\"></p>\n<h2 id=\"JDK、JRE、JVM的关系\"><a href=\"#JDK、JRE、JVM的关系\" class=\"headerlink\" title=\"JDK、JRE、JVM的关系\"></a>JDK、JRE、JVM的关系</h2><ul>\n<li>JDK = JRE + Development Kit</li>\n<li>JRE = JVM + Core Lib</li>\n<li>JVM</li>\n</ul>\n","site":{"data":{}},"length":404,"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>不定期更新中……</p>\n<hr>","more":"<hr>\n<h2 id=\"什么是-JVM\"><a href=\"#什么是-JVM\" class=\"headerlink\" title=\"什么是 JVM\"></a>什么是 JVM</h2><p>JVM 全称 Java Virtual Machine，意为 Java 虚拟机。JVM 是软件层面的虚拟机器，需要运行在操作系统之上。JVM 包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收、一个堆和一个存储方法域。</p>\n<h2 id=\"Java-文件从编译到执行的过程\"><a href=\"#Java-文件从编译到执行的过程\" class=\"headerlink\" title=\"Java 文件从编译到执行的过程\"></a>Java 文件从编译到执行的过程</h2><p>Java 文件通过 javac 编译为 class 文件，class 文件和相关 java 类库通过 ClassLoader 加载到内存中，使用字节码解释器和 JIT 及时编译器解析，交由执行引擎进行具体执行。</p>\n<p><img src=\"/.io//image-20210304233638640.png\" alt=\"image-20210304233638640\"></p>\n<h2 id=\"javac-的过程\"><a href=\"#javac-的过程\" class=\"headerlink\" title=\"javac 的过程\"></a>javac 的过程</h2><p>读取源码 &gt;&gt; 词法分析器 &gt;&gt; Token 流 &gt;&gt; 语法分析器 &gt;&gt; 抽象语法树 &gt;&gt; 语义分析器 &gt;&gt; 注解抽象语法树 &gt;&gt; 字节码生成器 &gt;&gt; ByteCode</p>\n<p><img src=\"/.io//image-20210304233813332.png\" alt=\"image-20210304233813332\"></p>\n<h2 id=\"JDK、JRE、JVM的关系\"><a href=\"#JDK、JRE、JVM的关系\" class=\"headerlink\" title=\"JDK、JRE、JVM的关系\"></a>JDK、JRE、JVM的关系</h2><ul>\n<li>JDK = JRE + Development Kit</li>\n<li>JRE = JVM + Core Lib</li>\n<li>JVM</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cklt0qym700007u6aehllaxlk","category_id":"ckltn12wm0000qh6a0oj3auof","_id":"ckltn12wp0001qh6a2c5yehc4"},{"post_id":"ckluv5n2t0000286a6qyx88f6","category_id":"ckluvw25j0006546a70uk0t3e","_id":"ckluvw25j0007546a82ez27xk"},{"post_id":"ckluyb5xj000s546addhm0b5v","category_id":"ckluyc8sh001a546aaf5tdy1x","_id":"ckluyc8sh001b546a3o7ka3c2"},{"post_id":"ckluyfpil001g546abjyde515","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluyftoh001l546a53zvdt5i"},{"post_id":"ckluyhtqh001s546a1orrd63c","category_id":"ckluxx8wg000i546ahjmc1c4i","_id":"ckluyhtqi001v546aazvlh1dd"},{"post_id":"ckluypyl5000bpt6aa0hbci1y","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluypyl6000ept6a2t0ognx7"},{"post_id":"ckluyrrdq000jpt6agq738cyj","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluyrrds000mpt6ad2uw8qt6"},{"post_id":"ckluyw82s000vpt6a29r0gfln","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluyw82x000ypt6a5p2lftry"},{"post_id":"ckluyxjbe0017pt6a1gse0on0","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluyxjbf001apt6a3wz1dzyl"},{"post_id":"ckluyxpba001bpt6acdm13wy5","category_id":"ckluyftog001k546aabtzbtys","_id":"ckluyxpbb001ept6adin9g9az"},{"post_id":"ckluz3bas001tpt6a81pedcis","category_id":"ckluyc8sh001a546aaf5tdy1x","_id":"ckluz3bau001vpt6aaax1gs2h"},{"post_id":"ckluz3vdx001wpt6a7htehboj","category_id":"ckluz4c5x0020pt6a7exrfvu4","_id":"ckluz4c5y0021pt6abzpy2ho5"},{"post_id":"cklv0wm860009x56a37rt2tl6","category_id":"cklv0b8f90005x56ad2ox9nrj","_id":"cklv0wm89000cx56acep5bbsw"}],"PostTag":[{"post_id":"cklt0qym700007u6aehllaxlk","tag_id":"cklufqta20000sj6acvfpdqz5","_id":"cklufqta40001sj6aduzk5hru"},{"post_id":"ckluv5n2t0000286a6qyx88f6","tag_id":"ckluvvtfo0002546a6nogdm1f","_id":"ckluxw9mg000g546adwjac4j7"},{"post_id":"ckluyb5xj000s546addhm0b5v","tag_id":"ckluyccj7001c546aevur1nn2","_id":"ckluyccj7001d546a4gn12196"},{"post_id":"ckluyb5xj000s546addhm0b5v","tag_id":"ckluycf55001e546ahqbb2p75","_id":"ckluycf55001f546agk3d875f"},{"post_id":"ckluyfpil001g546abjyde515","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluyfvl5001n546afcmx505e"},{"post_id":"ckluyfpil001g546abjyde515","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluyg8ge001r546a570xej0x"},{"post_id":"ckluyhtqh001s546a1orrd63c","tag_id":"ckluxxi8d000m546a75gm82ul","_id":"ckluyhtqi001t546a843475h1"},{"post_id":"ckluyhtqh001s546a1orrd63c","tag_id":"ckluxxb85000k546a2k4z9ivq","_id":"ckluyhtqi001u546a12te1l5g"},{"post_id":"ckluypyl5000bpt6aa0hbci1y","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluypyl6000cpt6adtxz9831"},{"post_id":"ckluypyl5000bpt6aa0hbci1y","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluypyl6000dpt6a6aar0j1q"},{"post_id":"ckluyrrdq000jpt6agq738cyj","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluyrrds000kpt6acb329cmn"},{"post_id":"ckluyrrdq000jpt6agq738cyj","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluyrrds000lpt6a1ko39v7t"},{"post_id":"ckluyw82s000vpt6a29r0gfln","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluyw82w000wpt6aby89bgqn"},{"post_id":"ckluyw82s000vpt6a29r0gfln","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluyw82x000xpt6a1hfahqgd"},{"post_id":"ckluyxjbe0017pt6a1gse0on0","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluyxjbf0018pt6actepfyls"},{"post_id":"ckluyxjbe0017pt6a1gse0on0","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluyxjbf0019pt6a42jffn6p"},{"post_id":"ckluyxpba001bpt6acdm13wy5","tag_id":"ckluyfvl4001m546af3i80u5h","_id":"ckluyxpbb001cpt6a1c7yh0l7"},{"post_id":"ckluyxpba001bpt6acdm13wy5","tag_id":"ckluyg8ge001q546abqev0df6","_id":"ckluyxpbb001dpt6ahftr7fg7"},{"post_id":"ckluz3bas001tpt6a81pedcis","tag_id":"ckluyccj7001c546aevur1nn2","_id":"ckluz3bau001upt6afz193xmc"},{"post_id":"ckluz3vdx001wpt6a7htehboj","tag_id":"ckluz4e660022pt6a1tu37rme","_id":"ckluz4e670023pt6a8tv251sl"},{"post_id":"cklv0wm860009x56a37rt2tl6","tag_id":"cklv0bbo60007x56a2lo14e8f","_id":"cklv0wm88000ax56a56nmc8a6"},{"post_id":"cklv0wm860009x56a37rt2tl6","tag_id":"ckluyg8ge001q546abqev0df6","_id":"cklv0wm89000bx56ab6ju36nh"}],"Tag":[{"name":"默认","_id":"ckltn1sde0002qh6af6603m2q"},{"name":"Hexo","_id":"cklufqta20000sj6acvfpdqz5"},{"name":"服务注册","_id":"ckluv5n350004286a530ke6hd"},{"name":"Eureka","_id":"ckluv5n370006286a6nkccbl7"},{"name":"SpringBoot","_id":"ckluvvtfo0002546a6nogdm1f"},{"name":"SpringBoot记一次 RocketMQ broker 因内存不足导致的启动失败","_id":"ckluxvl270008546adwymb8l4"},{"name":"RocketMQ","_id":"ckluxxb85000k546a2k4z9ivq"},{"name":"消息中间件","_id":"ckluxxi8d000m546a75gm82ul"},{"name":"开源","_id":"ckluyccj7001c546aevur1nn2"},{"name":"感悟","_id":"ckluycf55001e546ahqbb2p75"},{"name":"Java","_id":"ckluyfvl4001m546af3i80u5h"},{"name":"注解","_id":"ckluyfz8z001o546a3p1y4nt7"},{"name":"面试","_id":"ckluyg8ge001q546abqev0df6"},{"name":"MacOS","_id":"ckluz4e660022pt6a1tu37rme"},{"name":"SpringCloud","_id":"ckluzfplu0002x56ahm7zeif9"},{"name":"JVM","_id":"cklv0bbo60007x56a2lo14e8f"}]}}